/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package MMS.gui;


import MMS.helperFunctions.CropsDB;
import java.awt.Color;
import java.io.IOException;
import java.nio.file.Paths;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import static javax.swing.WindowConstants.DISPOSE_ON_CLOSE;

/**
 *
 * @author admin
 */
public class deleteCrop extends javax.swing.JFrame {
    private String baseDirectory;
    private boolean loading;
    
    private CropsDB cDB = new CropsDB();
    private List <String> CropType = null;
    private List <String> CropVariety = new ArrayList();
    /**
     * Creates new form deleteCrop
     */
    public deleteCrop(String Location) {
        initComponents();
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        baseDirectory = Location;
    }
    
    public deleteCrop() {
        initComponents();
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        baseDirectory = Paths.get(".").toAbsolutePath().normalize().getParent().toString();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        deleteTabs = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cropType = new javax.swing.JComboBox<String>();
        jLabel25 = new javax.swing.JLabel();
        cropVariety = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        statusLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        cropType1 = new javax.swing.JComboBox<String>();
        jButton2 = new javax.swing.JButton();
        statusLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        deleteTabs.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                deleteTabsStateChanged(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Choose Crop:");

        cropType.setMaximumRowCount(10);
        cropType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cropTypeActionPerformed(evt);
            }
        });

        jLabel25.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel25.setText("Variety:");

        cropVariety.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cropVarietyItemStateChanged(evt);
            }
        });

        jButton1.setText("Delete Variety");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        statusLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(155, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cropType, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addComponent(jLabel25)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cropVariety, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(105, 105, 105))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(191, 191, 191))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(134, 134, 134)
                .addComponent(statusLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cropType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(cropVariety, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 87, Short.MAX_VALUE)
                .addComponent(statusLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap())
        );

        deleteTabs.addTab("Delete Crop Variety", jPanel1);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Choose Crop:");

        cropType1.setMaximumRowCount(10);
        cropType1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cropType1ActionPerformed(evt);
            }
        });

        jButton2.setText("Delete Crop Type");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        statusLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(168, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cropType1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(93, 93, 93))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addGap(179, 179, 179))))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(147, 147, 147)
                .addComponent(statusLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cropType1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 97, Short.MAX_VALUE)
                .addComponent(statusLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addContainerGap())
        );

        deleteTabs.addTab("Delete Crop Type", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(deleteTabs)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addComponent(deleteTabs, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cropTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cropTypeActionPerformed

        if (!loading){
            if (cropType.getItemCount() != 0){
                loading = true;

                //Populating New Planting information
                PopulateNewPlantingInformation();

                //Get the the Variety Column names, so we can search on it base on that table.
                String column = CropType.get(1).substring(0, CropType.get(1).length()-1);

               
                
                // Populating Crop Variety
                PopulateCropVarietyDropDown(column, 0);

                loading = false;
            }
        }
    }//GEN-LAST:event_cropTypeActionPerformed

    private void cropVarietyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cropVarietyItemStateChanged

//        if (!loading){
//
//
//            if (evt.getStateChange() == ItemEvent.SELECTED){
//
//                if (cropType.getItemCount() != 0){
//                    //Get the the Variety Column names
//                    String column = CropType.get(1).substring(0, CropType.get(1).length()-1);
//
//                    PopulateGrowthStageHeaders(column);
//                }
//            }
//        }
    }//GEN-LAST:event_cropVarietyItemStateChanged

    private void cropType1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cropType1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cropType1ActionPerformed

    private void deleteTabsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_deleteTabsStateChanged
        baseDirectory = Paths.get(".").toAbsolutePath().normalize().getParent().toString();
        if (deleteTabs.getSelectedIndex() == 0){
            loading = true;
            // Getting crop types to populate information. This will populate "Choose Crop:" Drop Down menu
            String column1 = PopulateCropTypeDropDown(0);
            
            try {
                CropType = cDB.readOneRowFromDB(baseDirectory, "_CropTypes","CropType", cropType.getSelectedItem().toString());
            } catch (IOException | SQLException ex) {
                Logger.getLogger(deleteCrop.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            //Get the the Variety Column names, so we can search on it base on that table.
              String column = CropType.get(1).substring(0, CropType.get(1).length()-1);

               
                
                // Populating Crop Variety
                PopulateCropVarietyDropDown(column, 0);

//            //Populating CropVariety on Startup
//            PopulateCropVarietyDropDown(column1, 0);
            loading = false;
        }
        if (deleteTabs.getSelectedIndex() == 1){
            // Getting crop types to populate information. This will populate "Choose Crop:" Drop Down menu
            String column1 = PopulateCropTypeDropDown(1);       

            try {
                CropType = cDB.readOneRowFromDB(baseDirectory, "_CropTypes","CropType", cropType.getSelectedItem().toString());
            } catch (IOException | SQLException ex) {
                Logger.getLogger(deleteCrop.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            //Get the the Variety Column names, so we can search on it base on that table.
            String column = CropType.get(1).substring(0, CropType.get(1).length()-1);

            // Populating Crop Variety
            PopulateCropVarietyDropDown(column, 3);
        }
    }//GEN-LAST:event_deleteTabsStateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //Deleting Crop Variety
        boolean completed = false;
        List <String> data = new ArrayList();
        String column = "";
        System.out.println();
        if (!cropVariety.getSelectedItem().toString().equalsIgnoreCase("none")){
            try {
                CropType = cDB.readOneRowFromDB(baseDirectory, "_CropTypes","CropType", cropType.getSelectedItem().toString());
            } catch (IOException | SQLException ex) {
                Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(rootPane, "Error 100.1: Unable to Read Row from Crops Database", "Database Connectivity Error", JOptionPane.ERROR_MESSAGE);
            }
            
            try {
                completed = cDB.deleteRowFromDB(baseDirectory, CropType.get(1), CropType.get(1).substring(0, CropType.get(1).length()-1), cropVariety.getSelectedItem().toString());
            } catch (SQLException ex) {
                Logger.getLogger(deleteCrop.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (completed){
                statusLabel1.setForeground(Color.BLUE);
                statusLabel1.setText("Successful");
            }else{
                statusLabel1.setForeground(Color.RED);
                statusLabel1.setText("FAILED");
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        //Deleting Crop Table
        boolean completed = false;
        System.out.println();
        if (!cropType1.getSelectedItem().toString().equalsIgnoreCase("none")){
            try {
                CropType = cDB.readOneRowFromDB(baseDirectory, "_CropTypes","CropType", cropType1.getSelectedItem().toString());
                CropVariety = cDB.readOneColumnFromDB(baseDirectory, CropType.get(1), CropType.get(1).substring(0, CropType.get(1).length()-1), 0);
            } catch (IOException | SQLException ex) {
                Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(rootPane, "Error 100.1: Unable to Read Row from Crops Database", "Database Connectivity Error", JOptionPane.ERROR_MESSAGE);
            }
            //Deleting the Associated table
            if (CropVariety.get(0).equalsIgnoreCase("none")){
               completed = cDB.deleteTable(baseDirectory, CropType.get(1));
            }
            //Now deleting the entry from the main table
            if (completed){
                try{
                    completed = cDB.deleteRowFromDB(baseDirectory, "_CropTypes", "CropType", CropType.get(0));
                } catch (SQLException ex) {
                    Logger.getLogger(deleteCrop.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (completed){
                statusLabel2.setForeground(Color.BLUE);
                statusLabel2.setText("Successful");
            }else{
                statusLabel2.setForeground(Color.RED);
                statusLabel2.setText("FAILED");
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(deleteCrop.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(deleteCrop.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(deleteCrop.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(deleteCrop.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
         try {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");

        } catch (ClassNotFoundException | IllegalAccessException | InstantiationException | UnsupportedLookAndFeelException e) {
        
        }
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new deleteCrop().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cropType;
    private javax.swing.JComboBox<String> cropType1;
    private javax.swing.JComboBox cropVariety;
    private javax.swing.JTabbedPane deleteTabs;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel statusLabel1;
    private javax.swing.JLabel statusLabel2;
    // End of variables declaration//GEN-END:variables

    public String PopulateCropTypeDropDown(int num){
        String column = "";    
        try{
            CropType = cDB.readOneColumnFromDB(baseDirectory, "_CropTypes", "CropType", 0);
        }catch(SQLException ex){
            JOptionPane.showMessageDialog(rootPane, "Error 101.1: Unable to Read Row from Crops Database", "Database Error", JOptionPane.ERROR_MESSAGE);
        }
        
        //Populating CropType on Startup
        loading = true;
        Iterator itr = CropType.iterator();
        if (num == 0){
            while (itr.hasNext()){
                 try{
                     cropType.addItem(itr.next().toString());
                 }catch(NullPointerException ex){
                    JOptionPane.showMessageDialog(rootPane, "Error 900.1: Null Pointer Exceptions", "Field Error", JOptionPane.ERROR_MESSAGE);
                 }
            }
            //Get the the Variety Column names, so we can search on it base on that table.
            column = CropType.get(0).substring(0, CropType.get(0).length());
        }else if (num == 1){
            while (itr.hasNext()){
                 try{
                     cropType1.addItem(itr.next().toString());
                 }catch(NullPointerException ex){
                    JOptionPane.showMessageDialog(rootPane, "Error 900.1: Null Pointer Exceptions", "Field Error", JOptionPane.ERROR_MESSAGE);
                 }
            }
            //Get the the Variety Column names, so we can search on it base on that table.
            column = CropType.get(0).substring(0, CropType.get(0).length());
        }

        return column;
    }
    public void PopulateCropVarietyDropDown(String column, int sort){
        try {
            CropVariety = cDB.readOneColumnFromDB(baseDirectory, CropType.get(1), column, sort);
        } catch (SQLException ex) {
            Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(rootPane, "Error 101.2: Unable to retrieve Column of Data from crops database", "Database Connectivity Error", JOptionPane.ERROR_MESSAGE);
        }
        cropVariety.removeAllItems();

        Iterator itr = CropVariety.iterator();
        while (itr.hasNext()){
            cropVariety.addItem(itr.next().toString());
        }
    }
    
    public void PopulateNewPlantingInformation(){
        try {
            CropType = cDB.readOneRowFromDB(baseDirectory, "_CropTypes","CropType", (String)cropType.getSelectedItem());
        } catch (IOException | SQLException ex) {
            Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(rootPane, "Error 100.1: Unable to Read Row from Crops Database", "Database Connectivity Error", JOptionPane.ERROR_MESSAGE);
        }
       }
}
