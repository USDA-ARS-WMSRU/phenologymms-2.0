/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package MMS.gui;

import MMS.helperFunctions.FileFunctions;
import MMS.helperFunctions.WeatherDB;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import org.apache.commons.lang.StringUtils;

/**
 *
 * @author mike.herder
 */
public class SystemSettings extends javax.swing.JFrame {
    //These are variables to help with the loading of the program
    private boolean Loading = false;
    private String baseDirectory = "";
    
    //There are for accessing the database
    private WeatherDB wDB = new WeatherDB();
    private List <String> WeatherCountry = null;
    private List <String> WeatherRegion = null;
    private FileFunctions fp = new FileFunctions();
    
    //Variables needed for this program
    private String defaultCountry, defaultRegion = "";
    
    /**
     * Creates new form SystemSettings
     */
    public SystemSettings(String bd, String dCountry, String dRegion) {
        initComponents();
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        baseDirectory = bd;
        initialLoading();
        defaultCountry = dCountry;
        defaultRegion = dRegion;
    }
    
    public SystemSettings() {
        initComponents();
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        baseDirectory = Paths.get(".").toAbsolutePath().normalize().getParent().toString();
        initialLoading();
        defaultCountry = "";
        defaultRegion = "";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel7 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        Country = new javax.swing.JComboBox();
        jLabel18 = new javax.swing.JLabel();
        Region = new javax.swing.JComboBox();
        addIP = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel17.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel17.setText("Default Country:");

        Country.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Country.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CountryActionPerformed(evt);
            }
        });

        jLabel18.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel18.setText("Default Region:");

        Region.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        addIP.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        addIP.setText("Save");
        addIP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addIPActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(286, 286, 286)
                        .addComponent(addIP))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel17)
                            .addComponent(jLabel18))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Country, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Region, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(393, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(Country, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(Region, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 129, Short.MAX_VALUE)
                .addComponent(addIP)
                .addGap(28, 28, 28))
        );

        jTabbedPane2.addTab("Input Page", jPanel7);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("System Settings");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 747, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addIPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addIPActionPerformed
        List<String> writeToFile = new ArrayList();

        //Checking to See if Country and Region both have values, if they do, then adding them to a file.
        if (!Country.getSelectedItem().toString().equalsIgnoreCase("none"))
            writeToFile.add(Country.getSelectedItem().toString());
        if (!Region.getSelectedItem().toString().equalsIgnoreCase("none"))
            writeToFile.add(Region.getSelectedItem().toString());

        if (Country.getSelectedItem().toString().length() > 0)
            fp.WriteSettingsFile(baseDirectory, Country.getSelectedItem().toString() , Region.getSelectedItem().toString());
    }//GEN-LAST:event_addIPActionPerformed

    private void CountryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CountryActionPerformed
        List<String> info = null ;

        if (!Loading){
            if (Country.getItemCount() != 0){
                /*
                * Populating Region DropDown button For the selected Country
                * If there are no Regions, then the WeatherFile sections will be
                * populated if there are any weatherFiles.
                */
                PoplulatingRegionDropDown();
            }
        }
    }//GEN-LAST:event_CountryActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SystemSettings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SystemSettings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SystemSettings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SystemSettings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        try {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");

        } catch (ClassNotFoundException | IllegalAccessException | InstantiationException | UnsupportedLookAndFeelException e) {
        
        }
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SystemSettings().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox Country;
    private javax.swing.JComboBox Region;
    private javax.swing.JButton addIP;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JTabbedPane jTabbedPane2;
    // End of variables declaration//GEN-END:variables

    private void initialLoading(){
        Loading = true;
        
        // Getting a list of countries from the database to populate Country DropDownBox
        PopulatingCountryDropDown();        
        
        /*
        * Checking to see if the country List has values
        */
        if (Country.getItemCount() != 0){
            //Populating the Region DropDown Button
            PoplulatingRegionDropDown();
        
        Loading = false;
    }
}
    public void PopulatingCountryDropDown(){
        try{
            WeatherCountry = wDB.readOneColumnFromDB(baseDirectory, "__Countries", "CountryName", null);

        }catch(SQLException e){
            JOptionPane.showMessageDialog(rootPane, "Error 201.1: Unable to retrieve Column of Data from Weather Database", "Database Error", JOptionPane.ERROR_MESSAGE);
        }    
        Iterator itr = WeatherCountry.iterator();
      
        while (itr.hasNext()){
            try{
                Country.addItem(itr.next().toString());
            }catch(NullPointerException ex){
                JOptionPane.showMessageDialog(rootPane, "Error 900.2: Null Pointer Exceptions", "Field Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        if (StringUtils.isNotEmpty(defaultCountry))
            Country.setSelectedItem(defaultCountry);
    }
     
    

    public void PoplulatingRegionDropDown(){

        
        try {
                WeatherCountry = wDB.getTable(baseDirectory, "__Countries", Country.getSelectedItem().toString());

        } catch (IOException ex) {
            Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(rootPane, "Error ###.#: Unable to retrieve Table from Weather Database", "Database Connectivity Error", JOptionPane.ERROR_MESSAGE);
        }

        /*
         * Getting list of states / regions. based on jComboBox3 and will populate
         * the regions into jComboBox4
         * This will populate "Select Weather Area:" Drop Down menu
         */

        if (WeatherCountry.get(2).equalsIgnoreCase("true")){
            //Read Weather database for country Information
            try {
                WeatherRegion = wDB.readOneColumnFromDB(baseDirectory, WeatherCountry.get(1), "State", null);
            } catch (SQLException ex) {
                Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(rootPane, "Error ###.#: Unable to retrieve Column of Data from Weather Database", "Database Connectivity Error", JOptionPane.ERROR_MESSAGE);
            }

            //Adding Region Names
            try{
                
                if (Country.getItemCount() != 0) {
                    Region.removeAllItems();

                    Iterator itr = WeatherRegion.iterator();
                    while (itr.hasNext())
                        Region.addItem(itr.next().toString());

//                    Region.setSelectedItem("Colorado");
                    
                    if (StringUtils.isNotEmpty(defaultRegion) && !(defaultRegion.equalsIgnoreCase("none")))
                        Region.setSelectedItem(defaultRegion);


                }
            }catch(NullPointerException ex){
                    JOptionPane.showMessageDialog(rootPane, "Error 900.3: Unable to retrieve Table from Weather Database", "Database Connectivity Error", JOptionPane.ERROR_MESSAGE);
            }
            
        }else{
            Region.removeAllItems();
            Region.setEnabled(false);
        }
    }
    

}
