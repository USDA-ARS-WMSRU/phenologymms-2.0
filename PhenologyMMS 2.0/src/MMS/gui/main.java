/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package MMS.gui;

import MMS.helperFunctions.CropsDB;
import MMS.helperFunctions.DeletingFileVisitor;
import MMS.helperFunctions.FileFunctions;
import MMS.helperFunctions.WeatherDB;
import MMS.helperFunctions.cropObject;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.UIManager;
import javax.swing.filechooser.FileFilter;


/**
 *
 * @author mike.herder
 */
public class main extends javax.swing.JFrame implements ActionListener{
    //Creating all objects that I will need to access through out the program
    private CropsDB cDB = new CropsDB();
    private WeatherDB wDB = new WeatherDB(); 
    private FileFunctions fp = new FileFunctions();
    
    //Creating Crop Variables that will be used though out the program
    private List <String> CropType = null;
    private List <String> CropVariety = new ArrayList();
    private List <cropObject> crops = new ArrayList();
    private List <String> ColumnHeaders = new ArrayList();
    private List <Boolean> SelectedRadioButtons = new ArrayList();
    private String CropSpecific_VT[] =  new String [6];
    private cropObject crop = new cropObject();
    
    //Creating Weather Variables that will be used through out this program
    private List <String> WeatherCountry = null;
    private List <String> WeatherRegion = null;
    private List <String> WeatherStations = null;
    private String defaultCountry = "";
    private String defaultRegion = "";
    
    //Additional needed Variables.
    private List <String> data = new ArrayList();
    
    public final String baseDirectory = fp.getBaseDirectory("PhenologyMMS 1.3");
    public static boolean loading = false;
    private DefaultListModel lm = new DefaultListModel();
    private DefaultListModel rt = new DefaultListModel();
    private DefaultListModel wl = new DefaultListModel();
    private DefaultListModel sl = new DefaultListModel();
    
    private boolean cropObjectLoaded = false;
    
    private boolean addGddMethods = false;
	private List <String> sysSettings;
    
    
    
    
    //Creates a new main Form
    public main() {
        loading = true;
        initComponents();
        try {
            CropAndLocationDropDowns();
        } catch (SQLException ex) {
            Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
        }
         
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        buttonGroup6 = new javax.swing.ButtonGroup();
        buttonGroup7 = new javax.swing.ButtonGroup();
        buttonGroup8 = new javax.swing.ButtonGroup();
        buttonGroup9 = new javax.swing.ButtonGroup();
        buttonGroup10 = new javax.swing.ButtonGroup();
        buttonGroup11 = new javax.swing.ButtonGroup();
        buttonGroup12 = new javax.swing.ButtonGroup();
        buttonGroup13 = new javax.swing.ButtonGroup();
        buttonGroup14 = new javax.swing.ButtonGroup();
        buttonGroup15 = new javax.swing.ButtonGroup();
        buttonGroup16 = new javax.swing.ButtonGroup();
        sort = new javax.swing.ButtonGroup();
        jScrollPane5 = new javax.swing.JScrollPane();
        tabs = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        FileName = new javax.swing.JTextField();
        addButton = new javax.swing.JButton();
        inputUpdate = new javax.swing.JButton();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel16 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cropType = new javax.swing.JComboBox<String>();
        jLabel2 = new javax.swing.JLabel();
        cropVariety = new javax.swing.JComboBox();
        jLabel24 = new javax.swing.JLabel();
        Country = new javax.swing.JComboBox();
        jLabel25 = new javax.swing.JLabel();
        WeatherFile = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        Region = new javax.swing.JComboBox();
        jLabel30 = new javax.swing.JLabel();
        sortAll = new javax.swing.JRadioButton();
        sort1 = new javax.swing.JRadioButton();
        sort2 = new javax.swing.JRadioButton();
        sort3 = new javax.swing.JRadioButton();
        sort4 = new javax.swing.JRadioButton();
        jLabel7 = new javax.swing.JLabel();
        Latitude = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        Depth = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        Rate = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        MaxCanopyHt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        SoilMoisture = new javax.swing.JComboBox();
        cropDate = new javax.swing.JFormattedTextField();
        additionalInfoButton = new javax.swing.JButton();
        message = new javax.swing.JLabel();
        jPanel17 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        gddNS0 = new javax.swing.JTextField();
        gddNSrb0 = new javax.swing.JRadioButton();
        gddS0 = new javax.swing.JTextField();
        gddSrb0 = new javax.swing.JRadioButton();
        gddS1 = new javax.swing.JTextField();
        gddSrb1 = new javax.swing.JRadioButton();
        gddS2 = new javax.swing.JTextField();
        gddSrb2 = new javax.swing.JRadioButton();
        gddNS3 = new javax.swing.JTextField();
        gddNSrb3 = new javax.swing.JRadioButton();
        gddNS1 = new javax.swing.JTextField();
        gddNSrb1 = new javax.swing.JRadioButton();
        gddNS2 = new javax.swing.JTextField();
        gddNSrb2 = new javax.swing.JRadioButton();
        gddS3 = new javax.swing.JTextField();
        gddSrb3 = new javax.swing.JRadioButton();
        gddNS4 = new javax.swing.JTextField();
        gddNSrb4 = new javax.swing.JRadioButton();
        gddS4 = new javax.swing.JTextField();
        gddSrb4 = new javax.swing.JRadioButton();
        gddNS5 = new javax.swing.JTextField();
        gddNSrb5 = new javax.swing.JRadioButton();
        gddS5 = new javax.swing.JTextField();
        gddSrb5 = new javax.swing.JRadioButton();
        gddNS6 = new javax.swing.JTextField();
        gddS6 = new javax.swing.JTextField();
        gddNSrb6 = new javax.swing.JRadioButton();
        gddNS7 = new javax.swing.JTextField();
        gddNSrb7 = new javax.swing.JRadioButton();
        gddS7 = new javax.swing.JTextField();
        gddNS8 = new javax.swing.JTextField();
        gddNSrb8 = new javax.swing.JRadioButton();
        gddS8 = new javax.swing.JTextField();
        gddSrb8 = new javax.swing.JRadioButton();
        gddSrb6 = new javax.swing.JRadioButton();
        gddSrb7 = new javax.swing.JRadioButton();
        gddNS9 = new javax.swing.JTextField();
        gddNSrb9 = new javax.swing.JRadioButton();
        gddS9 = new javax.swing.JTextField();
        gddSrb9 = new javax.swing.JRadioButton();
        gddSrb10 = new javax.swing.JRadioButton();
        gddS10 = new javax.swing.JTextField();
        gddNSrb10 = new javax.swing.JRadioButton();
        gddNS10 = new javax.swing.JTextField();
        gddNSrb15 = new javax.swing.JRadioButton();
        gddNS15 = new javax.swing.JTextField();
        gddNS14 = new javax.swing.JTextField();
        gddNSrb14 = new javax.swing.JRadioButton();
        gddSrb13 = new javax.swing.JRadioButton();
        gddS13 = new javax.swing.JTextField();
        gddNSrb13 = new javax.swing.JRadioButton();
        gddNS13 = new javax.swing.JTextField();
        gddS12 = new javax.swing.JTextField();
        gddSrb12 = new javax.swing.JRadioButton();
        gddSrb11 = new javax.swing.JRadioButton();
        gddS11 = new javax.swing.JTextField();
        gddS14 = new javax.swing.JTextField();
        gddSrb14 = new javax.swing.JRadioButton();
        gddS15 = new javax.swing.JTextField();
        gddSrb15 = new javax.swing.JRadioButton();
        gddNS11 = new javax.swing.JTextField();
        gddNSrb11 = new javax.swing.JRadioButton();
        gddNS12 = new javax.swing.JTextField();
        gddNSrb12 = new javax.swing.JRadioButton();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 32767));
        jPanel7 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        nolS0 = new javax.swing.JTextField();
        nolNSrb9 = new javax.swing.JRadioButton();
        nolSrb4 = new javax.swing.JRadioButton();
        nolNS7 = new javax.swing.JTextField();
        nolSrb3 = new javax.swing.JRadioButton();
        nolS8 = new javax.swing.JTextField();
        nolNS6 = new javax.swing.JTextField();
        nolNS2 = new javax.swing.JTextField();
        nolNS1 = new javax.swing.JTextField();
        nolNSrb2 = new javax.swing.JRadioButton();
        nolNS0 = new javax.swing.JTextField();
        nolSrb0 = new javax.swing.JRadioButton();
        nolNS3 = new javax.swing.JTextField();
        nolNS10 = new javax.swing.JTextField();
        nolSrb2 = new javax.swing.JRadioButton();
        nolNSrb3 = new javax.swing.JRadioButton();
        nolSrb7 = new javax.swing.JRadioButton();
        nolNSrb7 = new javax.swing.JRadioButton();
        nolNSrb1 = new javax.swing.JRadioButton();
        nolS5 = new javax.swing.JTextField();
        nolNSrb6 = new javax.swing.JRadioButton();
        nolSrb9 = new javax.swing.JRadioButton();
        nolNSrb0 = new javax.swing.JRadioButton();
        nolNS4 = new javax.swing.JTextField();
        nolS6 = new javax.swing.JTextField();
        nolNS9 = new javax.swing.JTextField();
        nolNS5 = new javax.swing.JTextField();
        nolS3 = new javax.swing.JTextField();
        nolSrb6 = new javax.swing.JRadioButton();
        nolNSrb8 = new javax.swing.JRadioButton();
        nolNSrb10 = new javax.swing.JRadioButton();
        nolSrb10 = new javax.swing.JRadioButton();
        nolSrb5 = new javax.swing.JRadioButton();
        nolS7 = new javax.swing.JTextField();
        nolSrb1 = new javax.swing.JRadioButton();
        nolS10 = new javax.swing.JTextField();
        nolS1 = new javax.swing.JTextField();
        nolNSrb4 = new javax.swing.JRadioButton();
        nolSrb8 = new javax.swing.JRadioButton();
        nolS2 = new javax.swing.JTextField();
        nolNSrb5 = new javax.swing.JRadioButton();
        nolS4 = new javax.swing.JTextField();
        nolS9 = new javax.swing.JTextField();
        nolNS8 = new javax.swing.JTextField();
        nolNS15 = new javax.swing.JTextField();
        nolNSrb15 = new javax.swing.JRadioButton();
        nolS15 = new javax.swing.JTextField();
        nolSrb15 = new javax.swing.JRadioButton();
        nolSrb14 = new javax.swing.JRadioButton();
        nolS14 = new javax.swing.JTextField();
        nolNSrb14 = new javax.swing.JRadioButton();
        nolNS14 = new javax.swing.JTextField();
        nolNS13 = new javax.swing.JTextField();
        nolNSrb13 = new javax.swing.JRadioButton();
        nolS13 = new javax.swing.JTextField();
        nolSrb13 = new javax.swing.JRadioButton();
        nolSrb12 = new javax.swing.JRadioButton();
        nolS12 = new javax.swing.JTextField();
        nolNSrb12 = new javax.swing.JRadioButton();
        nolNS12 = new javax.swing.JTextField();
        nolNS11 = new javax.swing.JTextField();
        nolNSrb11 = new javax.swing.JRadioButton();
        nolS11 = new javax.swing.JTextField();
        nolSrb11 = new javax.swing.JRadioButton();
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 32767));
        jScrollPane8 = new javax.swing.JScrollPane();
        jPanel14 = new javax.swing.JPanel();
        gsLabel0 = new javax.swing.JLabel();
        gsLabel1 = new javax.swing.JLabel();
        gsLabel2 = new javax.swing.JLabel();
        gsLabel3 = new javax.swing.JLabel();
        gsLabel4 = new javax.swing.JLabel();
        gsLabel5 = new javax.swing.JLabel();
        gsLabel6 = new javax.swing.JLabel();
        gsLabel7 = new javax.swing.JLabel();
        gsLabel8 = new javax.swing.JLabel();
        gsLabel9 = new javax.swing.JLabel();
        gsLabel10 = new javax.swing.JLabel();
        gsLabel11 = new javax.swing.JLabel();
        gsLabel12 = new javax.swing.JLabel();
        gsLabel13 = new javax.swing.JLabel();
        gsLabel14 = new javax.swing.JLabel();
        gsLabel15 = new javax.swing.JLabel();
        gsLabel16 = new javax.swing.JLabel();
        gsLabel17 = new javax.swing.JLabel();
        gsLabel18 = new javax.swing.JLabel();
        gsLabel19 = new javax.swing.JLabel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 32767));
        cropTypeInfo = new javax.swing.JLabel();
        cropVarietyInfo = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        RunBatch = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        BatchRuns = new javax.swing.JList();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        RunType = new javax.swing.JList();
        jScrollPane1 = new javax.swing.JScrollPane();
        savedList = new javax.swing.JList();
        jLabel42 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel23 = new javax.swing.JLabel();
        FixCropObject = new javax.swing.JButton();
        jTabbedPane3 = new javax.swing.JTabbedPane();
        jPanel13 = new javax.swing.JPanel();
        addPlantingConditions = new javax.swing.JButton();
        ClearButton1 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel31 = new javax.swing.JLabel();
        Country1 = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        Region1 = new javax.swing.JComboBox();
        jLabel33 = new javax.swing.JLabel();
        WeatherFile1 = new javax.swing.JComboBox();
        jLabel29 = new javax.swing.JLabel();
        Latitude1 = new javax.swing.JTextField();
        jPanel12 = new javax.swing.JPanel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        spSR = new javax.swing.JTextField();
        startSimPeriod = new javax.swing.JComboBox();
        endSimPeriod = new javax.swing.JComboBox();
        jLabel37 = new javax.swing.JLabel();
        startPlantingDate = new javax.swing.JFormattedTextField();
        endPlantingDate = new javax.swing.JFormattedTextField();
        pdSR = new javax.swing.JTextField();
        jLabel38 = new javax.swing.JLabel();
        endWeatherYear = new javax.swing.JFormattedTextField();
        startWeatherYear = new javax.swing.JFormattedTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        WeatherStationList = new javax.swing.JList();
        jLabel19 = new javax.swing.JLabel();
        SoilMoisture1 = new javax.swing.JComboBox();
        jLabel20 = new javax.swing.JLabel();
        SoilMoisture2 = new javax.swing.JComboBox();
        jLabel39 = new javax.swing.JLabel();
        smSR = new javax.swing.JTextField();
        jPanel11 = new javax.swing.JPanel();
        Rate2 = new javax.swing.JTextField();
        Rate1 = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        SRrate = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        Depth1 = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        Depth2 = new javax.swing.JTextField();
        SRdepth = new javax.swing.JTextField();
        MaxCanopyHt1 = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        MaxCanopyHt2 = new javax.swing.JTextField();
        SRmaxcanopyht = new javax.swing.JTextField();
        updatePI = new javax.swing.JButton();
        ClearButton2 = new javax.swing.JButton();
        jLabel27 = new javax.swing.JLabel();
        runStatus = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jPanel18 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        viewInput = new javax.swing.JButton();
        viewOutput = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        addWeatherButton = new javax.swing.JMenuItem();
        addCropDataButton = new javax.swing.JMenuItem();
        systemSettings = new javax.swing.JMenuItem();
        deleteLocations = new javax.swing.JMenuItem();
        deleteCropInfo = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(204, 204, 204));

        jScrollPane5.setPreferredSize(new java.awt.Dimension(1152, 900));

        tabs.setBackground(new java.awt.Color(204, 204, 204));
        tabs.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tabs.setPreferredSize(new java.awt.Dimension(1000, 900));
        tabs.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabsStateChanged(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(204, 205, 122));
        jPanel1.setPreferredSize(new java.awt.Dimension(1000, 805));

        jLabel14.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel14.setText("Name: ");
        jLabel14.setToolTipText("");

        FileName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        FileName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileNameActionPerformed(evt);
            }
        });

        addButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        addButton.setText("Add");
        addButton.setToolTipText("Add Scenario to Run List");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        inputUpdate.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        inputUpdate.setText("Update");
        inputUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputUpdateActionPerformed(evt);
            }
        });

        jTabbedPane2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTabbedPane2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane2StateChanged(evt);
            }
        });

        jPanel16.setBackground(new java.awt.Color(204, 205, 122));

        jPanel4.setBackground(new java.awt.Color(204, 204, 204));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Crop Type and Location", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 18))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Choose Crop:");

        cropType.setMaximumRowCount(10);
        cropType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cropTypeActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Select Weather State/Region:");

        cropVariety.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cropVarietyItemStateChanged(evt);
            }
        });

        jLabel24.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel24.setText("Select Weather File:");

        Country.setMaximumRowCount(19);
        Country.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CountryActionPerformed(evt);
            }
        });

        jLabel25.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel25.setText("Variety:");

        WeatherFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WeatherFileActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("Select a Country:");

        Region.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        Region.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegionActionPerformed(evt);
            }
        });

        jLabel30.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel30.setText("Crop Variety Sort (GDD)");

        sort.add(sortAll);
        sortAll.setSelected(true);
        sortAll.setText("All");

        sort.add(sort1);
        sort1.setText("1");

        sort.add(sort2);
        sort2.setText("2");

        sort.add(sort3);
        sort3.setText("3");

        sort.add(sort4);
        sort4.setText("4");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Latitude (degrees):");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel30)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addComponent(sort3)
                            .addGap(18, 18, 18)
                            .addComponent(sort4))
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addComponent(sortAll, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(sort1)
                            .addGap(18, 18, 18)
                            .addComponent(sort2))))
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cropType, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(72, 72, 72)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(Country, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel24)
                        .addGap(6, 6, 6)
                        .addComponent(WeatherFile, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(jLabel25)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cropVariety, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(Region, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(Latitude, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jPanel4Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel24, jLabel7});

        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jLabel30)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sortAll)
                            .addComponent(sort1)
                            .addComponent(sort2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sort3)
                            .addComponent(sort4)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel1)
                                .addComponent(cropType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel9)
                                .addComponent(Country, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel24)
                                .addComponent(WeatherFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel25)
                            .addComponent(cropVariety, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(Region, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)
                            .addComponent(Latitude, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        jPanel4Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel24, jLabel7});

        jPanel5.setBackground(new java.awt.Color(204, 204, 204));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Planting Information", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 18))); // NOI18N

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Soil Moisture:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Depth (cm):");

        Depth.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Rate (lbs/m^2):");

        Rate.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setText("Max. Canopy Ht. (cm):");

        MaxCanopyHt.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel3.setText("Date (mm/dd/yyyy):");

        SoilMoisture.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Optimum", "Medium", "Dry", "Planted in Dust" }));

        cropDate.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("M/d/yyyy"))));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel6)))
                .addGap(8, 8, 8)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cropDate, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                    .addComponent(Rate))
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(91, 91, 91)
                        .addComponent(jLabel8)
                        .addGap(10, 10, 10)
                        .addComponent(MaxCanopyHt, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(10, 10, 10)
                        .addComponent(SoilMoisture, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(92, 92, 92)
                .addComponent(jLabel5)
                .addGap(10, 10, 10)
                .addComponent(Depth, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(76, 76, 76))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cropDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(jLabel3)))
                        .addGap(31, 31, 31)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(Rate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(Depth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SoilMoisture, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(MaxCanopyHt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(16, 16, 16))
        );

        additionalInfoButton.setText("Additional Info");
        additionalInfoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                additionalInfoButtonActionPerformed(evt);
            }
        });

        message.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        message.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        message.setText("answer");

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(message, javax.swing.GroupLayout.DEFAULT_SIZE, 1103, Short.MAX_VALUE)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(additionalInfoButton)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel16Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jPanel4, jPanel5});

        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(additionalInfoButton)
                .addGap(157, 157, 157)
                .addComponent(message)
                .addGap(124, 124, 124))
        );

        jPanel16Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jPanel4, jPanel5});

        jTabbedPane2.addTab("Crop Type, Location, & Planting Information", jPanel16);

        jPanel17.setBackground(new java.awt.Color(204, 205, 122));

        jPanel8.setBackground(new java.awt.Color(204, 217, 127));
        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Growth Stages", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 18))); // NOI18N
        jPanel8.setVerifyInputWhenFocusTarget(false);

        jPanel6.setBackground(new java.awt.Color(204, 204, 204));
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Growing Degree-Days", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("No Stress");

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("Stress");

        gddNS0.setToolTipText("");
        gddNS0.setMaximumSize(new java.awt.Dimension(59, 20));

        buttonGroup1.add(gddNSrb0);
        gddNSrb0.setActionCommand("1");

        buttonGroup1.add(gddSrb0);
        gddSrb0.setActionCommand("2");

        buttonGroup2.add(gddSrb1);

        buttonGroup3.add(gddSrb2);
        gddSrb2.setActionCommand("2");

        buttonGroup4.add(gddNSrb3);

        buttonGroup2.add(gddNSrb1);

        buttonGroup3.add(gddNSrb2);

        buttonGroup4.add(gddSrb3);

        buttonGroup5.add(gddNSrb4);

        buttonGroup5.add(gddSrb4);

        buttonGroup6.add(gddNSrb5);

        buttonGroup6.add(gddSrb5);

        buttonGroup7.add(gddNSrb6);

        buttonGroup8.add(gddNSrb7);

        buttonGroup9.add(gddNSrb8);

        buttonGroup9.add(gddSrb8);

        buttonGroup7.add(gddSrb6);

        buttonGroup8.add(gddSrb7);

        buttonGroup10.add(gddNSrb9);

        buttonGroup10.add(gddSrb9);

        buttonGroup11.add(gddSrb10);

        buttonGroup11.add(gddNSrb10);

        buttonGroup16.add(gddNSrb15);

        buttonGroup15.add(gddNSrb14);

        buttonGroup14.add(gddSrb13);

        buttonGroup14.add(gddNSrb13);

        buttonGroup13.add(gddSrb12);

        buttonGroup12.add(gddSrb11);

        buttonGroup15.add(gddSrb14);

        buttonGroup16.add(gddSrb15);

        buttonGroup12.add(gddNSrb11);

        buttonGroup13.add(gddNSrb12);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(gddS15, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(gddSrb15)
                .addGap(21, 21, 21))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(gddNS13, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(gddNS15, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(gddNS14, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(gddNS7, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(gddNS6, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(gddNS5, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(gddNS8, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(gddNS1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(gddNS0, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(gddNS2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE)
                                    .addComponent(gddNS3, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(gddNS4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(gddNS11, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(gddNS10, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(gddNS9, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(gddNS12, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(gddNSrb0)
                            .addComponent(gddNSrb1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(gddNSrb2, javax.swing.GroupLayout.DEFAULT_SIZE, 21, Short.MAX_VALUE)
                            .addComponent(gddNSrb3, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(gddNSrb4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(gddNSrb5, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(gddNSrb6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(gddNSrb7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(gddNSrb8)
                            .addComponent(gddNSrb9)
                            .addComponent(gddNSrb10)
                            .addComponent(gddNSrb11)
                            .addComponent(gddNSrb12)
                            .addComponent(gddNSrb13)
                            .addComponent(gddNSrb14)
                            .addComponent(gddNSrb15))
                        .addGap(72, 72, 72)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(gddS5, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(gddSrb5))
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(gddS6, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(gddSrb6))
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(gddS7, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(gddSrb7))
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(gddS8, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(gddSrb8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(gddS9, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(gddSrb9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(gddS10, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(gddS11, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(gddS12, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(gddS13, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(6, 6, 6)
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(gddSrb11)
                                    .addComponent(gddSrb10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(gddSrb12)
                                    .addComponent(gddSrb13)))
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(gddS14, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(gddSrb14))
                            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel6Layout.createSequentialGroup()
                                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(gddS3)
                                            .addComponent(gddS2)
                                            .addComponent(gddS1)
                                            .addComponent(gddS0, javax.swing.GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE))
                                        .addGap(6, 6, 6)
                                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(gddSrb0)
                                            .addComponent(gddSrb1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(gddSrb2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(gddSrb3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(jPanel6Layout.createSequentialGroup()
                                        .addComponent(gddS4, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(6, 6, 6)
                                        .addComponent(gddSrb4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(21, 21, 21))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(175, 175, 175))))
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel6Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(filler2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        jPanel6Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {gddNS0, gddNS1, gddNS10, gddNS11, gddNS12, gddNS13, gddNS14, gddNS15, gddNS2, gddNS3, gddNS4, gddNS5, gddNS6, gddNS7, gddNS8, gddNS9, gddS0, gddS1, gddS10, gddS11, gddS12, gddS13, gddS14, gddS15, gddS2, gddS3, gddS4, gddS5, gddS6, gddS7, gddS8, gddS9});

        jPanel6Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {gddNSrb0, gddNSrb1, gddNSrb10, gddNSrb11, gddNSrb12, gddNSrb13, gddNSrb14, gddNSrb15, gddNSrb2, gddNSrb3, gddNSrb4, gddNSrb5, gddNSrb6, gddNSrb7, gddNSrb8, gddNSrb9, gddSrb0, gddSrb1, gddSrb10, gddSrb11, gddSrb12, gddSrb13, gddSrb14, gddSrb15, gddSrb2, gddSrb3, gddSrb4, gddSrb5, gddSrb6, gddSrb7, gddSrb8, gddSrb9});

        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jLabel12))
                .addGap(8, 8, 8)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(gddNS0, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gddNSrb0)
                    .addComponent(gddS0, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gddSrb0, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(gddNS1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gddNSrb1)
                    .addComponent(gddS1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gddSrb1))
                .addGap(8, 8, 8)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(gddNS2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gddNSrb2)
                    .addComponent(gddS2)
                    .addComponent(gddSrb2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(8, 8, 8)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(gddNS3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gddNSrb3)
                    .addComponent(gddS3, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gddSrb3))
                .addGap(8, 8, 8)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(gddNS4)
                    .addComponent(gddNSrb4)
                    .addComponent(gddS4, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gddSrb4))
                .addGap(8, 8, 8)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(gddNS5, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gddNSrb5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(gddS5, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gddSrb5))
                .addGap(8, 8, 8)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(gddNS6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gddNSrb6)
                    .addComponent(gddS6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gddSrb6))
                .addGap(8, 8, 8)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(gddNS7, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gddNSrb7)
                    .addComponent(gddS7, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gddSrb7))
                .addGap(8, 8, 8)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(gddNS8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gddNSrb8)
                    .addComponent(gddS8, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gddSrb8, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(gddNS9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gddNSrb9)
                    .addComponent(gddS9, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gddSrb9, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(gddNS10, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gddNSrb10)
                    .addComponent(gddS10, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gddSrb10, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(gddNS11, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gddNSrb11)
                    .addComponent(gddS11, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gddSrb11))
                .addGap(8, 8, 8)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(gddNS12, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gddNSrb12)
                    .addComponent(gddS12, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gddSrb12))
                .addGap(8, 8, 8)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(gddNS13, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gddNSrb13)
                    .addComponent(gddS13, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gddSrb13, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(gddNS14, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gddNSrb14)
                    .addComponent(gddS14, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gddSrb14, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(gddNS15, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gddNSrb15)
                    .addComponent(gddS15, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gddSrb15, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel6Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(filler2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        jPanel6Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {gddNS0, gddNS1, gddNS10, gddNS11, gddNS12, gddNS13, gddNS14, gddNS15, gddNS2, gddNS3, gddNS4, gddNS5, gddNS6, gddNS7, gddNS8, gddNS9, gddS0, gddS1, gddS10, gddS11, gddS12, gddS13, gddS14, gddS15, gddS2, gddS3, gddS4, gddS5, gddS6, gddS7, gddS8, gddS9});

        jPanel6Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {gddNSrb0, gddNSrb1, gddNSrb10, gddNSrb11, gddNSrb12, gddNSrb13, gddNSrb14, gddNSrb15, gddNSrb2, gddNSrb3, gddNSrb4, gddNSrb5, gddNSrb6, gddNSrb7, gddNSrb8, gddNSrb9, gddSrb0, gddSrb1, gddSrb10, gddSrb11, gddSrb12, gddSrb13, gddSrb14, gddSrb15, gddSrb2, gddSrb3, gddSrb4, gddSrb5, gddSrb6, gddSrb7, gddSrb8, gddSrb9});

        gddNS0.getAccessibleContext().setAccessibleName("tb1");
        gddS0.getAccessibleContext().setAccessibleName("tb2");
        gddSrb0.getAccessibleContext().setAccessibleName("rb2");
        gddS1.getAccessibleContext().setAccessibleName("tb6");

        jPanel7.setBackground(new java.awt.Color(204, 204, 204));
        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Number of Leaves", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("No Stress");

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setText("Stress");

        buttonGroup10.add(nolNSrb9);

        buttonGroup5.add(nolSrb4);

        buttonGroup4.add(nolSrb3);

        buttonGroup3.add(nolNSrb2);

        nolNS0.setToolTipText("");
        nolNS0.setMaximumSize(new java.awt.Dimension(59, 20));

        buttonGroup1.add(nolSrb0);
        nolSrb0.setActionCommand("2");

        buttonGroup3.add(nolSrb2);
        nolSrb2.setActionCommand("2");

        buttonGroup4.add(nolNSrb3);

        buttonGroup8.add(nolSrb7);

        buttonGroup8.add(nolNSrb7);

        buttonGroup2.add(nolNSrb1);

        buttonGroup7.add(nolNSrb6);

        buttonGroup10.add(nolSrb9);

        buttonGroup1.add(nolNSrb0);
        nolNSrb0.setActionCommand("1");

        buttonGroup7.add(nolSrb6);

        buttonGroup9.add(nolNSrb8);

        buttonGroup11.add(nolNSrb10);

        buttonGroup11.add(nolSrb10);

        buttonGroup6.add(nolSrb5);

        buttonGroup2.add(nolSrb1);

        buttonGroup5.add(nolNSrb4);

        buttonGroup9.add(nolSrb8);

        buttonGroup6.add(nolNSrb5);

        buttonGroup16.add(nolNSrb15);

        buttonGroup16.add(nolSrb15);

        buttonGroup15.add(nolSrb14);

        buttonGroup15.add(nolNSrb14);

        buttonGroup14.add(nolNSrb13);

        buttonGroup14.add(nolSrb13);

        buttonGroup13.add(nolSrb12);

        buttonGroup13.add(nolNSrb12);

        buttonGroup12.add(nolNSrb11);

        buttonGroup12.add(nolSrb11);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(nolNS15, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(nolNSrb15)
                        .addGap(72, 72, 72)
                        .addComponent(nolS15, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(nolSrb15, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(nolNS14, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(nolNSrb14)
                        .addGap(72, 72, 72)
                        .addComponent(nolS14, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(nolSrb14))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(nolNS13, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(nolNSrb13)
                        .addGap(72, 72, 72)
                        .addComponent(nolS13, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(nolSrb13, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(nolNS12, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(nolNSrb12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(72, 72, 72)
                        .addComponent(nolS12, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(nolSrb12))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(nolNS11, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(nolNSrb11)
                        .addGap(72, 72, 72)
                        .addComponent(nolS11, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(nolSrb11))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(nolNS10, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(nolNSrb10)
                        .addGap(72, 72, 72)
                        .addComponent(nolS10, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(nolSrb10, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(nolNS9, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(nolNSrb9)
                        .addGap(72, 72, 72)
                        .addComponent(nolS9, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(nolSrb9))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(nolNS8, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(nolNSrb8)
                        .addGap(72, 72, 72)
                        .addComponent(nolS8, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(nolSrb8, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(nolNS7, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(nolNSrb7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(72, 72, 72)
                        .addComponent(nolS7, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(nolSrb7))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(nolNS6, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(nolNSrb6)
                        .addGap(72, 72, 72)
                        .addComponent(nolS6, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(nolSrb6))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(nolNS5, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(nolNSrb5, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(72, 72, 72)
                        .addComponent(nolS5, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(nolSrb5))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(nolNS4, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(nolNSrb4)
                        .addGap(72, 72, 72)
                        .addComponent(nolS4, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(nolSrb4))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(nolNS3, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(nolNSrb3, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(72, 72, 72)
                        .addComponent(nolS3, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(nolSrb3, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(nolNS2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(nolNSrb2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGap(72, 72, 72)
                        .addComponent(nolS2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(nolSrb2, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(nolNS1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(nolNSrb1)
                        .addGap(72, 72, 72)
                        .addComponent(nolS1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(nolSrb1))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(nolNS0, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(nolNSrb0)))
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGap(72, 72, 72)
                                .addComponent(nolS0, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(nolSrb0))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                                .addGap(56, 56, 56)
                                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(21, 21, 21))
            .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel7Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(filler3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        jPanel7Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {nolNS0, nolNS1, nolNS10, nolNS11, nolNS12, nolNS13, nolNS14, nolNS15, nolNS2, nolNS3, nolNS4, nolNS5, nolNS6, nolNS7, nolNS8, nolNS9, nolS0, nolS1, nolS10, nolS11, nolS12, nolS13, nolS14, nolS15, nolS2, nolS3, nolS4, nolS5, nolS6, nolS7, nolS8, nolS9});

        jPanel7Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {nolNSrb0, nolNSrb1, nolNSrb10, nolNSrb11, nolNSrb12, nolNSrb13, nolNSrb14, nolNSrb15, nolNSrb2, nolNSrb3, nolNSrb4, nolNSrb5, nolNSrb6, nolNSrb7, nolNSrb8, nolNSrb9, nolSrb0, nolSrb1, nolSrb10, nolSrb11, nolSrb12, nolSrb13, nolSrb14, nolSrb15, nolSrb2, nolSrb3, nolSrb4, nolSrb5, nolSrb6, nolSrb7, nolSrb8, nolSrb9});

        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel13))
                .addGap(8, 8, 8)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(nolNS0, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nolNSrb0)
                    .addComponent(nolS0, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nolSrb0, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(nolNS1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nolNSrb1)
                    .addComponent(nolS1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nolSrb1))
                .addGap(8, 8, 8)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(nolNS2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nolNSrb2)
                    .addComponent(nolS2, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nolSrb2))
                .addGap(8, 8, 8)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(nolNS3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nolNSrb3)
                    .addComponent(nolS3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nolSrb3))
                .addGap(8, 8, 8)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(nolNS4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nolNSrb4)
                    .addComponent(nolS4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nolSrb4, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(nolNS5, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nolNSrb5, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nolS5, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nolSrb5))
                .addGap(8, 8, 8)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(nolNS6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nolNSrb6)
                    .addComponent(nolS6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nolSrb6))
                .addGap(8, 8, 8)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(nolNS7, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nolNSrb7)
                    .addComponent(nolS7, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nolSrb7))
                .addGap(8, 8, 8)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(nolNS8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nolNSrb8)
                    .addComponent(nolS8, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nolSrb8, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(nolNS9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nolNSrb9)
                    .addComponent(nolS9, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nolSrb9, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(nolNS10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nolNSrb10)
                    .addComponent(nolS10, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nolSrb10, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(nolNS11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nolNSrb11)
                    .addComponent(nolS11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nolSrb11))
                .addGap(8, 8, 8)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(nolNS12, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nolNSrb12)
                    .addComponent(nolS12, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nolSrb12))
                .addGap(8, 8, 8)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(nolNS13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nolNSrb13)
                    .addComponent(nolS13, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nolSrb13, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(nolNS14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nolNSrb14)
                    .addComponent(nolS14, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nolSrb14, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(nolNS15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nolNSrb15)
                    .addComponent(nolS15, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nolSrb15, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel7Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(filler3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        jPanel7Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {nolNS0, nolNS1, nolNS10, nolNS11, nolNS12, nolNS13, nolNS14, nolNS15, nolNS2, nolNS3, nolNS4, nolNS5, nolNS6, nolNS7, nolNS8, nolNS9, nolS0, nolS1, nolS10, nolS11, nolS12, nolS13, nolS14, nolS15, nolS2, nolS3, nolS4, nolS5, nolS6, nolS7, nolS8, nolS9});

        jPanel7Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {nolNSrb0, nolNSrb1, nolNSrb10, nolNSrb11, nolNSrb12, nolNSrb13, nolNSrb14, nolNSrb15, nolNSrb2, nolNSrb3, nolNSrb4, nolNSrb5, nolNSrb6, nolNSrb7, nolNSrb8, nolNSrb9, nolSrb0, nolSrb1, nolSrb10, nolSrb11, nolSrb12, nolSrb13, nolSrb14, nolSrb15, nolSrb2, nolSrb3, nolSrb4, nolSrb5, nolSrb6, nolSrb7, nolSrb8, nolSrb9});

        jPanel14.setBackground(new java.awt.Color(204, 217, 127));

        gsLabel0.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        gsLabel0.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        gsLabel0.setLabelFor(gddNS0);
        gsLabel0.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        gsLabel0.setMaximumSize(new java.awt.Dimension(130, 23));
        gsLabel0.setMinimumSize(new java.awt.Dimension(130, 23));
        gsLabel0.setPreferredSize(new java.awt.Dimension(130, 23));

        gsLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        gsLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        gsLabel1.setLabelFor(gddNS1);
        gsLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        gsLabel1.setMaximumSize(new java.awt.Dimension(137, 23));
        gsLabel1.setMinimumSize(new java.awt.Dimension(137, 23));
        gsLabel1.setPreferredSize(new java.awt.Dimension(137, 23));

        gsLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        gsLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        gsLabel2.setLabelFor(gddNS2);
        gsLabel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        gsLabel2.setMaximumSize(new java.awt.Dimension(137, 23));
        gsLabel2.setMinimumSize(new java.awt.Dimension(137, 23));
        gsLabel2.setPreferredSize(new java.awt.Dimension(137, 23));

        gsLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        gsLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        gsLabel3.setLabelFor(gddNS3);
        gsLabel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        gsLabel3.setMaximumSize(new java.awt.Dimension(137, 23));
        gsLabel3.setMinimumSize(new java.awt.Dimension(137, 23));
        gsLabel3.setPreferredSize(new java.awt.Dimension(137, 23));

        gsLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        gsLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        gsLabel4.setLabelFor(nolNS4);
        gsLabel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        gsLabel4.setMaximumSize(new java.awt.Dimension(137, 23));
        gsLabel4.setMinimumSize(new java.awt.Dimension(137, 23));
        gsLabel4.setPreferredSize(new java.awt.Dimension(137, 23));

        gsLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        gsLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        gsLabel5.setLabelFor(gddNS5);
        gsLabel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        gsLabel5.setMaximumSize(new java.awt.Dimension(137, 23));
        gsLabel5.setMinimumSize(new java.awt.Dimension(137, 23));
        gsLabel5.setPreferredSize(new java.awt.Dimension(137, 23));

        gsLabel6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        gsLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        gsLabel6.setLabelFor(gddNS6);
        gsLabel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        gsLabel6.setMaximumSize(new java.awt.Dimension(137, 23));
        gsLabel6.setMinimumSize(new java.awt.Dimension(137, 23));
        gsLabel6.setPreferredSize(new java.awt.Dimension(137, 23));

        gsLabel7.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        gsLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        gsLabel7.setLabelFor(gddNS7);
        gsLabel7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        gsLabel7.setMaximumSize(new java.awt.Dimension(137, 23));
        gsLabel7.setMinimumSize(new java.awt.Dimension(137, 23));
        gsLabel7.setPreferredSize(new java.awt.Dimension(137, 23));

        gsLabel8.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        gsLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        gsLabel8.setLabelFor(gddNS8);
        gsLabel8.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        gsLabel8.setMaximumSize(new java.awt.Dimension(137, 23));
        gsLabel8.setMinimumSize(new java.awt.Dimension(137, 23));
        gsLabel8.setPreferredSize(new java.awt.Dimension(137, 23));

        gsLabel9.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        gsLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        gsLabel9.setLabelFor(gddNS9);
        gsLabel9.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        gsLabel9.setMaximumSize(new java.awt.Dimension(137, 23));
        gsLabel9.setMinimumSize(new java.awt.Dimension(137, 23));
        gsLabel9.setPreferredSize(new java.awt.Dimension(137, 23));

        gsLabel10.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        gsLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        gsLabel10.setLabelFor(gddNS10);
        gsLabel10.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        gsLabel10.setMaximumSize(new java.awt.Dimension(137, 23));
        gsLabel10.setMinimumSize(new java.awt.Dimension(137, 23));
        gsLabel10.setPreferredSize(new java.awt.Dimension(137, 23));

        gsLabel11.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        gsLabel11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        gsLabel11.setLabelFor(gddNS11);
        gsLabel11.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        gsLabel11.setMaximumSize(new java.awt.Dimension(137, 23));
        gsLabel11.setMinimumSize(new java.awt.Dimension(137, 23));
        gsLabel11.setPreferredSize(new java.awt.Dimension(137, 23));

        gsLabel12.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        gsLabel12.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        gsLabel12.setLabelFor(gddNS12);
        gsLabel12.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        gsLabel12.setMaximumSize(new java.awt.Dimension(137, 23));
        gsLabel12.setMinimumSize(new java.awt.Dimension(137, 23));
        gsLabel12.setPreferredSize(new java.awt.Dimension(137, 23));

        gsLabel13.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        gsLabel13.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        gsLabel13.setLabelFor(gddNS13);
        gsLabel13.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        gsLabel13.setMaximumSize(new java.awt.Dimension(137, 23));
        gsLabel13.setMinimumSize(new java.awt.Dimension(137, 23));
        gsLabel13.setPreferredSize(new java.awt.Dimension(137, 23));
        gsLabel13.setRequestFocusEnabled(false);

        gsLabel14.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        gsLabel14.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        gsLabel14.setLabelFor(gddNS14);
        gsLabel14.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        gsLabel14.setMaximumSize(new java.awt.Dimension(137, 23));
        gsLabel14.setMinimumSize(new java.awt.Dimension(137, 23));
        gsLabel14.setPreferredSize(new java.awt.Dimension(137, 23));
        gsLabel14.setRequestFocusEnabled(false);

        gsLabel15.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        gsLabel15.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        gsLabel15.setLabelFor(gddNS15);
        gsLabel15.setText("16");
        gsLabel15.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        gsLabel15.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        gsLabel15.setMaximumSize(new java.awt.Dimension(137, 23));
        gsLabel15.setMinimumSize(new java.awt.Dimension(137, 23));
        gsLabel15.setPreferredSize(new java.awt.Dimension(137, 23));

        gsLabel16.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        gsLabel16.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        gsLabel16.setText("17");
        gsLabel16.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        gsLabel16.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        gsLabel16.setMaximumSize(new java.awt.Dimension(137, 23));
        gsLabel16.setMinimumSize(new java.awt.Dimension(137, 23));
        gsLabel16.setPreferredSize(new java.awt.Dimension(137, 23));

        gsLabel17.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        gsLabel17.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        gsLabel17.setText("18");
        gsLabel17.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        gsLabel17.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        gsLabel17.setMaximumSize(new java.awt.Dimension(137, 23));
        gsLabel17.setMinimumSize(new java.awt.Dimension(137, 23));
        gsLabel17.setPreferredSize(new java.awt.Dimension(137, 23));

        gsLabel18.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        gsLabel18.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        gsLabel18.setText("19");
        gsLabel18.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        gsLabel18.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        gsLabel18.setMaximumSize(new java.awt.Dimension(137, 23));
        gsLabel18.setMinimumSize(new java.awt.Dimension(137, 23));
        gsLabel18.setPreferredSize(new java.awt.Dimension(137, 23));

        gsLabel19.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        gsLabel19.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        gsLabel19.setText("20");
        gsLabel19.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        gsLabel19.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        gsLabel19.setMaximumSize(new java.awt.Dimension(137, 23));
        gsLabel19.setMinimumSize(new java.awt.Dimension(137, 23));
        gsLabel19.setPreferredSize(new java.awt.Dimension(137, 23));

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel14Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(gsLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gsLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(gsLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(gsLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(gsLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(gsLabel0, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                        .addComponent(gsLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                        .addComponent(gsLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(gsLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                        .addComponent(gsLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(gsLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                        .addComponent(gsLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(gsLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(gsLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(gsLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(gsLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(gsLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(gsLabel12, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(gsLabel13, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(gsLabel14, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel14Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        jPanel14Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {gsLabel0, gsLabel1, gsLabel10, gsLabel11, gsLabel12, gsLabel13, gsLabel14, gsLabel15, gsLabel16, gsLabel17, gsLabel18, gsLabel19, gsLabel2, gsLabel3, gsLabel4, gsLabel5, gsLabel6, gsLabel7, gsLabel8, gsLabel9});

        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel14Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(gsLabel0, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(gsLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(gsLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(gsLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(gsLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(gsLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(gsLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(gsLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(gsLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(gsLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(gsLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(gsLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(gsLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(gsLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(gsLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(gsLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(gsLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(gsLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(gsLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(gsLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel14Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        jPanel14Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {gsLabel0, gsLabel1, gsLabel10, gsLabel11, gsLabel12, gsLabel13, gsLabel14, gsLabel15, gsLabel16, gsLabel17, gsLabel18, gsLabel19, gsLabel2, gsLabel3, gsLabel4, gsLabel5, gsLabel6, gsLabel7, gsLabel8, gsLabel9});

        jScrollPane8.setViewportView(jPanel14);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        cropTypeInfo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cropTypeInfo.setText("Crop Type: ");

        cropVarietyInfo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cropVarietyInfo.setText("Crop Variety: ");

        javax.swing.GroupLayout jPanel17Layout = new javax.swing.GroupLayout(jPanel17);
        jPanel17.setLayout(jPanel17Layout);
        jPanel17Layout.setHorizontalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addGap(290, 290, 290)
                .addComponent(cropTypeInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cropVarietyInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 434, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(142, Short.MAX_VALUE))
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel17Layout.setVerticalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel17Layout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cropTypeInfo)
                    .addComponent(cropVarietyInfo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, 692, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel17Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cropTypeInfo, cropVarietyInfo});

        jTabbedPane2.addTab("Growth Stages", jPanel17);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(FileName, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)
                        .addComponent(addButton)
                        .addGap(18, 18, 18)
                        .addComponent(inputUpdate)
                        .addGap(150, 150, 150)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 781, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel14)
                        .addComponent(FileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(addButton))
                    .addComponent(inputUpdate))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {FileName, addButton, inputUpdate, jLabel14});

        tabs.addTab("Input", jPanel1);

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));

        RunBatch.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        RunBatch.setText("Run");
        RunBatch.setToolTipText("Runs All Scenarios");
        RunBatch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RunBatchActionPerformed(evt);
            }
        });

        deleteButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        deleteButton.setText("Delete");
        deleteButton.setToolTipText("Deletes Selected Scenarios");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        saveButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        saveButton.setText("Save");
        saveButton.setToolTipText("Saves Highlighted Scenarios");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        jPanel10.setBackground(new java.awt.Color(204, 204, 204));
        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Batch Runs", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 14))); // NOI18N

        BatchRuns.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        BatchRuns.setAutoscrolls(false);
        BatchRuns.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        BatchRuns.setMaximumSize(new java.awt.Dimension(258, 309));
        BatchRuns.setMinimumSize(new java.awt.Dimension(258, 309));
        BatchRuns.setPreferredSize(new java.awt.Dimension(258, 309));
        BatchRuns.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BatchRunsMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(BatchRuns);

        jLabel40.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel40.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel40.setText("Name of Run / File");

        jLabel41.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel41.setText("Run Type");

        RunType.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        RunType.setEnabled(false);
        jScrollPane4.setViewportView(RunType);

        savedList.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jScrollPane1.setViewportView(savedList);

        jLabel42.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel42.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel42.setText("Saved");

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel40, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel41, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(22, 22, 22)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jLabel42, javax.swing.GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel40)
                    .addComponent(jLabel41)
                    .addComponent(jLabel42))
                .addGap(9, 9, 9)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 297, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 297, Short.MAX_VALUE)
                    .addComponent(jScrollPane4))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel23.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(255, 0, 0));
        jLabel23.setText("Simulation Options:");

        FixCropObject.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        FixCropObject.setText("Fix");
        FixCropObject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FixCropObjectActionPerformed(evt);
            }
        });

        jTabbedPane3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        addPlantingConditions.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        addPlantingConditions.setText("Add");
        addPlantingConditions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPlantingConditionsActionPerformed(evt);
            }
        });

        ClearButton1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ClearButton1.setText("Clear");
        ClearButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearButton1ActionPerformed(evt);
            }
        });

        jCheckBox1.setBackground(new java.awt.Color(204, 204, 204));
        jCheckBox1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jCheckBox1.setText("Simulate Period with Soil Moisture");

        jLabel31.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel31.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel31.setText("Select a Country:");

        Country1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Country1ActionPerformed(evt);
            }
        });

        jLabel32.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel32.setText("Select Weather State/Region:");

        Region1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        Region1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Region1ActionPerformed(evt);
            }
        });

        jLabel33.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel33.setText("Select Weather File:");

        WeatherFile1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WeatherFile1ActionPerformed(evt);
            }
        });

        jLabel29.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel29.setText("Latitude (degrees):");

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Weather File - Simulation Period & Plating Date", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 14))); // NOI18N

        jLabel34.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel34.setText("Simulation Period (yyyy):");
        jLabel34.setToolTipText("(mm/dd/yyyy)");
        jLabel34.setMaximumSize(new java.awt.Dimension(130, 20));
        jLabel34.setMinimumSize(new java.awt.Dimension(130, 20));
        jLabel34.setPreferredSize(new java.awt.Dimension(130, 20));

        jLabel35.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel35.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel35.setText("to");
        jLabel35.setMaximumSize(new java.awt.Dimension(13, 20));
        jLabel35.setMinimumSize(new java.awt.Dimension(13, 20));
        jLabel35.setPreferredSize(new java.awt.Dimension(13, 20));

        jLabel36.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel36.setText("Step Rate:");

        startSimPeriod.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "yyyy" }));

        endSimPeriod.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "yyyy" }));

        jLabel37.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel37.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel37.setText("Planting Date (MM/dd):");

        startPlantingDate.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("M/d"))));
        startPlantingDate.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        endPlantingDate.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("M/d"))));
        endPlantingDate.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel38.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel38.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel38.setText("to");
        jLabel38.setMaximumSize(new java.awt.Dimension(13, 20));
        jLabel38.setMinimumSize(new java.awt.Dimension(13, 20));
        jLabel38.setPreferredSize(new java.awt.Dimension(13, 20));

        endWeatherYear.setEditable(false);

        startWeatherYear.setEditable(false);

        jLabel16.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel16.setText("to");
        jLabel16.setMaximumSize(new java.awt.Dimension(13, 20));
        jLabel16.setMinimumSize(new java.awt.Dimension(13, 20));
        jLabel16.setPreferredSize(new java.awt.Dimension(13, 20));

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel15.setText("Available Weather Years:");
        jLabel15.setToolTipText("(mm/dd/yyyy)");
        jLabel15.setMaximumSize(new java.awt.Dimension(130, 20));
        jLabel15.setMinimumSize(new java.awt.Dimension(130, 20));
        jLabel15.setPreferredSize(new java.awt.Dimension(130, 20));

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel12Layout.createSequentialGroup()
                            .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel34, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
                                .addComponent(jLabel37, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(startSimPeriod, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(startPlantingDate, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel38, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel12Layout.createSequentialGroup()
                                    .addComponent(endSimPeriod, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(spSR, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel12Layout.createSequentialGroup()
                                    .addComponent(endPlantingDate, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(pdSR, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                            .addGap(248, 248, 248)
                            .addComponent(jLabel36)))
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(startWeatherYear, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(endWeatherYear, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel12Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {endPlantingDate, endSimPeriod, startPlantingDate, startSimPeriod});

        jPanel12Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {endWeatherYear, startWeatherYear});

        jPanel12Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel34, jLabel37});

        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(startWeatherYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(endWeatherYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel36)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startSimPeriod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(endSimPeriod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spSR, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(startPlantingDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(endPlantingDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(pdSR, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel37, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel38, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jPanel12Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel15, jLabel16});

        jPanel12Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {endWeatherYear, startWeatherYear});

        jPanel12Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {endPlantingDate, pdSR, startPlantingDate});

        jPanel12Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {endSimPeriod, spSR, startSimPeriod});

        jPanel12Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel34, jLabel37});

        WeatherStationList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                WeatherStationListMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(WeatherStationList);

        jLabel19.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel19.setText("Soil Moisture:");
        jLabel19.setMaximumSize(new java.awt.Dimension(80, 20));
        jLabel19.setMinimumSize(new java.awt.Dimension(80, 20));
        jLabel19.setPreferredSize(new java.awt.Dimension(80, 20));

        SoilMoisture1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Optimum", "Medium", "Dry", "Planted in Dust" }));
        SoilMoisture1.setMaximumSize(new java.awt.Dimension(80, 32767));
        SoilMoisture1.setMinimumSize(new java.awt.Dimension(80, 20));
        SoilMoisture1.setPreferredSize(new java.awt.Dimension(80, 20));

        jLabel20.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel20.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel20.setText("to");
        jLabel20.setMaximumSize(new java.awt.Dimension(13, 20));
        jLabel20.setMinimumSize(new java.awt.Dimension(13, 20));
        jLabel20.setPreferredSize(new java.awt.Dimension(13, 20));

        SoilMoisture2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Optimum", "Medium", "Dry", "Planted in Dust" }));
        SoilMoisture2.setMaximumSize(new java.awt.Dimension(80, 32767));
        SoilMoisture2.setMinimumSize(new java.awt.Dimension(80, 20));
        SoilMoisture2.setPreferredSize(new java.awt.Dimension(80, 20));

        jLabel39.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel39.setText("Step Rate:");

        smSR.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel13Layout.createSequentialGroup()
                            .addComponent(jLabel29)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(Latitude1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel13Layout.createSequentialGroup()
                            .addComponent(jLabel33)
                            .addGap(10, 10, 10)
                            .addComponent(WeatherFile1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel13Layout.createSequentialGroup()
                            .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(Region1, 0, 105, Short.MAX_VALUE)
                                .addComponent(Country1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jScrollPane3))
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jPanel12, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel13Layout.createSequentialGroup()
                                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(addPlantingConditions)
                                    .addGroup(jPanel13Layout.createSequentialGroup()
                                        .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(6, 6, 6)
                                        .addComponent(SoilMoisture1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(10, 10, 10)
                                        .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(10, 10, 10)
                                        .addComponent(SoilMoisture2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel13Layout.createSequentialGroup()
                                        .addComponent(jLabel39)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(smSR, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE))
                                    .addComponent(ClearButton1, javax.swing.GroupLayout.Alignment.TRAILING))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        jPanel13Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {Region1, WeatherFile1});

        jPanel13Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {SoilMoisture1, SoilMoisture2});

        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox1)
                .addGap(4, 4, 4)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SoilMoisture2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SoilMoisture1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(smSR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel39))
                        .addGap(39, 39, 39)
                        .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addPlantingConditions)
                            .addComponent(ClearButton1)))
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel31)
                            .addComponent(Country1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel32)
                            .addComponent(Region1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(WeatherFile1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel33, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel29)
                            .addComponent(Latitude1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel13Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {Country1, Region1, WeatherFile1, jLabel31, jLabel32, jLabel33});

        jPanel13Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {SoilMoisture1, SoilMoisture2, smSR});

        jTabbedPane3.addTab("Planting Conditions", jPanel13);

        jPanel11.setMaximumSize(new java.awt.Dimension(651, 301));
        jPanel11.setMinimumSize(new java.awt.Dimension(651, 301));

        Rate2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        Rate1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel17.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel17.setText("Rate (lbs/m^2):");
        jLabel17.setMaximumSize(new java.awt.Dimension(98, 20));
        jLabel17.setMinimumSize(new java.awt.Dimension(98, 20));
        jLabel17.setPreferredSize(new java.awt.Dimension(98, 20));

        SRrate.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel18.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel18.setText("to");
        jLabel18.setMaximumSize(new java.awt.Dimension(13, 20));
        jLabel18.setMinimumSize(new java.awt.Dimension(13, 20));
        jLabel18.setPreferredSize(new java.awt.Dimension(13, 20));

        jLabel26.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel26.setText("Step Rate");

        jLabel21.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel21.setText("Depth (cm):");

        Depth1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel22.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel22.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel22.setText("to");
        jLabel22.setMaximumSize(new java.awt.Dimension(13, 20));
        jLabel22.setMinimumSize(new java.awt.Dimension(13, 20));
        jLabel22.setPreferredSize(new java.awt.Dimension(13, 20));

        Depth2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        SRdepth.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        MaxCanopyHt1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel28.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel28.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel28.setText("to");
        jLabel28.setMaximumSize(new java.awt.Dimension(13, 20));
        jLabel28.setMinimumSize(new java.awt.Dimension(13, 20));
        jLabel28.setPreferredSize(new java.awt.Dimension(13, 20));

        MaxCanopyHt2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        SRmaxcanopyht.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        updatePI.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        updatePI.setText("Update");
        updatePI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatePIActionPerformed(evt);
            }
        });

        ClearButton2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ClearButton2.setText("Clear");
        ClearButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearButton2ActionPerformed(evt);
            }
        });

        jLabel27.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel27.setText("Max. Canopy Ht. (cm):");

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(updatePI)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Rate1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel21, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(MaxCanopyHt1)
                            .addComponent(Depth1, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))))
                .addGap(10, 10, 10)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Depth2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)
                        .addComponent(SRdepth, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(Rate2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel26, javax.swing.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE)
                            .addComponent(SRrate)))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ClearButton2)
                            .addGroup(jPanel11Layout.createSequentialGroup()
                                .addComponent(MaxCanopyHt2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(25, 25, 25)
                                .addComponent(SRmaxcanopyht)))))
                .addContainerGap(336, Short.MAX_VALUE))
        );

        jPanel11Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {ClearButton2, updatePI});

        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jLabel26)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Rate1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Rate2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SRrate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(1, 1, 1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Depth1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Depth2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SRdepth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21))
                .addGap(8, 8, 8)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MaxCanopyHt1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MaxCanopyHt2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SRmaxcanopyht, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel27))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 108, Short.MAX_VALUE)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updatePI)
                    .addComponent(ClearButton2))
                .addGap(20, 20, 20))
        );

        jPanel11Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {ClearButton2, updatePI});

        jTabbedPane3.addTab("Plant Information", jPanel11);

        runStatus.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        runStatus.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel23)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 804, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTabbedPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 844, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                            .addComponent(FixCropObject)
                            .addGap(10, 10, 10)
                            .addComponent(RunBatch)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(saveButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(runStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(deleteButton))
                        .addComponent(jPanel10, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(234, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {FixCropObject, RunBatch, saveButton});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(runStatus, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(RunBatch)
                        .addComponent(saveButton)
                        .addComponent(FixCropObject)
                        .addComponent(deleteButton)))
                .addGap(30, 30, 30)
                .addComponent(jLabel23)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jTabbedPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(243, 243, 243))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {FixCropObject, RunBatch, deleteButton, runStatus, saveButton});

        jTabbedPane3.getAccessibleContext().setAccessibleName("PlantInformation");

        tabs.addTab("Run Mode", jPanel2);

        jPanel3.setBackground(new java.awt.Color(204, 204, 204));

        jPanel9.setBackground(new java.awt.Color(204, 204, 204));
        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Output View", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 14))); // NOI18N

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane6.setViewportView(jTextArea2);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 936, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jPanel18.setBackground(new java.awt.Color(204, 204, 204));
        jPanel18.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Input View (Batch Runs) or ResultsView (Single Run)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 14))); // NOI18N

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane7.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel18Layout = new javax.swing.GroupLayout(jPanel18);
        jPanel18.setLayout(jPanel18Layout);
        jPanel18Layout.setHorizontalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 936, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel18Layout.setVerticalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        viewInput.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        viewInput.setText("View");
        viewInput.setToolTipText("Select 1 Scenario");
        viewInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewInputActionPerformed(evt);
            }
        });

        viewOutput.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        viewOutput.setText("View");
        viewOutput.setToolTipText("Select 1 Scenario");
        viewOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewOutputActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(0, 902, Short.MAX_VALUE)
                        .addComponent(viewInput))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(viewOutput)))
                .addGap(167, 167, 167))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(viewInput)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(viewOutput)
                .addGap(71, 71, 71))
        );

        tabs.addTab("View", jPanel3);

        jScrollPane5.setViewportView(tabs);
        tabs.getAccessibleContext().setAccessibleName("tabs");
        tabs.getAccessibleContext().setAccessibleDescription("");

        getContentPane().add(jScrollPane5, java.awt.BorderLayout.CENTER);

        jMenu1.setText("File");

        jMenuItem5.setText("Open Scenario");
        jMenuItem5.setActionCommand("OpenScenario");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuItem6.setText("Save Scenario");
        jMenuItem6.setActionCommand("SaveScenario");
        jMenuItem6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuItem6MouseClicked(evt);
            }
        });
        jMenu1.add(jMenuItem6);

        jMenuItem7.setText("Exit");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem7);

        jMenuBar1.add(jMenu1);

        jMenu3.setText("Tools");

        addWeatherButton.setText("Add Weather File");
        addWeatherButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addWeatherButtonActionPerformed(evt);
            }
        });
        jMenu3.add(addWeatherButton);

        addCropDataButton.setText("Add Crop or Variety");
        addCropDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCropDataButtonActionPerformed(evt);
            }
        });
        jMenu3.add(addCropDataButton);

        systemSettings.setText("System Settings");
        systemSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                systemSettingsActionPerformed(evt);
            }
        });
        jMenu3.add(systemSettings);

        deleteLocations.setText("Delete Locations");
        deleteLocations.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteLocationsActionPerformed(evt);
            }
        });
        jMenu3.add(deleteLocations);

        deleteCropInfo.setText("Delete Crop Info");
        deleteCropInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteCropInfoActionPerformed(evt);
            }
        });
        jMenu3.add(deleteCropInfo);

        jMenuBar1.add(jMenu3);

        jMenu4.setText("Help");

        jMenuItem1.setText("Help");
        jMenuItem1.setBorder(null);
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem1);

        jMenuItem2.setText("About");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem2);

        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /***************************************************************************
    * Crop Functionality Information - Below this Point
    ****************************************************************************/    

    private void cropTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cropTypeActionPerformed
        
        inputUpdate.setEnabled(false);
        
        if (!loading){
            message.setText("Please Verify Information, and your Choices in the \"Growth Stages\" tab");
            
            if (!ColumnHeaders.isEmpty())
                ColumnHeaders.clear();

            if (cropType.getItemCount() != 0){
                addButton.setEnabled(true);
                loading = true;
                //Populating New Planting information
                PopulateNewPlantingInformation();

                //Get the the Variety Column names, so we can search on it base on that table.
                String column = CropType.get(1).substring(0, CropType.get(1).length()-1);

                //Determinign the GDD Sort Number, so the Variety Drop Down can be of a specific type
                int sortNumber = 0;
                if (sortAll.isSelected())
                    sortNumber = 0;
                if (sort1.isSelected())
                    sortNumber = 1;
                if (sort2.isSelected())
                    sortNumber = 2;
                if (sort3.isSelected())
                    sortNumber = 3;
                if (sort4.isSelected())
                    sortNumber = 4;
                
                // Populating Crop Variety
                PopulateCropVarietyDropDown(column, sortNumber);
                
                //Populating Growth Stages Default value
                PopulateGrowthStageHeaders(column);

                loading = false;
            }
        }
    }//GEN-LAST:event_cropTypeActionPerformed

     private void cropVarietyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cropVarietyItemStateChanged
         
        if (!loading){
            
            message.setText("Please Verify Information, and your Choices in the \"Growth Stages\" tab");
            
            if (evt.getStateChange() == ItemEvent.SELECTED){
                addButton.setEnabled(true);
                inputUpdate.setEnabled(false);                          //Disabling the Update Buttong on the Inputs Tab

                if (cropType.getItemCount() != 0){
                    //Get the the Variety Column names
                    String column = CropType.get(1).substring(0, CropType.get(1).length()-1);

                    PopulateGrowthStageHeaders(column);
                }
            }
        }
    }//GEN-LAST:event_cropVarietyItemStateChanged

     
     
    /************************************************************************************
    * Weather Information -  Below This Point
    *************************************************************************************/

    private void CountryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CountryActionPerformed
        List<String> info = null ;
        if (!loading){
            inputUpdate.setEnabled(false);

            if (Country.getItemCount() != 0){
                loading = true;

                /*
                * Populating Region DropDown button For the selected Country
                * If there are no Regions, then the WeatherFile sections will be
                * populated if there are any weatherFiles.
                */
                PoplulatingRegionDropDown(0, null);
                
                if (Region.isEnabled())
                    PopulateWeatherFileDropDown(true, 0, null);
                else
                    PopulateWeatherFileDropDown(false, 0, null);
                
                // Retrieviing WeatherFile information such as: Latitude, location
                try {
                    SettingWeatherFileSettings(0);
                } catch (SQLException ex) {
                    Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
                }
                loading = false;
                
                if (Country.getSelectedItem() != null)
                    crop.setCountry(Country.getSelectedItem().toString());
                if (Region.getSelectedItem() != null)
                    crop.setRegion(Region.getSelectedItem().toString());
                if (WeatherFile.getSelectedItem() != null)
                    crop.setWeatherFileName(WeatherFile.getSelectedItem().toString());
            }
        }
    }//GEN-LAST:event_CountryActionPerformed


   /*
    * This code is here to retrieve information to launch get the weatherfile data to choose from.
    */

    private void RegionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegionActionPerformed
        if(!loading){
            loading = true;
            if (Region.getItemCount() != 0){
                    
                // Retrieviing Region and populating the WeatherFile DropDown Button
                PopulateWeatherFileDropDown(true, 0, null);
                
                // Retrieviing WeatherFile information such as: Latitude, location
                try {
                    SettingWeatherFileSettings(0);
                } catch (SQLException ex) {
                    Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                if (WeatherFile.getSelectedItem() != null)
                  crop.setWeatherFileName(WeatherFile.getSelectedItem().toString());
            }
            loading = false;
        }
    }//GEN-LAST:event_RegionActionPerformed

    
    private void WeatherFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WeatherFileActionPerformed
        if (!loading){
            
            //Find Weatherfile to Populate Latitude Degrees
            if (Country.getSelectedIndex() >= 0 && Region.getSelectedIndex() >= 0 && WeatherFile.getSelectedIndex() >= 0){

                //Setting Weather File Settings - Latitude, Location, etc.
                try {
                    SettingWeatherFileSettings(0) ;
                } catch (SQLException ex) {
                    Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_WeatherFileActionPerformed


        

    
    /**************************************************************************************
    * Buttons are below this point
    ***************************************************************************************/    
    
    private void additionalInfoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_additionalInfoButtonActionPerformed
        AdditionalInfo frame = new AdditionalInfo();
 //       frame.name.setText(cropType.getSelectedItem().toString());
        frame.bTemp.setText(crop.getBaseTemp());
        frame.lTemp.setText(crop.getLowerOptimumTemp());
        frame.uTemp.setText(crop.getUpperOptimumTemp());
        frame.mTemp.setText(crop.getMaxTemp());
        frame.gddPL.setText(crop.getGDD_PER_LEAF());
       
        frame.gddMethod.setText(crop.getGddMethod());
        frame.P1D.setText(crop.getPhotoPeriod1());
        frame.P1DT.setText(crop.getPhotoPeriod2());
        
       frame.vDays.setText(crop.getVernalTypes().get(0));
       frame.vBTemp.setText(crop.getVernalTypes().get(1));
       frame.vLOTemp.setText(crop.getVernalTypes().get(2));
       frame.vUOTemp.setText(crop.getVernalTypes().get(3));
       frame.vUTemp.setText(crop.getVernalTypes().get(4));
       frame.vDTemp.setText(crop.getVernalTypes().get(5));
       
       
     
       frame.setVisible(true);
    }//GEN-LAST:event_additionalInfoButtonActionPerformed

    private void addWeatherButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addWeatherButtonActionPerformed
        addWeather weather = new addWeather(baseDirectory);
        
        weather.setVisible(true);
       
    }//GEN-LAST:event_addWeatherButtonActionPerformed

    private void addCropDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCropDataButtonActionPerformed
        addCrop cropFrame = new addCrop(baseDirectory);
        
        cropFrame.setVisible(true);
        
    }//GEN-LAST:event_addCropDataButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        Boolean Error = false;
        boolean FolderExists = false;
        Error = false;
        if (crop.getFileName().equalsIgnoreCase("") || crop.getCropLoaded()){
            //Error Handling for Name
            if (FileName.getText().length() == 0){
                JOptionPane.showMessageDialog(rootPane, "Error 400.1: Please Provide a File Name", "File Name Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            //Checking to make sure the name isn't already used.
            Path path = Paths.get(baseDirectory + "/Interface/results/" + FileName.getText().trim());
            FolderExists = Files.exists(path);

            for (int i = 0; i < crops.size(); i++){
                if (FileName.getText().trim().equalsIgnoreCase(crops.get(i).getFileName()))
                    Error = true;
            }
            if ((Error || FolderExists) && !crop.getCropLoaded()){
                    JOptionPane.showMessageDialog(rootPane, "Error400.2: Please Choose a unique File Name", "File Name Error", JOptionPane.ERROR_MESSAGE);
                    return;
            }

            //Checking to see if Planting Information is the Same
            if (!crop.getDate().equals(cropDate.getText()))
                crop.setDate(cropDate.getText());
            if (!crop.getSoilMoisture().equals(SoilMoisture.getSelectedItem().toString()))
                crop.setSoilMoisture(SoilMoisture.getSelectedItem().toString());
            if (!crop.getDepth().equals(Depth.getText()))
                crop.setSoilMoisture(Depth.getText());
            if (!crop.getRate().equals(Rate.getText()))
                crop.setRate(Rate.getText());
            if (!crop.getMaxCanopyHt().equals(MaxCanopyHt.getText()))
                crop.setMaxCanopyHt(MaxCanopyHt.getText());
            if (crop.getGrowthStagesHeaders().size() != ColumnHeaders.size())
                crop.setGrowthStagesHeaders(ColumnHeaders);

            //Checking to make sure Location information is Added
            if (!crop.getLatitude().equals(Latitude.getText()))
                crop.setLatitude(Latitude.getText());
            if (!crop.getCountry().equals(Country.getSelectedItem().toString()))
                crop.setCountry(Country.getSelectedItem().toString());
            if (!crop.getRegion().equals(Region.getSelectedItem().toString()))
                crop.setRegion(Region.getSelectedItem().toString());
            if (!crop.getWeatherFileName().equalsIgnoreCase(WeatherFile.getSelectedItem().toString())){
                crop.setWeatherFileName(WeatherFile.getSelectedItem().toString());
                if (WeatherStations.get(1).contains("\\"))
                    crop.setNameOfWeatherFile(WeatherStations.get(1).substring(WeatherStations.get(1).lastIndexOf("\\")+1, WeatherStations.get(1).length()));
                else
                    crop.setNameOfWeatherFile(WeatherStations.get(1));
            }
            if (crop.getWeatherFileName().equalsIgnoreCase("") || crop.getWeatherFileName() == null || crop.getWeatherFileName().equalsIgnoreCase("none"))
                Error = true;

            //Creating the Crop Object
            if ((!Error && !FolderExists) || crop.getCropLoaded()){
                if (BatchRuns.getModel().getSize() < 15){
                    findSelectedRadioButtons();

                    crop.setFileName(FileName.getText());
                    crop.setGrowthStagesSelection(SelectedRadioButtons);

                    //Finishing Touches for crop and screen
                    lm.addElement(FileName.getText());      //Adding crop to list box on "Run" tab

                    if (crop.getSoilMoistureRange().size() > 0 || crop.getRateRange().size() > 0 || crop.getDepthRange().size() > 0 ||
                            crop.getWeatherFileRanges().size() > 0 || crop.getMaxCanopyHtRange().size() > 0){
                        rt.addElement("B");
                    }else{
                        rt.addElement("S");
                    }

                    sl.addElement("N");
                    crop.setCropLoaded(false);
                    crops.add(crop);                                //Adding Crop to List of Crops to hold


                    try {
                        data = cDB.readOneRowFromDB(baseDirectory, CropType.get(1),crop.getTableName().substring(0, crop.getTableName().length()-1), cropVariety.getSelectedItem().toString());

                    } catch (IOException ex) {
                        Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (SQLException ex) {
                        Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    crop = new cropObject(CropType, data);


                    FileName.setText(null);                 //Resetting  filename box to being empty
    //                inputUpdate.setEnabled(true);           //Enabling the input type
                }else{
                    JOptionPane.showMessageDialog(rootPane, "Error ###.#: You are only allowed to add 15 runs", "Input Error", JOptionPane.ERROR_MESSAGE);
                }
            }else{
                JOptionPane.showMessageDialog(rootPane, "Error ###.#: Make sure all fields have a value.", "Input Error", JOptionPane.ERROR_MESSAGE);
            }
        }
//            cropObject crop = new cropObject(FileName.getText().trim(), cropType.getSelectedItem().toString(), cropVariety.getSelectedItem().toString(),
//                    Country.getSelectedItem().toString(), Region.getSelectedItem().toString(), WeatherFile.getSelectedItem().toString(),
//                    cDate, SoilMoisture.getSelectedItem().toString(), Depth.getText().trim(), Rate.getText().trim(), Latitude.getText().trim(),
//                    MaxCanopyHt.getText().trim(), ColumnHeaders, data, SelectedRadioButtons,CropType.get(7), CropType.get(8), CropType.get(9),CropType.get(10),
//                    CropType.get(11), CropType.get(CropType.size()-4), CropSpecific_VT, CropType.get(CropType.size()-3), CropType.get(CropType.size()-2), CropType.get(CropType.size()-1));

        
// TODO add your handling code here:
    }//GEN-LAST:event_addButtonActionPerformed

    private void inputUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputUpdateActionPerformed
         
        //Find CurrentCrop in the CropsList
        for (int i = 0; i < crops.size(); i++){
            if (crop.getFileName().equalsIgnoreCase(crops.get(i).getFileName())){
                //Set Location Again
                crops.get(i).setCountry(Country.getSelectedItem().toString());
                crops.get(i).setRegion(Region.getSelectedItem().toString());
                crops.get(i).setWeatherFileName(WeatherFile.getSelectedItem().toString());
                
                //Set Planting Information
                crops.get(i).setDate(cropDate.getText());
                crops.get(i).setSoilMoisture(SoilMoisture.getSelectedItem().toString());
                crops.get(i).setDepth(Depth.getText().trim());
                crops.get(i).setRate(Rate.getText().trim());
                crops.get(i).setLatitude(Latitude.getText().trim());
                crops.get(i).setMaxCanopyHt(MaxCanopyHt.getText().trim());
                
                //Set Growth Stage Information.
                findSelectedRadioButtons();                
                crops.get(i).setGrowthStagesSelection(SelectedRadioButtons);
                
                //Checking to see if the GDD Method has changed.

                crops.get(i).setGddMethod(CropType.get(11));
                break;
            }
        }
    }//GEN-LAST:event_inputUpdateActionPerformed

    private void loadCropObject(cropObject crop){
        AdditionalInfo frame = new AdditionalInfo();
        
        inputUpdate.setEnabled(true);

        //Loading Crop & Location data back into Input Tab
        cropType.setSelectedItem(crop.getCropType());
        cropVariety.setSelectedItem(crop.getCropVariety());
        Country.setSelectedItem(crop.getCountry());
        Region.setSelectedItem(crop.getRegion());
        WeatherFile.setSelectedItem(crop.getWeatherFileName());

        //Loading Plant Information table back into Input Tab

        cropDate.setText(crop.getDate());
        SoilMoisture.setSelectedItem(crop.getSoilMoisture());
        Depth.setText(crop.getDepth());
        Rate.setText(crop.getRate());
        Latitude.setText(crop.getLatitude());
        MaxCanopyHt.setText(crop.getMaxCanopyHt());

        //Populating Answers in the Growth Stages
        PopulatingGrowthStages(crop.getGrowthStagesHeaders(), crop.getGrowthStagesData(), crop.getGrowthStageSelection());
        tabs.setSelectedIndex(0);
        inputUpdate.setEnabled(true);

        //Updating List the current CropType


        frame.bTemp.setText(crop.getBaseTemp());
        frame.lTemp.setText(crop.getLowerOptimumTemp());
        frame.uTemp.setText(crop.getUpperOptimumTemp());
        frame.mTemp.setText(crop.getMaxTemp());
        frame.gddPL.setText(crop.getGDD_PER_LEAF());

        frame.gddMethod.setText(crop.getGddMethod());
        frame.P1D.setText(crop.getPhotoPeriod1());
        frame.P1DT.setText(crop.getPhotoPeriod2());

        frame.vDays.setText(crop.getVernalTypes().get(0));
        frame.vBTemp.setText(crop.getVernalTypes().get(1));
        frame.vLOTemp.setText(crop.getVernalTypes().get(2));
        frame.vUOTemp.setText(crop.getVernalTypes().get(3));
        frame.vUTemp.setText(crop.getVernalTypes().get(4));
        frame.vDTemp.setText(crop.getVernalTypes().get(5));
        
        //Loading CropType
        try {
            CropType = cDB.readOneRowFromDB(baseDirectory, "_CropTypes","CropType", (String)cropType.getSelectedItem());
        } catch (IOException | SQLException ex) {
            Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(rootPane, "Error 100.1: Unable to Read Row from Crops Database", "Database Connectivity Error", JOptionPane.ERROR_MESSAGE);
        }
        
        //Loading CropVariety
        try {
            CropVariety = cDB.readOneColumnFromDB(baseDirectory, CropType.get(1), CropType.get(1).substring(0, CropType.get(1).length()-1), 0);
        } catch (SQLException ex) {
            Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(rootPane, "Error 101.2: Unable to retrieve Column of Data from crops database", "Database Connectivity Error", JOptionPane.ERROR_MESSAGE);
        }
        //Getting Crop Variety Data
         if (!data.isEmpty())
            data.clear();

        try {
            data = cDB.readOneRowFromDB(baseDirectory, CropType.get(1), CropType.get(1).substring(0, CropType.get(1).length()-1), cropVariety.getSelectedItem().toString());
            
        } catch (IOException | SQLException ex) {
            Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(rootPane, "Error 100.2: Unable to Read Row from Crops Database", "Database Connectivity Error", JOptionPane.ERROR_MESSAGE);
        }
        //Loading Weather Country
        try {
            WeatherCountry = wDB.getTable(baseDirectory, "__Countries", Country.getSelectedItem().toString());
        }catch (IOException ex) {
            Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(rootPane, "Error 200.1: Unable to retrieve Table from Weather Database", "Database Connectivity Error", JOptionPane.ERROR_MESSAGE);
        }

        //Loading Weather Region
        /*
         * Getting list of states / regions. based on jComboBox3 and will populate
         * the regions into jComboBox4
         * This will populate "Select Weather Area:" Drop Down menu
         */

        if (WeatherCountry.get(2).equalsIgnoreCase("true")){
            //Read Weather database for country Information
            try {
                WeatherRegion = wDB.readOneColumnFromDB(baseDirectory, WeatherCountry.get(1), "State", null);
            } catch (SQLException ex) {
                Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(rootPane, "Error 201.2: Unable to retrieve Column of Data from Weather Database", "Database Connectivity Error", JOptionPane.ERROR_MESSAGE);
            }
        
        }
        //Loading WeatherFiles  =>  Look up Selection for appropriate table
        try{        
            WeatherRegion = wDB.getTable(baseDirectory,WeatherCountry.get(1), Region.getSelectedItem().toString());
        } catch (IOException ex) {
            Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(rootPane, "Error 200.2: Unable to retrieve Table from Weather Database", "Database Connectivity Error", JOptionPane.ERROR_MESSAGE);
        }
        try {
           WeatherStations = wDB.readOneColumnFromDB(baseDirectory, WeatherRegion.get(1), "WeatherStation", null);
        } catch (SQLException ex) {
            Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(rootPane, "Error 201.4: Unable to retrieve Column of Data from Weather Database", "Database Connectivity Error", JOptionPane.ERROR_MESSAGE);
        }
        
        //Adding values
        crop.setTableName(CropType.get(1));
        crop.setPhotoPeriod1(data.get(64));
        crop.setPhotoPeriod2(data.get(65));
        if (data.get(67) != null)
            crop.setPhyllochron(data.get(67));
        
        crop.setCropLoaded(true);
        FileName.setText(crop.getFileName());
        addButton.setEnabled(true);
        
        PopulatingGrowthStages(crop.getGrowthStagesHeaders(), crop.getGrowthStagesData(), crop.getGrowthStageSelection());
        
    }

    /*
    *   This method loads the Created Crop Object, back into the input screen so that it can be modified.
    */
    private void FixCropObjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FixCropObjectActionPerformed
        List obj = BatchRuns.getSelectedValuesList();
        AdditionalInfo frame = new AdditionalInfo();
        
        if (obj.isEmpty()){
            JOptionPane.showMessageDialog(rootPane, "Error 500.1: Please Select a crop to load", "Selection Error", JOptionPane.ERROR_MESSAGE);
        }else if (obj.size() > 1){
            JOptionPane.showMessageDialog(rootPane, "Error 500.2: Please Select only 1 crop to load", "Selection Error", JOptionPane.ERROR_MESSAGE);
        }else{
            Iterator itr = crops.iterator();

            for (cropObject cropObj : crops){
                if (cropObj.getFileName().equalsIgnoreCase(obj.get(0).toString())){
                    
                    inputUpdate.setEnabled(true);
                    
                    //Loading Crop & Location data back into Input Tab
                    cropType.setSelectedItem(cropObj.getCropType());
                    cropVariety.setSelectedItem(cropObj.getCropVariety());
                    Country.setSelectedItem(cropObj.getCountry());
                    Region.setSelectedItem(cropObj.getRegion());
                    WeatherFile.setSelectedItem(cropObj.getWeatherFileName());
                    
                    //Loading Plant Information table back into Input Tab

                    cropDate.setText(cropObj.getDate());
                    SoilMoisture.setSelectedItem(cropObj.getSoilMoisture());
                    Depth.setText(cropObj.getDepth());
                    Rate.setText(cropObj.getRate());
                    Latitude.setText(cropObj.getLatitude());
                    MaxCanopyHt.setText(cropObj.getMaxCanopyHt());
                    
                    //Populating Answers in the Growth Stages
                    PopulatingGrowthStages(cropObj.getGrowthStagesHeaders(), cropObj.getGrowthStagesData(), cropObj.getGrowthStageSelection());
                    tabs.setSelectedIndex(0);
                    inputUpdate.setEnabled(true);

                    //Updating List the current CropType
                    
                    
                    frame.bTemp.setText(cropObj.getBaseTemp());
                    frame.lTemp.setText(cropObj.getLowerOptimumTemp());
                    frame.uTemp.setText(cropObj.getUpperOptimumTemp());
                    frame.mTemp.setText(cropObj.getMaxTemp());
                    frame.gddPL.setText(cropObj.getGDD_PER_LEAF());

                    frame.gddMethod.setText(cropObj.getGddMethod());
                    frame.P1D.setText(cropObj.getPhotoPeriod1());
                    frame.P1DT.setText(cropObj.getPhotoPeriod2());

                    frame.vDays.setText(cropObj.getVernalTypes().get(0));
                    frame.vBTemp.setText(cropObj.getVernalTypes().get(1));
                    frame.vLOTemp.setText(cropObj.getVernalTypes().get(2));
                    frame.vUOTemp.setText(cropObj.getVernalTypes().get(3));
                    frame.vUTemp.setText(cropObj.getVernalTypes().get(4));
                    frame.vDTemp.setText(cropObj.getVernalTypes().get(5));
                    
//                    CropType.removeAll(CropType);
//                    CropType.add(crop.getFileName());
//                    CropType.add(crop.getCropType());
//                    CropType.add(crop.getCropType());
//                    CropType.add(setDate.toString());
//                    CropType.add(crop.getSoilMoisture());
//                    CropType.add(crop.getDepth());
//                    CropType.add(crop.getRate());
//                    CropType.add(crop.getMaxCanopyHt());
//                    CropType.add(crop.getBaseTemp());
//                    CropType.add(crop.getLowerOptimumTemp());
//                    CropType.add(crop.getUpperOptimumTemp());
//                    CropType.add(crop.getMaxTemp());
//                    CropType.add(crop.getGddMethod());
//                    CropType.add(crop.getGDD_PER_LEAF());
//                    CropType.add(crop.getPhotoPeriod1());
//                    CropType.add(crop.getPhotoPeriod2());
//                    CropType.add(crop.getCanopyHt());
                    crop = cropObj;
                    break;
                }
            }
        }
        addButton.setEnabled(false);
    }//GEN-LAST:event_FixCropObjectActionPerformed

    

    private void FileNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FileNameActionPerformed
        addButtonActionPerformed(null);
    }//GEN-LAST:event_FileNameActionPerformed

    private void RunBatchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RunBatchActionPerformed
        boolean Finished = false;
        runStatus.setText("");

        //Checking to see if there is atleast 1 Crop selected to run
        if (BatchRuns.getSelectedValuesList().size() > 0){
            for (int x = 0; x < BatchRuns.getModel().getSize(); x++ ){
                if (BatchRuns.isSelectedIndex(x)){
                  for (cropObject Crop : crops){
                        if (Crop.getFileName().equalsIgnoreCase(BatchRuns.getModel().getElementAt(x).toString())){
                            try {
                                Finished = fp.writeTINPUTS_DAT(Crop, baseDirectory, rt.get(x).toString(), true);
                            } catch (UnsupportedEncodingException ex) {
                                Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
                                JOptionPane.showMessageDialog(rootPane, "Error 600: Writing Output File failed", "Writing Output File Error", JOptionPane.ERROR_MESSAGE);
                            } catch (FileNotFoundException ex) {
                                Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }
                }
            }
            if (Finished){
                runStatus.setForeground(Color.BLUE);
                runStatus.setText("Finished");
            }else{
                runStatus.setForeground(Color.RED);
                runStatus.setText("Failed");
            }
        }else{
            JOptionPane.showMessageDialog(rootPane, "Error 500.3: Please Select at least 1 crop to Run", "Selection Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_RunBatchActionPerformed

    private void tabsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabsStateChanged
        if (tabs.getSelectedIndex() == 1){
            try {
                PopulatingLocationSettingsRunTab(false);
            } catch (SQLException ex) {
                Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_tabsStateChanged

    private void ClearButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearButton1ActionPerformed
        try {
            PopulatingLocationSettingsRunTab(true);
        } catch (SQLException ex) {
            Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
        }

        startSimPeriod.setSelectedItem("yyyy");
        endSimPeriod.setSelectedItem("yyyy");
        spSR.setText("");
        startPlantingDate.setText("");
        endPlantingDate.setText("");
        pdSR.setText("");
        SoilMoisture1.setSelectedItem("Optimum");
        SoilMoisture2.setSelectedItem("Optimum");
        smSR.setText("");
        jCheckBox1.setSelected(false);
        Color color = new Color(240,240,240);
        jPanel12.setBackground(color);
        
    }//GEN-LAST:event_ClearButton1ActionPerformed

    private void Country1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Country1ActionPerformed
         List<String> info = null ;
        if (!loading){
            inputUpdate.setEnabled(false);

            if (Country.getItemCount() != 0){
                loading = true;

                /*
                * Populating Region DropDown button For the selected Country
                * If there are no Regions, then the WeatherFile sections will be
                * populated if there are any weatherFiles.
                */
                PoplulatingRegionDropDown(1, null);
                
                if (Region.isEnabled())
                    PopulateWeatherFileDropDown(true, 1, null);
                else
                    PopulateWeatherFileDropDown(false, 1, null);
                
                // Retrieviing WeatherFile information such as: Latitude, location
                try {
                    SettingWeatherFileSettings(1);
                } catch (SQLException ex) {
                    Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
                }
                loading = false;
            }
        }
    }//GEN-LAST:event_Country1ActionPerformed

    private void Region1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Region1ActionPerformed
         if(!loading){
            loading = true;
            if (Region1.getItemCount() != 0){
                    
                // Retrieviing Region and populating the WeatherFile DropDown Button
                PopulateWeatherFileDropDown(true, 1, null);
                
                // Retrieviing WeatherFile information such as: Latitude, location
                try {
                    SettingWeatherFileSettings(1);
                } catch (SQLException ex) {
                    Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                if (WeatherFile.getSelectedItem() != null)
                  crop.setWeatherFileName(WeatherFile.getSelectedItem().toString());
            }
            loading = false;
        }
    }//GEN-LAST:event_Region1ActionPerformed

    private void WeatherFile1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WeatherFile1ActionPerformed
        if (!loading){
            
            //Find Weatherfile to Populate Latitude Degrees
            if (Country1.getSelectedIndex() >= 0 && Region1.getSelectedIndex() >= 0 && WeatherFile1.getSelectedIndex() >= 0){

                //Setting Weather File Settings - Latitude, Location, etc.
                try {
                    SettingWeatherFileSettings(1) ;
                } catch (SQLException ex) {
                    Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_WeatherFile1ActionPerformed

    private void updatePIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatePIActionPerformed
        List <String> rateRange = new ArrayList();
        List <String> depthRange = new ArrayList();
        List <String> MaxCanopyHtRange = new ArrayList();
        List obj = BatchRuns.getSelectedValuesList();
        int count = 0;
        
        //Checking to maake sure the ranges are in proper order
        if (Rate1.getText().replaceAll("\\s+","").length() > 0 && Rate2.getText().replaceAll("\\s+","").length() > 0 && SRrate.getText().replaceAll("\\s+","").length() > 0){
            int startRate = Integer.parseInt(Rate1.getText().replaceAll("\\s+",""));
            int endRate = Integer.parseInt(Rate2.getText().replaceAll("\\s+",""));
            
            if (endRate < startRate)
               JOptionPane.showMessageDialog(rootPane, "Error ###.#: Starting Rate must be less than ending Rate", "Plant Information Error", JOptionPane.ERROR_MESSAGE); 
            if (Integer.parseInt(SRrate.getText().replaceAll("\\s+","")) <= 0)
               JOptionPane.showMessageDialog(rootPane, "Error ###.#: The Rate Step Rate must be greater than Zero", "Plant Information Error", JOptionPane.ERROR_MESSAGE); 
        }
        if (Depth1.getText().replaceAll("\\s+","").length() > 0 && Depth2.getText().replaceAll("\\s+","").length() > 0 && SRdepth.getText().replaceAll("\\s+","").length() > 0){
            int startRate = Integer.parseInt(Depth1.getText().replaceAll("\\s+",""));
            int endRate = Integer.parseInt(Depth2.getText().replaceAll("\\s+",""));
            
            if (endRate < startRate)
               JOptionPane.showMessageDialog(rootPane, "Error ###.#: Starting Depth must be less than ending Depth", "Plant Information Error", JOptionPane.ERROR_MESSAGE); 
            if (Integer.parseInt(SRdepth.getText().replaceAll("\\s+","")) <= 0)
               JOptionPane.showMessageDialog(rootPane, "Error ###.#: the Depth Step Rate must be greater than Zero", "Plant Information Error", JOptionPane.ERROR_MESSAGE); 
        }
        if (MaxCanopyHt1.getText().replaceAll("\\s+","").length() > 0 && MaxCanopyHt2.getText().replaceAll("\\s+","").length() > 0 && SRmaxcanopyht.getText().replaceAll("\\s+","").length() > 0){
            int startRate = Integer.parseInt(MaxCanopyHt1.getText().replaceAll("\\s+",""));
            int endRate = Integer.parseInt(MaxCanopyHt2.getText().replaceAll("\\s+",""));
            
            if (endRate < startRate)
               JOptionPane.showMessageDialog(rootPane, "Error ###.#: Starting Max Canopy Ht must be less than ending Max Canopy Ht", "Plant Information Error", JOptionPane.ERROR_MESSAGE); 
            if (Integer.parseInt(SRmaxcanopyht.getText().replaceAll("\\s+","")) <= 0)
               JOptionPane.showMessageDialog(rootPane, "Error ###.#: The Max Canopy Ht Step Rate must be greater than Zero", "Plant Information Error", JOptionPane.ERROR_MESSAGE); 
        }
        
        
        //Adding values for Rate Ranges, if they are valid
        count = 0;
        if (Rate1.getText().replaceAll("\\s+","").length() > 0){
            count++;
            if (Rate2.getText().replaceAll("\\s+","").length() > 0){
                count++;
                if (SRrate.getText().replaceAll("\\s+","").length() > 0){
                    count++;
                    rateRange.add(Rate1.getText().replaceAll("\\s+",""));
                    rateRange.add(Rate2.getText().replaceAll("\\s+",""));
                    rateRange.add(SRrate.getText().replaceAll("\\s+",""));
                 }
            }
        }
        
        if (count > 0 && count < 2){
            JOptionPane.showMessageDialog(rootPane, "Error ###.#: Please provide a From, To, and Step for Rate Range", "Rate Range Error", JOptionPane.ERROR_MESSAGE);  
        }
        
        
        //Adding values for Depth Ranges, if they are valid
        count = 0;
        if (Depth1.getText().replaceAll("\\s+","").length() > 0){
            count++;
            if (Depth2.getText().replaceAll("\\s+","").length() > 0){
                count++;
                if (SRdepth.getText().replaceAll("\\s+","").length() > 0){
                    count++;
                    depthRange.add(Depth1.getText().replaceAll("\\s+",""));
                    depthRange.add(Depth2.getText().replaceAll("\\s+",""));
                    depthRange.add(SRdepth.getText().replaceAll("\\s+",""));
                    
                }
            }
        }
        
        if (count > 0 && count < 2){
            JOptionPane.showMessageDialog(rootPane, "Error ###.#: Please provide a From, To, and Step for Depth Range", "Depth Range Error", JOptionPane.ERROR_MESSAGE);  
        }
        
        //Adding values for Maximum Canopy Height Ranges, if they are valid
        count = 0;
        if (MaxCanopyHt1.getText().replaceAll("\\s+","").length() > 0){
            count++;
            if (MaxCanopyHt2.getText().replaceAll("\\s+","").length() > 0){
                count++;
                if (SRmaxcanopyht.getText().replaceAll("\\s+","").length() > 0){
                    count++;
                    MaxCanopyHtRange.add(MaxCanopyHt1.getText().replaceAll("\\s+",""));
                    MaxCanopyHtRange.add(MaxCanopyHt2.getText().replaceAll("\\s+",""));
                    MaxCanopyHtRange.add(SRmaxcanopyht.getText().replaceAll("\\s+",""));
                }
            }
        }
                
        if (count > 0 && count < 2){
            JOptionPane.showMessageDialog(rootPane, "Error ###.#: Please provide a From, To, and Step for MaxCanopyHt Range", "MaxCanopyHt Range Error", JOptionPane.ERROR_MESSAGE);  
        }
                
 
        if (obj.isEmpty())
            JOptionPane.showMessageDialog(rootPane, "Error 500.3: Please Select a crop to load", "Selection Error", JOptionPane.ERROR_MESSAGE);
        else{
            //Going through all the selected Runs
            for (int x = 0; x < BatchRuns.getModel().getSize(); x++ ){
                if (BatchRuns.isSelectedIndex(x)){
                    rt.set(x, "B");
                    for (cropObject Crop : crops){
                        if (Crop.getFileName().equalsIgnoreCase(BatchRuns.getModel().getElementAt(x).toString())){
                            if (rateRange.size() == 3)
                                Crop.setRateRange(rateRange);
                            if (depthRange.size() == 3)
                                Crop.setDepthRange(depthRange);
                            if (MaxCanopyHtRange.size() == 3)
                                Crop.setMaxCanopyHtRange(MaxCanopyHtRange);
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_updatePIActionPerformed

    private void ClearButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearButton2ActionPerformed

        Rate1.setText(null);
        Rate2.setText(null);
        Depth1.setText(null);
        Depth2.setText(null);
        MaxCanopyHt1.setText(null);
        MaxCanopyHt2.setText(null);
        SRrate.setText(null);
        SRdepth.setText(null);
        SRmaxcanopyht.setText(null);
    }//GEN-LAST:event_ClearButton2ActionPerformed

    private void BatchRunsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BatchRunsMouseClicked
        //Highlighting the Run Type
        RunType.setSelectedIndices(BatchRuns.getSelectedIndices());
        
        startSimPeriod.setSelectedItem("yyyy");
        endSimPeriod.setSelectedItem("yyyy");
        spSR.setText("");
        startPlantingDate.setText("");
        endPlantingDate.setText("");
        pdSR.setText("");
        SoilMoisture1.setSelectedItem("Optimum");
        SoilMoisture2.setSelectedItem("Optimum");
        smSR.setText("");
        jCheckBox1.setSelected(false);
        Rate1.setText(null);
        Rate2.setText(null);
        Depth1.setText(null);
        Depth2.setText(null);
        MaxCanopyHt1.setText(null);
        MaxCanopyHt2.setText(null);
        SRrate.setText(null);
        SRdepth.setText(null);
        SRmaxcanopyht.setText(null);
        
        ClearButton1ActionPerformed(null);
        
        if (BatchRuns.getSelectedValuesList().size() == 1){
            wl.clear();
            for (int x = 0; x < BatchRuns.getModel().getSize(); x++ ){
                if (BatchRuns.isSelectedIndex(x)){
                    for (cropObject Crop : crops){
                        if (Crop.getFileName().equalsIgnoreCase(BatchRuns.getModel().getElementAt(x).toString())){
                            if (Crop.getWeatherFileRanges().size() > 0){
                                for (int i = 0; i < Crop.getWeatherFileRanges().size(); i++){
                                    List <List> checkList = Crop.getWeatherFileRanges().get(i);
                                    wl.addElement(checkList.get(2));
                                    
                                }
                            }
                            if (Crop.getSoilMoistureRange().size() > 0){
                                SoilMoisture1.setSelectedItem(Crop.getSoilMoistureRange().get(0));
                                SoilMoisture2.setSelectedItem(Crop.getSoilMoistureRange().get(1));
                                smSR.setText(Crop.getSoilMoistureRange().get(2));
                            }
                            if (Crop.getRateRange().size() > 0){
                                Rate1.setText(Crop.getRateRange().get(0));
                                Rate2.setText(Crop.getRateRange().get(1));
                                SRrate.setText(Crop.getRateRange().get(2));
                            }
                            if (Crop.getDepthRange().size() > 0){
                                Depth1.setText(Crop.getDepthRange().get(0));
                                Depth2.setText(Crop.getDepthRange().get(1));
                                SRdepth.setText(Crop.getDepthRange().get(2));
                            }
                            if (Crop.getMaxCanopyHtRange().size() > 0){
                                MaxCanopyHt1.setText(Crop.getMaxCanopyHtRange().get(0));
                                MaxCanopyHt2.setText(Crop.getMaxCanopyHtRange().get(1));
                                SRmaxcanopyht.setText(Crop.getMaxCanopyHtRange().get(2));
                            }
                                
                        }
                    }
                }
            }
        }
                  
    }//GEN-LAST:event_BatchRunsMouseClicked

    private void addPlantingConditionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPlantingConditionsActionPerformed
        List <String> locationInfo = new ArrayList();
        boolean error = false;
        
        //Checking the values entered
        if (!startSimPeriod.getSelectedItem().toString().equalsIgnoreCase("yyyy") && !endSimPeriod.getSelectedItem().toString().equalsIgnoreCase("yyyy") && spSR.getText().replaceAll("\\s+","").length() > 0){
            int startYear = Integer.parseInt(startSimPeriod.getSelectedItem().toString());
            int endYear = Integer.parseInt(endSimPeriod.getSelectedItem().toString());
            
            if (endYear < startYear){
                //Error
                JOptionPane.showMessageDialog(rootPane, "Error ###.#: Please Verify that you have selected the years in order", "Location Information Error", JOptionPane.ERROR_MESSAGE);
            }
            
            if (Integer.parseInt(spSR.getText().replaceAll("\\s+","")) <= 0){
                //Error
                JOptionPane.showMessageDialog(rootPane, "Error ###.#: Year Step Rate must be greater than Zero", "Location Information Error", JOptionPane.ERROR_MESSAGE);
                
            }
        }
        if (startPlantingDate.getText().replaceAll("\\s+","").length() > 0 && endPlantingDate.getText().replaceAll("\\s+","").length() > 0 && pdSR.getText().replaceAll("\\s+","").length() > 0){
            int startMonth = Integer.parseInt(startPlantingDate.getText().split("/")[0]);
            int startDay = Integer.parseInt(startPlantingDate.getText().split("/")[1]);
            
            int endMonth = Integer.parseInt(endPlantingDate.getText().split("/")[0]);
            int endDay = Integer.parseInt(endPlantingDate.getText().split("/")[1]);
            
            if (endMonth < startMonth || (endMonth == startMonth && endDay < startDay)){
                //Error
                JOptionPane.showMessageDialog(rootPane, "Error ###.#: Starting Planting Date must be less than ending date", "Location Information Error", JOptionPane.ERROR_MESSAGE);
            }
            if (Integer.parseInt(pdSR.getText().replaceAll("\\s+","")) <= 0){
                //Error
                JOptionPane.showMessageDialog(rootPane, "Error ###.#: Planting Date Step Rate must be greater than Zero", "Location Information Error", JOptionPane.ERROR_MESSAGE);
            }
        }    
        if (SoilMoisture1.getSelectedItem().toString().equalsIgnoreCase(SoilMoisture2.getSelectedItem().toString()) && smSR.getText().replaceAll("\\s+","").length() > 0){
            int soil1 = 0;
            int soil2 = 0;
            
            if (SoilMoisture1.getSelectedItem().toString().equalsIgnoreCase("Optimum"))
                soil1 = 1;
            else if (SoilMoisture1.getSelectedItem().toString().equalsIgnoreCase("Medium"))
                soil1 = 2;
            else if (SoilMoisture1.getSelectedItem().toString().equalsIgnoreCase("Dry"))
                soil1 = 3;    
            else if (SoilMoisture1.getSelectedItem().toString().equalsIgnoreCase("Planted in Dust"))
                soil1 = 4;
            
            if (SoilMoisture2.getSelectedItem().toString().equalsIgnoreCase("Optimum"))
                soil2 = 1;
            else if (SoilMoisture2.getSelectedItem().toString().equalsIgnoreCase("Medium"))
                soil2 = 2;
            else if (SoilMoisture2.getSelectedItem().toString().equalsIgnoreCase("Dry"))
                soil2 = 3;    
            else if (SoilMoisture2.getSelectedItem().toString().equalsIgnoreCase("Planted in Dust"))
                soil2 = 4;
            
            if (soil2 < soil1){
                //Error
                JOptionPane.showMessageDialog(rootPane, "Error ###.#: Starting soil must be greater than ending, Optimum is the greatest", "Location Information Error", JOptionPane.ERROR_MESSAGE);
            }
            if (Integer.parseInt(smSR.getText().replaceAll("\\s+","")) <= 0){
                //error
                JOptionPane.showMessageDialog(rootPane, "Error ###.#: Soil Moisture Step Rate must be greater than Zero", "Location Information Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        
        
        
        if (!startSimPeriod.getSelectedItem().toString().equalsIgnoreCase("yyyy")){
            error = true;
            if (!endSimPeriod.getSelectedItem().toString().equalsIgnoreCase("yyyy")){
                error = true;
                if (spSR.getText().replaceAll("\\s+","").length() > 0){
                    error = true;
                    if (startPlantingDate.getText().replaceAll("\\s+","").length() > 0){
                        error = true;
                        if (endPlantingDate.getText().replaceAll("\\s+","").length() > 0){
                            error = true;
                            if (pdSR.getText().replaceAll("\\s+","").length() > 0){
                                error = false;
                                if (!Country1.getSelectedItem().toString().equalsIgnoreCase("none") &&
                                    !WeatherFile1.getSelectedItem().toString().equalsIgnoreCase("none") &&
                                    Latitude1.getText().replaceAll("\\s+","").length() > 0){
                                    locationInfo.clear();
                                    //Adding Information from WeatherFile tab
                                    locationInfo.add(Country1.getSelectedItem().toString());
                                    
                                    if (!Region1.getSelectedItem().toString().equalsIgnoreCase("none"))
                                        locationInfo.add(Region1.getSelectedItem().toString());
                                    
                                    for (int x = 0; x < BatchRuns.getModel().getSize(); x++ ){
                                        if (BatchRuns.isSelectedIndex(x)){
                                            for (cropObject Crop : crops){

                                                if (Crop.getFileName().equalsIgnoreCase(BatchRuns.getModel().getElementAt(x).toString())){
                                                    locationInfo.add(WeatherStations.get(1).substring(WeatherStations.get(1).lastIndexOf("\\")+1, WeatherStations.get(1).length()));
                                                    locationInfo.add(Latitude1.getText().replaceAll("\\s+",""));
                                    
                                                    //Adding Information from Planting Conditions tab
                                                    locationInfo.add(startSimPeriod.getSelectedItem().toString());
                                                    locationInfo.add(endSimPeriod.getSelectedItem().toString());
                                                    locationInfo.add(spSR.getText().replaceAll("\\s+",""));
                                                    locationInfo.add(startPlantingDate.getText().replaceAll("\\s+",""));
                                                    locationInfo.add(endPlantingDate.getText().replaceAll("\\s+",""));
                                                    locationInfo.add(pdSR.getText().replaceAll("\\s+",""));
                                                    
                                                    if (jCheckBox1.isSelected()){
                                                        locationInfo.add("true");
                                                    }else{
                                                        locationInfo.add("false");
                                                    }
                                                    Crop.setWeatherFileRanges(locationInfo);
                                                    wl.addElement(Country1.getSelectedItem().toString() + "/" + Region1.getSelectedItem().toString() +
                                                            "/" + WeatherFile1.getSelectedItem().toString());
                                                }
                                            }
                                        }
                                    }
                                }
                            }else{
                                JOptionPane.showMessageDialog(rootPane, "Error ###.#: Verify, that there is a Weatherfile,selected and there is a Latitude", "Location Information Error", JOptionPane.ERROR_MESSAGE);
                            }
                        }
                    }
                }
            }
        }
        
        if (error)
            JOptionPane.showMessageDialog(rootPane, "Error ###.#: Verify, that there is a start and end year, and start and end dates, with step rates", "Location Information Error", JOptionPane.ERROR_MESSAGE);
        
        if (!SoilMoisture1.getSelectedItem().toString().equalsIgnoreCase(SoilMoisture2.getSelectedItem().toString()) && smSR.getText().replaceAll("\\s+","").length() > 0){
            locationInfo.clear();
            locationInfo.add(SoilMoisture1.getSelectedItem().toString());
            locationInfo.add(SoilMoisture2.getSelectedItem().toString());
            locationInfo.add(smSR.getText().replaceAll("\\s+",""));
            
            for (int x = 0; x < BatchRuns.getModel().getSize(); x++ ){
                if (BatchRuns.isSelectedIndex(x)){
                    for (cropObject Crop : crops){
                         if (Crop.getFileName().equalsIgnoreCase(BatchRuns.getModel().getElementAt(x).toString())){
                            Crop.setSoilMoistureRange(locationInfo);
                        }
                    }
                }
            }
        }
        //Setting true or false for Simulate Period and Soil Moisture
        for (int x = 0; x < BatchRuns.getModel().getSize(); x++ ){
                if (BatchRuns.isSelectedIndex(x)){
                    for (cropObject Crop : crops){
                         if (Crop.getFileName().equalsIgnoreCase(BatchRuns.getModel().getElementAt(x).toString())){
                            if (Crop.getWeatherFileRanges().size() > 0 && Crop.getSoilMoistureRange().size() > 0){
                                List <String> WeatherFileInfo = Crop.getWeatherFileRanges().get(Crop.getWeatherFileRanges().size()-1);
                                String simulation = WeatherFileInfo.get(WeatherFileInfo.size()-1);

                                Crop.setSimulatePeriodMoisture(Boolean.parseBoolean(simulation));
                            }
                        }
                    }
                }
            }
        
        
        //Going through all the selected Runs
        for (int x = 0; x < BatchRuns.getModel().getSize(); x++ ){
            if (BatchRuns.isSelectedIndex(x)){
                rt.set(x, "B");
            }
        }
    }//GEN-LAST:event_addPlantingConditionsActionPerformed

    private void systemSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_systemSettingsActionPerformed
        SystemSettings system = new SystemSettings(baseDirectory, defaultCountry, defaultRegion);

        system.setVisible(true);
    }//GEN-LAST:event_systemSettingsActionPerformed

    private void jTabbedPane2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane2StateChanged
        if (jTabbedPane2.getSelectedIndex() == 1){
            message.setText("");
            addButton.setEnabled(true);
            String changeInfo[] = cropTypeInfo.getText().split(":");
            cropTypeInfo.setText(changeInfo[0] + ": " + cropType.getSelectedItem().toString());
            changeInfo = cropVarietyInfo.getText().split(":");
            cropVarietyInfo.setText(changeInfo[0] + ": "  + cropVariety.getSelectedItem().toString());
        }
    }//GEN-LAST:event_jTabbedPane2StateChanged

    private void WeatherStationListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_WeatherStationListMouseClicked
        if (BatchRuns.getSelectedValuesList().size() == 1){
            for (int x = 0; x < BatchRuns.getModel().getSize(); x++ ){
                if (BatchRuns.isSelectedIndex(x)){
                    for (cropObject Crop : crops){
                        if (Crop.getFileName().equalsIgnoreCase(BatchRuns.getModel().getElementAt(x).toString())){
                            if (Crop.getWeatherFileRanges().size() > 0){
                                for (int i = 0; i < Crop.getWeatherFileRanges().size(); i++){
                                    
                                    if (WeatherStationList.getSelectedValuesList().size() == 1){
                                        for (int y = 0; y < WeatherStationList.getModel().getSize(); y++ ){
                                            if (WeatherStationList.isSelectedIndex(y)){
                                                //Getting Selected WeatherFile
                                                String selected = WeatherStationList.getModel().getElementAt(y).toString().trim();
                                                jPanel12.setBackground(Color.yellow);
                                                //Comparing Weather Information
                                                String splitVariables[] = selected.trim().split("/");
                                                List <String> WeatherStationList = Crop.getWeatherFileRanges().get(i);
                                                if (WeatherStationList.get(0).equalsIgnoreCase(splitVariables[0]) &&
                                                        WeatherStationList.get(1).trim().equalsIgnoreCase(splitVariables[1]) &&
                                                            WeatherStationList.get(2).trim().equalsIgnoreCase(selected.trim())){
                                                
                                                    //Updatedating Weather File Screen with Simulation years
                                                    startSimPeriod.removeAllItems();
                                                    startSimPeriod.addItem(WeatherStationList.get(4).toString());
                                                    endSimPeriod.removeAllItems();
                                                    endSimPeriod.addItem(WeatherStationList.get(5).toString());
                                                    spSR.setText(WeatherStationList.get(6).toString());
                                                    
                                                    //Updatedating Weather File Screen with Planting date
                                                    startPlantingDate.setText(WeatherStationList.get(7).toString());
                                                    endPlantingDate.setText(WeatherStationList.get(8).toString());
                                                    pdSR.setText(WeatherStationList.get(9).toString());
                                                                                                        
                                                    if (Crop.getWeatherFileRanges().size() > 0 && Crop.getSoilMoistureRange().size() > 0){
                                                        List <String> checkingSim = Crop.getWeatherFileRanges().get(i);
                                                        
                                                        if (Boolean.parseBoolean(checkingSim.get(checkingSim.size()-1)))
                                                            jCheckBox1.setSelected(true);
                                                        
                                                    }
                                                    
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_WeatherStationListMouseClicked

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        for (int x = 0; x < BatchRuns.getModel().getSize(); x++ ){
            if (BatchRuns.isSelectedIndex(x)){
                for (cropObject Crop : crops){
                    if (Crop.getFileName().equalsIgnoreCase(BatchRuns.getModel().getElementAt(x).toString())){
                        fp.saveFile(Crop, baseDirectory, rt.get(x).toString());
                        sl.setElementAt("Y", x);
                    }
                }
            }
         }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
         for (int x = 0; x < BatchRuns.getModel().getSize(); x++ ){
            if (BatchRuns.isSelectedIndex(x)){
                for (cropObject Crop : crops){
                    if (Crop.getFileName().equalsIgnoreCase(BatchRuns.getModel().getElementAt(x).toString())){
                        try {
                            if (Files.exists(Paths.get(baseDirectory + "\\Interface\\results\\" + Crop.getFileName()))){
                                DeletingFileVisitor delFileVisitor = new DeletingFileVisitor();
                                Files.walkFileTree(Paths.get(baseDirectory + "\\Interface\\results\\" + Crop.getFileName()), delFileVisitor);
                            }
                            lm.remove(x);
                            rt.remove(x);
                            sl.remove(x);
                            crops.remove(Crop);
                        } catch (IOException ex) {
                            Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        break;
                    }
                }
            }
         }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void viewInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewInputActionPerformed
        inputFilter filter = new inputFilter();
        
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(baseDirectory + "\\Interface\\results"));
        fileChooser.setFileFilter(filter);
        
        int result = fileChooser.showOpenDialog(null);
        
        if (result == JFileChooser.APPROVE_OPTION){
            try {
                File selectedFile = fileChooser.getSelectedFile();
                jTextArea1.read(new FileReader(selectedFile.getAbsolutePath()), evt);
            } catch (IOException ex) {
                Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_viewInputActionPerformed

    private void viewOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewOutputActionPerformed
        outputFilter filter = new outputFilter();
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(baseDirectory + "\\Interface\\results"));
        fileChooser.setFileFilter(filter);
        
        int result = fileChooser.showOpenDialog(null);
        
        if (result == JFileChooser.APPROVE_OPTION){
            
            try {
                File selectedFile = fileChooser.getSelectedFile();
                jTextArea2.read(new FileReader(selectedFile.getAbsolutePath()), evt);
            } catch (IOException ex) {
                Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            
        }
    }//GEN-LAST:event_viewOutputActionPerformed

    private void jMenuItem6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem6MouseClicked

    }//GEN-LAST:event_jMenuItem6MouseClicked

    private void deleteCropInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteCropInfoActionPerformed
        // TODO add your handling code here:
        deleteCrop frame = new deleteCrop(baseDirectory);
        
        frame.setVisible(true);
    }//GEN-LAST:event_deleteCropInfoActionPerformed

    private void deleteLocationsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteLocationsActionPerformed
        // TODO add your handling code here:
        deleteWeatherFile frame = new deleteWeatherFile(baseDirectory);
        
        frame.setVisible(true);
        
    }//GEN-LAST:event_deleteLocationsActionPerformed

    /* ImageFilter.java is used by FileChooserDemo2.java. */
    class inputFilter extends FileFilter {

        //Accept all directories and all gif, jpg, tiff, or png files.
        public boolean accept(File f) {
            if (f.isDirectory()) {
                return true;
            }
            String fileName = f.getName();
            String extension[] = null; 
            boolean rightFile = fileName.contains(".in");

            if (fileName.length() > 0) {
                if (f.getName().endsWith(".in") || f.getName().endsWith(".info")){
                    return true;
                } else {
                    return false;
                }
            }
            return false;
        }


        //The description of this filter
        public String getDescription() {
            return "Only Input Files";
        }
    }
   /* ImageFilter.java is used by FileChooserDemo2.java. */
    class outputFilter extends FileFilter {

        //Accept all directories and all gif, jpg, tiff, or png files.
        public boolean accept(File f) {
            if (f.isDirectory()) {
                return true;
            }
            String fileName = f.getName();
            String extension[] = null; 
            boolean rightFile = fileName.endsWith(".out");

            if (fileName.length() > 0) {
                if (f.getName().endsWith(".out") ){
                    return true;
                } else {
                    return false;
                }
            }
            return false;
        }


        //The description of this filter
        public String getDescription() {
            return "Only Output Files";
        }
    }
    class saveFilter extends FileFilter {

        //Accept all directories and all gif, jpg, tiff, or png files.
        public boolean accept(File f) {
            if (f.isDirectory()) {
                return true;
            }
            String fileName = f.getName();
            String extension[] = null; 
            boolean rightFile = fileName.endsWith(".sav");

            if (fileName.length() > 0) {
                if (f.getName().endsWith(".sav") ){
                    return true;
                } else {
                    return false;
                }
            }
            return false;
        }


        //The description of this filter
        public String getDescription() {
            return "Only save Files";
        }
    }
    
    /*
    *
    *Code below allows an action to take place.  It will call other functions to complete a specific task
    *    
    */
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {    //Calls the Help function to complete task
        // TODO add your handling code here:
    }                                          

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {    //Calls the about function to complete task
        // TODO add your handling code here:
		        
        aboutHelp frame = new aboutHelp();
        frame.setVisible(true);
    }                                          

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {    //Calls the Disclaimer function to complete task
        // TODO add your handling code here:
    }                                          
    
    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {    //Calls the Contact function to complete task
        // TODO add your handling code here:
    }                                          

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {    //Calls the Open function to complete task
        //Opening a file, and setting all the default values
        File dir = new File(baseDirectory + "/Interface/results");
        saveFilter filter = new saveFilter();
        JFileChooser fc = new JFileChooser();
        File newFile = null;
        
        fc.setDialogTitle("Select A .SAV File");
        fc.setCurrentDirectory(dir);
        fc.setFileFilter(filter);
          if (fc.showDialog(null, "Select") == 0){
            crop = fp.openFile(fc.getSelectedFile().getAbsolutePath());
            loadCropObject(crop);
          }
    }                                          

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {    //Calls the Save function to complete task    
        // TODO add your handling code here:
    }                                          

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {    //Calls the exit function to complete task
        for (int x = 0; x < BatchRuns.getModel().getSize(); x++ ){
            for (cropObject Crop : crops){
                if ((Crop.getFileName().equalsIgnoreCase(BatchRuns.getModel().getElementAt(x).toString())) && sl.getElementAt(x).toString().equalsIgnoreCase("N")){

                    //Deleting Files
                    if (Files.exists(Paths.get(baseDirectory + "\\Interface\\results\\" + Crop.getFileName()))){
                        DeletingFileVisitor delFileVisitor = new DeletingFileVisitor();
                        try{
                            Files.walkFileTree(Paths.get(baseDirectory + "\\Interface\\results\\" + Crop.getFileName()), delFileVisitor);
                        }catch(IOException e){

                        }
                    } 
                }
            }
         }
        
        System.exit(0);
    }                                          


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                   UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new main().setVisible(true);
                loading = false;
             }
            
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList BatchRuns;
    private javax.swing.JButton ClearButton1;
    private javax.swing.JButton ClearButton2;
    private javax.swing.JComboBox Country;
    private javax.swing.JComboBox Country1;
    private javax.swing.JTextField Depth;
    private javax.swing.JTextField Depth1;
    private javax.swing.JTextField Depth2;
    private javax.swing.JTextField FileName;
    private javax.swing.JButton FixCropObject;
    private javax.swing.JTextField Latitude;
    private javax.swing.JTextField Latitude1;
    private javax.swing.JTextField MaxCanopyHt;
    private javax.swing.JTextField MaxCanopyHt1;
    private javax.swing.JTextField MaxCanopyHt2;
    private javax.swing.JTextField Rate;
    private javax.swing.JTextField Rate1;
    private javax.swing.JTextField Rate2;
    private javax.swing.JComboBox Region;
    private javax.swing.JComboBox Region1;
    private javax.swing.JButton RunBatch;
    private javax.swing.JList RunType;
    private javax.swing.JTextField SRdepth;
    private javax.swing.JTextField SRmaxcanopyht;
    private javax.swing.JTextField SRrate;
    private javax.swing.JComboBox SoilMoisture;
    private javax.swing.JComboBox SoilMoisture1;
    private javax.swing.JComboBox SoilMoisture2;
    private javax.swing.JComboBox WeatherFile;
    private javax.swing.JComboBox WeatherFile1;
    private javax.swing.JList WeatherStationList;
    private javax.swing.JButton addButton;
    private javax.swing.JMenuItem addCropDataButton;
    private javax.swing.JButton addPlantingConditions;
    private javax.swing.JMenuItem addWeatherButton;
    private javax.swing.JButton additionalInfoButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup10;
    private javax.swing.ButtonGroup buttonGroup11;
    private javax.swing.ButtonGroup buttonGroup12;
    private javax.swing.ButtonGroup buttonGroup13;
    private javax.swing.ButtonGroup buttonGroup14;
    private javax.swing.ButtonGroup buttonGroup15;
    private javax.swing.ButtonGroup buttonGroup16;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.ButtonGroup buttonGroup6;
    private javax.swing.ButtonGroup buttonGroup7;
    private javax.swing.ButtonGroup buttonGroup8;
    private javax.swing.ButtonGroup buttonGroup9;
    private javax.swing.JFormattedTextField cropDate;
    private javax.swing.JComboBox<String> cropType;
    private javax.swing.JLabel cropTypeInfo;
    private javax.swing.JComboBox cropVariety;
    private javax.swing.JLabel cropVarietyInfo;
    private javax.swing.JButton deleteButton;
    private javax.swing.JMenuItem deleteCropInfo;
    private javax.swing.JMenuItem deleteLocations;
    private javax.swing.JFormattedTextField endPlantingDate;
    private javax.swing.JComboBox endSimPeriod;
    private javax.swing.JFormattedTextField endWeatherYear;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler3;
    private javax.swing.JTextField gddNS0;
    private javax.swing.JTextField gddNS1;
    private javax.swing.JTextField gddNS10;
    private javax.swing.JTextField gddNS11;
    private javax.swing.JTextField gddNS12;
    private javax.swing.JTextField gddNS13;
    private javax.swing.JTextField gddNS14;
    private javax.swing.JTextField gddNS15;
    private javax.swing.JTextField gddNS2;
    private javax.swing.JTextField gddNS3;
    private javax.swing.JTextField gddNS4;
    private javax.swing.JTextField gddNS5;
    private javax.swing.JTextField gddNS6;
    private javax.swing.JTextField gddNS7;
    private javax.swing.JTextField gddNS8;
    private javax.swing.JTextField gddNS9;
    private javax.swing.JRadioButton gddNSrb0;
    private javax.swing.JRadioButton gddNSrb1;
    private javax.swing.JRadioButton gddNSrb10;
    private javax.swing.JRadioButton gddNSrb11;
    private javax.swing.JRadioButton gddNSrb12;
    private javax.swing.JRadioButton gddNSrb13;
    private javax.swing.JRadioButton gddNSrb14;
    private javax.swing.JRadioButton gddNSrb15;
    private javax.swing.JRadioButton gddNSrb2;
    private javax.swing.JRadioButton gddNSrb3;
    private javax.swing.JRadioButton gddNSrb4;
    private javax.swing.JRadioButton gddNSrb5;
    private javax.swing.JRadioButton gddNSrb6;
    private javax.swing.JRadioButton gddNSrb7;
    private javax.swing.JRadioButton gddNSrb8;
    private javax.swing.JRadioButton gddNSrb9;
    private javax.swing.JTextField gddS0;
    private javax.swing.JTextField gddS1;
    private javax.swing.JTextField gddS10;
    private javax.swing.JTextField gddS11;
    private javax.swing.JTextField gddS12;
    private javax.swing.JTextField gddS13;
    private javax.swing.JTextField gddS14;
    private javax.swing.JTextField gddS15;
    private javax.swing.JTextField gddS2;
    private javax.swing.JTextField gddS3;
    private javax.swing.JTextField gddS4;
    private javax.swing.JTextField gddS5;
    private javax.swing.JTextField gddS6;
    private javax.swing.JTextField gddS7;
    private javax.swing.JTextField gddS8;
    private javax.swing.JTextField gddS9;
    private javax.swing.JRadioButton gddSrb0;
    private javax.swing.JRadioButton gddSrb1;
    private javax.swing.JRadioButton gddSrb10;
    private javax.swing.JRadioButton gddSrb11;
    private javax.swing.JRadioButton gddSrb12;
    private javax.swing.JRadioButton gddSrb13;
    private javax.swing.JRadioButton gddSrb14;
    private javax.swing.JRadioButton gddSrb15;
    private javax.swing.JRadioButton gddSrb2;
    private javax.swing.JRadioButton gddSrb3;
    private javax.swing.JRadioButton gddSrb4;
    private javax.swing.JRadioButton gddSrb5;
    private javax.swing.JRadioButton gddSrb6;
    private javax.swing.JRadioButton gddSrb7;
    private javax.swing.JRadioButton gddSrb8;
    private javax.swing.JRadioButton gddSrb9;
    private javax.swing.JLabel gsLabel0;
    private javax.swing.JLabel gsLabel1;
    private javax.swing.JLabel gsLabel10;
    private javax.swing.JLabel gsLabel11;
    private javax.swing.JLabel gsLabel12;
    private javax.swing.JLabel gsLabel13;
    private javax.swing.JLabel gsLabel14;
    private javax.swing.JLabel gsLabel15;
    private javax.swing.JLabel gsLabel16;
    private javax.swing.JLabel gsLabel17;
    private javax.swing.JLabel gsLabel18;
    private javax.swing.JLabel gsLabel19;
    private javax.swing.JLabel gsLabel2;
    private javax.swing.JLabel gsLabel3;
    private javax.swing.JLabel gsLabel4;
    private javax.swing.JLabel gsLabel5;
    private javax.swing.JLabel gsLabel6;
    private javax.swing.JLabel gsLabel7;
    private javax.swing.JLabel gsLabel8;
    private javax.swing.JLabel gsLabel9;
    private javax.swing.JButton inputUpdate;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JLabel message;
    private javax.swing.JTextField nolNS0;
    private javax.swing.JTextField nolNS1;
    private javax.swing.JTextField nolNS10;
    private javax.swing.JTextField nolNS11;
    private javax.swing.JTextField nolNS12;
    private javax.swing.JTextField nolNS13;
    private javax.swing.JTextField nolNS14;
    private javax.swing.JTextField nolNS15;
    private javax.swing.JTextField nolNS2;
    private javax.swing.JTextField nolNS3;
    private javax.swing.JTextField nolNS4;
    private javax.swing.JTextField nolNS5;
    private javax.swing.JTextField nolNS6;
    private javax.swing.JTextField nolNS7;
    private javax.swing.JTextField nolNS8;
    private javax.swing.JTextField nolNS9;
    private javax.swing.JRadioButton nolNSrb0;
    private javax.swing.JRadioButton nolNSrb1;
    private javax.swing.JRadioButton nolNSrb10;
    private javax.swing.JRadioButton nolNSrb11;
    private javax.swing.JRadioButton nolNSrb12;
    private javax.swing.JRadioButton nolNSrb13;
    private javax.swing.JRadioButton nolNSrb14;
    private javax.swing.JRadioButton nolNSrb15;
    private javax.swing.JRadioButton nolNSrb2;
    private javax.swing.JRadioButton nolNSrb3;
    private javax.swing.JRadioButton nolNSrb4;
    private javax.swing.JRadioButton nolNSrb5;
    private javax.swing.JRadioButton nolNSrb6;
    private javax.swing.JRadioButton nolNSrb7;
    private javax.swing.JRadioButton nolNSrb8;
    private javax.swing.JRadioButton nolNSrb9;
    private javax.swing.JTextField nolS0;
    private javax.swing.JTextField nolS1;
    private javax.swing.JTextField nolS10;
    private javax.swing.JTextField nolS11;
    private javax.swing.JTextField nolS12;
    private javax.swing.JTextField nolS13;
    private javax.swing.JTextField nolS14;
    private javax.swing.JTextField nolS15;
    private javax.swing.JTextField nolS2;
    private javax.swing.JTextField nolS3;
    private javax.swing.JTextField nolS4;
    private javax.swing.JTextField nolS5;
    private javax.swing.JTextField nolS6;
    private javax.swing.JTextField nolS7;
    private javax.swing.JTextField nolS8;
    private javax.swing.JTextField nolS9;
    private javax.swing.JRadioButton nolSrb0;
    private javax.swing.JRadioButton nolSrb1;
    private javax.swing.JRadioButton nolSrb10;
    private javax.swing.JRadioButton nolSrb11;
    private javax.swing.JRadioButton nolSrb12;
    private javax.swing.JRadioButton nolSrb13;
    private javax.swing.JRadioButton nolSrb14;
    private javax.swing.JRadioButton nolSrb15;
    private javax.swing.JRadioButton nolSrb2;
    private javax.swing.JRadioButton nolSrb3;
    private javax.swing.JRadioButton nolSrb4;
    private javax.swing.JRadioButton nolSrb5;
    private javax.swing.JRadioButton nolSrb6;
    private javax.swing.JRadioButton nolSrb7;
    private javax.swing.JRadioButton nolSrb8;
    private javax.swing.JRadioButton nolSrb9;
    private javax.swing.JTextField pdSR;
    private javax.swing.JLabel runStatus;
    private javax.swing.JButton saveButton;
    private javax.swing.JList savedList;
    private javax.swing.JTextField smSR;
    private javax.swing.ButtonGroup sort;
    private javax.swing.JRadioButton sort1;
    private javax.swing.JRadioButton sort2;
    private javax.swing.JRadioButton sort3;
    private javax.swing.JRadioButton sort4;
    private javax.swing.JRadioButton sortAll;
    private javax.swing.JTextField spSR;
    private javax.swing.JFormattedTextField startPlantingDate;
    private javax.swing.JComboBox startSimPeriod;
    private javax.swing.JFormattedTextField startWeatherYear;
    private javax.swing.JMenuItem systemSettings;
    private javax.swing.JTabbedPane tabs;
    private javax.swing.JButton updatePI;
    private javax.swing.JButton viewInput;
    private javax.swing.JButton viewOutput;
    // End of variables declaration//GEN-END:variables

    public void actionPerformed(ActionEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    private void CropAndLocationDropDowns() throws SQLException{
        addButton.setEnabled(false);
        BatchRuns.setModel(lm);
        jScrollPane2.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane2.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        
        RunType.setModel(rt);
        WeatherStationList.setModel(wl);
        savedList.setModel(sl);
        
        


        message.setText("Please Verify Information, and your Choices in the \"Growth Stages\" tab");
		
        sysSettings = new ArrayList(fp.ReadSettingsFile(baseDirectory));
        if (!sysSettings.get(0).equalsIgnoreCase("No Country")){
            defaultCountry = sysSettings.get(0);
        }
        if (!sysSettings.get(1).equalsIgnoreCase("No Region")){
            defaultRegion = sysSettings.get(1);
        }
		
         
        // Getting crop types to populate information. This will populate "Choose Crop:" Drop Down menu
        String column1 = PopulateCropTypeDropDown();       
        
        //Populating CropVariety on Startup
        PopulateCropVarietyDropDown(column1, 0);
        
        //Populating Growth Stages
        PopulateGrowthStageHeaders(column1);
        
        // Getting a list of countries from the database to populate Country DropDownBox
        PopulatingCountryDropDown(0, null);        
        
        
        /*
        * Checking to see if the country List has values
        */
        if (Country.getItemCount() != 0){
            //Populating the Region DropDown Button
            PoplulatingRegionDropDown(0, null);

            // Populating the Weather File DropDown Button
            if (Region.getItemCount() > 0)
                PopulateWeatherFileDropDown(true, 0, null);
            else
                PopulateWeatherFileDropDown(false, 0, null);

            //Setting Weather File Settings - Latitude, Location, etc.
            SettingWeatherFileSettings(0) ;
                

        }else{

            JOptionPane.showMessageDialog(rootPane, "Error ###.#: There are no Countries to List, Please Add A Country", "Country Error", JOptionPane.ERROR_MESSAGE);
        }
        loading = false;
    }
    
    public void PopulatePlantingInformation(List <String> obj) throws ParseException{
        if (!obj.isEmpty()){
            for(int i = 0; i < obj.size(); i++){
                if (i > 0){
                    switch (i){
                        case 2:
                            cropDate.setText(obj.get(i));
                            break;
                        case 3:
                            for(int j = 0; j < SoilMoisture.getItemCount(); j++){
                                if (obj.get(i).equalsIgnoreCase(SoilMoisture.getItemAt(j).toString())){
                                    SoilMoisture.setSelectedItem(j);            
                                }
                            }
                            break;
                        case 4:
                            Depth.setText(obj.get(i));
                            break;
                        case 5:
                            Rate.setText(obj.get(i));
                            break;
                        case 6:
                            MaxCanopyHt.setText(obj.get(i));
                            break;

                   }
               }
            }
        }
    }
//    public void PopulatingGrowthStages(List <String> labels, String tableName, String selection) throws ParseException, IOException{
    public void PopulatingGrowthStages(List <String> labels1, List <String> gsData1, List <Boolean> radioSelections){ 
        List <String> labels = new ArrayList(labels1);
        List <String> gsData = new ArrayList(gsData1);
//        List <Boolean> radioSelections = new ArrayList(radioSelections1);

        String labelText[] = {};
        int z = 0;
        boolean LabelExists = false;
        
        resetGrowthStages();
        
        if (labels.size() > 0 && gsData.size() > 0){
        
            gsData.remove(0);

            for (int i = 0; i < 20;i++){
                Arrays.fill(labelText, null);
                LabelExists = false;
                if ( i < labels.size()){
                    if (!labels.get(i).isEmpty()){
                        labelText = labels.get(i).split("_");
                        if (labelText[0].equalsIgnoreCase("GDD") && labelText[1].equalsIgnoreCase("NS"))
                            LabelExists = true;
                    }
                }

                switch (i){
                    case 0:
                        if (LabelExists){
                            gsLabel0.setText(labelText[2]);
                            if (radioSelections == null){
                                gddNSrb0.setSelected(true);
                            }else{

                               if (radioSelections.get(0) == true  ){
                                   gddNSrb0.setSelected(true);
                               }else if (radioSelections.get(16) == true){
                                   gddSrb0.setSelected(true);
                               }else if (radioSelections.get(32) == true){
                                   nolNSrb0.setSelected(true);
                               }else if (radioSelections.get(48) == true){
                                   nolSrb0.setSelected(true);
                               }
                            }
                        }else{
                            gsLabel0.setEnabled(false);
                            gsLabel0.setVisible(false);
                             //Disable Radio Buttons & Text Boxes
                            gddNSrb0.getModel().setEnabled(false);
                            gddSrb0.getModel().setEnabled(false);
                            nolNSrb0.getModel().setEnabled(false);
                            nolSrb0.getModel().setEnabled(false);

                            gddNS0.setEnabled(false);
                            gddS0.setEnabled(false);
                            nolNS0.setEnabled(false);
                            nolS0.setEnabled(false);

                            //Hide Radio Buttons & Text Boxes
                            gddNSrb0.setVisible(false);
                            gddSrb0.setVisible(false);
                            nolNSrb0.setVisible(false);
                            nolSrb0.setVisible(false);

                            gddNS0.setVisible(false);
                            gddS0.setVisible(false);
                            nolNS0.setVisible(false);
                            nolS0.setVisible(false);
                        }
                         break;
                    case 1:
                        if (LabelExists){
                            gsLabel1.setText(labelText[2]);
                            if (radioSelections == null){
                                gddNSrb1.setSelected(true);
                            }else{
                               if (radioSelections.get(1) == true){
                                   gddNSrb1.setSelected(true);
                               }else if (radioSelections.get(17) == true){
                                   gddSrb1.setSelected(true);
                               }else if (radioSelections.get(33) == true){
                                   nolNSrb1.setSelected(true);
                               }else if (radioSelections.get(49) == true){
                                   nolSrb1.setSelected(true);
                               }
                            }
                        }else{
                            gsLabel1.setEnabled(false);
                            gsLabel1.setVisible(false);

                             //Disable Radio Buttons & Text Boxes
                            gddNSrb1.getModel().setEnabled(false);
                            gddSrb1.getModel().setEnabled(false);
                            nolNSrb1.getModel().setEnabled(false);
                            nolSrb1.getModel().setEnabled(false);

                            gddNS1.setEnabled(false);
                            gddS1.setEnabled(false);
                            nolNS1.setEnabled(false);
                            nolS1.setEnabled(false);

                            //Hide Radio Buttons & Text Boxes
                            gddNSrb1.setVisible(false);
                            gddSrb1.setVisible(false);
                            nolNSrb1.setVisible(false);
                            nolSrb1.setVisible(false);

                            gddNS1.setVisible(false);
                            gddS1.setVisible(false);
                            nolNS1.setVisible(false);
                            nolS1.setVisible(false);
                        }
                        break;
                    case 2:

                        if (LabelExists){
                            gsLabel2.setText(labelText[2]);
                            if (radioSelections == null){
                                gddNSrb2.setSelected(true);
                            }else{
                               if (radioSelections.get(2) == true){
                                   gddNSrb2.setSelected(true);
                               }else if (radioSelections.get(18) == true){
                                   gddSrb2.setSelected(true);
                               }else if (radioSelections.get(34) == true){
                                   nolNSrb2.setSelected(true);
                               }else if (radioSelections.get(50) == true){
                                   nolSrb2.setSelected(true);
                               }
                            }
                        }else{
                            gsLabel2.setEnabled(false);
                            gsLabel2.setVisible(false);

                             //Disable Radio Buttons & Text Boxes
                            gddNSrb2.getModel().setEnabled(false);
                            gddSrb2.getModel().setEnabled(false);
                            nolNSrb2.getModel().setEnabled(false);
                            nolSrb2.getModel().setEnabled(false);

                            gddNS2.setEnabled(false);
                            gddS2.setEnabled(false);
                            nolNS2.setEnabled(false);
                            nolS2.setEnabled(false);

                            //Hide Radio Buttons & Text Boxes
                            gddNSrb2.setVisible(false);
                            gddSrb2.setVisible(false);
                            nolNSrb2.setVisible(false);
                            nolSrb2.setVisible(false);

                            gddNS2.setVisible(false);
                            gddS2.setVisible(false);
                            nolNS2.setVisible(false);
                            nolS2.setVisible(false);
                        }
                        break;
                    case 3:
                        if (LabelExists){
                            gsLabel3.setText(labelText[2]);
                            if (radioSelections == null){
                                gddNSrb3.setSelected(true);
                            }else{
                               if (radioSelections.get(3) == true){
                                   gddNSrb3.setSelected(true);
                               }else if (radioSelections.get(19) == true){
                                   gddSrb3.setSelected(true);
                               }else if (radioSelections.get(35) == true){
                                   nolNSrb3.setSelected(true);
                               }else if (radioSelections.get(51) == true){
                                   nolSrb3.setSelected(true);
                               }
                            }
                        }else{
                            gsLabel3.setEnabled(false);
                            gsLabel3.setVisible(false);

                             //Disable Radio Buttons & Text Boxes
                            gddNSrb3.getModel().setEnabled(false);
                            gddSrb3.getModel().setEnabled(false);
                            nolNSrb3.getModel().setEnabled(false);
                            nolSrb3.getModel().setEnabled(false);

                            gddNS3.setEnabled(false);
                            gddS3.setEnabled(false);
                            nolNS3.setEnabled(false);
                            nolS3.setEnabled(false);

                            //Hide Radio Buttons & Text Boxes
                            gddNSrb3.setVisible(false);
                            gddSrb3.setVisible(false);
                            nolNSrb3.setVisible(false);
                            nolSrb3.setVisible(false);

                            gddNS3.setVisible(false);
                            gddS3.setVisible(false);
                            nolNS3.setVisible(false);
                            nolS3.setVisible(false);
                        }
                        break;
                    case 4:
                        if (LabelExists){
                            gsLabel4.setText(labelText[2]);
                            if (radioSelections == null){
                                gddNSrb4.setSelected(true);
                            }else{
                               if (radioSelections.get(4) == true){
                                   gddNSrb4.setSelected(true);
                               }else if (radioSelections.get(20) == true){
                                   gddSrb4.setSelected(true);
                               }else if (radioSelections.get(36) == true){
                                   nolNSrb4.setSelected(true);
                               }else if (radioSelections.get(52) == true){
                                   nolSrb4.setSelected(true);
                               }
                            }
                        }else{
                            gsLabel4.setEnabled(false);
                            gsLabel4.setVisible(false);

                             //Disable Radio Buttons & Text Boxes
                            gddNSrb4.getModel().setEnabled(false);
                            gddSrb4.getModel().setEnabled(false);
                            nolNSrb4.getModel().setEnabled(false);
                            nolSrb4.getModel().setEnabled(false);

                            gddNS4.setEnabled(false);
                            gddS4.setEnabled(false);
                            nolNS4.setEnabled(false);
                            nolS4.setEnabled(false);

                            //Hide Radio Buttons & Text Boxes
                            gddNSrb4.setVisible(false);
                            gddSrb4.setVisible(false);
                            nolNSrb4.setVisible(false);
                            nolSrb4.setVisible(false);

                            gddNS4.setVisible(false);
                            gddS4.setVisible(false);
                            nolNS4.setVisible(false);
                            nolS4.setVisible(false);
                        }
                        break;
                    case 5:
                        if (LabelExists){
                            gsLabel5.setText(labelText[2]);
                            if (radioSelections == null){
                                gddNSrb5.setSelected(true);
                            }else{
                               if (radioSelections.get(5) == true){
                                   gddNSrb5.setSelected(true);
                               }else if (radioSelections.get(21) == true){
                                   gddSrb5.setSelected(true);
                               }else if (radioSelections.get(37) == true){
                                   nolNSrb5.setSelected(true);
                               }else if (radioSelections.get(53) == true){
                                   nolSrb5.setSelected(true);
                               }
                            }
                        }else{
                            gsLabel5.setEnabled(false);
                            gsLabel5.setVisible(false);

                             //Disable Radio Buttons & Text Boxes
                            gddNSrb5.getModel().setEnabled(false);
                            gddSrb5.getModel().setEnabled(false);
                            nolNSrb5.getModel().setEnabled(false);
                            nolSrb5.getModel().setEnabled(false);

                            gddNS5.setEnabled(false);
                            gddS5.setEnabled(false);
                            nolNS5.setEnabled(false);
                            nolS5.setEnabled(false);

                            //Hide Radio Buttons & Text Boxes
                            gddNSrb5.setVisible(false);
                            gddSrb5.setVisible(false);
                            nolNSrb5.setVisible(false);
                            nolSrb5.setVisible(false);

                            gddNS5.setVisible(false);
                            gddS5.setVisible(false);
                            nolNS5.setVisible(false);
                            nolS5.setVisible(false);
                        }
                        break;
                    case 6:
                        if (LabelExists){
                            gsLabel6.setText(labelText[2]);
                            if (radioSelections == null){
                                gddNSrb6.setSelected(true);
                            }else{
                               if (radioSelections.get(6) == true){
                                   gddNSrb6.setSelected(true);
                               }else if (radioSelections.get(22) == true){
                                   gddSrb6.setSelected(true);
                               }else if (radioSelections.get(38) == true){
                                   nolNSrb6.setSelected(true);
                               }else if (radioSelections.get(54) == true){
                                   nolSrb6.setSelected(true);
                               }
                            }
                        }else{
                            gsLabel6.setEnabled(false);
                            gsLabel6.setVisible(false);

                             //Disable Radio Buttons & Text Boxes
                            gddNSrb6.getModel().setEnabled(false);
                            gddSrb6.getModel().setEnabled(false);
                            nolNSrb6.getModel().setEnabled(false);
                            nolSrb6.getModel().setEnabled(false);

                            gddNS6.setEnabled(false);
                            gddS6.setEnabled(false);
                            nolNS6.setEnabled(false);
                            nolS6.setEnabled(false);

                            //Hide Radio Buttons & Text Boxes
                            gddNSrb6.setVisible(false);
                            gddSrb6.setVisible(false);
                            nolNSrb6.setVisible(false);
                            nolSrb6.setVisible(false);

                            gddNS6.setVisible(false);
                            gddS6.setVisible(false);
                            nolNS6.setVisible(false);
                            nolS6.setVisible(false);
                        }
                        break;
                    case 7:
                        if (LabelExists){
                            gsLabel7.setText(labelText[2]);
                            if (radioSelections == null){
                                gddNSrb7.setSelected(true);
                            }else{
                               if (radioSelections.get(7) == true){
                                   gddNSrb7.setSelected(true);
                               }else if (radioSelections.get(23) == true){
                                   gddSrb7.setSelected(true);
                               }else if (radioSelections.get(39) == true){
                                   nolNSrb7.setSelected(true);
                               }else if (radioSelections.get(55) == true){
                                   nolSrb7.setSelected(true);
                               }
                            }
                        }else{
                            gsLabel7.setEnabled(false);
                            gsLabel7.setVisible(false);

                             //Disable Radio Buttons & Text Boxes
                            gddNSrb7.getModel().setEnabled(false);
                            gddSrb7.getModel().setEnabled(false);
                            nolNSrb7.getModel().setEnabled(false);
                            nolSrb7.getModel().setEnabled(false);

                            gddNS7.setEnabled(false);
                            gddS7.setEnabled(false);
                            nolNS7.setEnabled(false);
                            nolS7.setEnabled(false);

                            //Hide Radio Buttons & Text Boxes
                            gddNSrb7.setVisible(false);
                            gddSrb7.setVisible(false);
                            nolNSrb7.setVisible(false);
                            nolSrb7.setVisible(false);

                            gddNS7.setVisible(false);
                            gddS7.setVisible(false);
                            nolNS7.setVisible(false);
                            nolS7.setVisible(false);
                        }
                        break;
                    case 8:
                        if (LabelExists){
                            gsLabel8.setText(labelText[2]);
                            if (radioSelections == null){
                                gddNSrb8.setSelected(true);
                            }else{
                               if (radioSelections.get(8) == true){
                                   gddNSrb8.setSelected(true);
                               }else if (radioSelections.get(24) == true){
                                   gddSrb8.setSelected(true);
                               }else if (radioSelections.get(40) == true){
                                   nolNSrb8.setSelected(true);
                               }else if (radioSelections.get(56) == true){
                                   nolSrb8.setSelected(true);
                               }
                            }
                        }else{
                            gsLabel8.setEnabled(false);
                            gsLabel8.setVisible(false);

                             //Disable Radio Buttons & Text Boxes
                            gddNSrb8.getModel().setEnabled(false);
                            gddSrb8.getModel().setEnabled(false);
                            nolNSrb8.getModel().setEnabled(false);
                            nolSrb8.getModel().setEnabled(false);

                            gddNS8.setEnabled(false);
                            gddS8.setEnabled(false);
                            nolNS8.setEnabled(false);
                            nolS8.setEnabled(false);

                            //Hide Radio Buttons & Text Boxes
                            gddNSrb8.setVisible(false);
                            gddSrb8.setVisible(false);
                            nolNSrb8.setVisible(false);
                            nolSrb8.setVisible(false);

                            gddNS8.setVisible(false);
                            gddS8.setVisible(false);
                            nolNS8.setVisible(false);
                            nolS8.setVisible(false);
                        }
                        break;
                    case 9:
                        if (LabelExists){
                            gsLabel9.setText(labelText[2]);
                            if (radioSelections == null){
                                gddNSrb9.setSelected(true);
                            }else{
                               if (radioSelections.get(9) == true){
                                   gddNSrb9.setSelected(true);
                               }else if (radioSelections.get(25) == true){
                                   gddSrb9.setSelected(true);
                               }else if (radioSelections.get(41) == true){
                                   nolNSrb9.setSelected(true);
                               }else if (radioSelections.get(57) == true){
                                   nolSrb9.setSelected(true);
                               }
                            }

                        }else{
                            gsLabel9.setEnabled(false);
                            gsLabel9.setVisible(false);

                             //Disable Radio Buttons & Text Boxes
                            gddNSrb9.getModel().setEnabled(false);
                            gddSrb9.getModel().setEnabled(false);
                            nolNSrb9.getModel().setEnabled(false);
                            nolSrb9.getModel().setEnabled(false);

                            gddNS9.setEnabled(false);
                            gddS9.setEnabled(false);
                            nolNS9.setEnabled(false);
                            nolS9.setEnabled(false);

                            //Hide Radio Buttons & Text Boxes
                            gddNSrb9.setVisible(false);
                            gddSrb9.setVisible(false);
                            nolNSrb9.setVisible(false);
                            nolSrb9.setVisible(false);

                            gddNS9.setVisible(false);
                            gddS9.setVisible(false);
                            nolNS9.setVisible(false);
                            nolS9.setVisible(false);
                        }
                        break;
                    case 10:
                        if (LabelExists){
                            gsLabel10.setText(labelText[2]);
                            if (radioSelections == null){
                                gddNSrb10.setSelected(true);
                            }else{
                               if (radioSelections.get(10) == true){
                                   gddNSrb10.setSelected(true);
                               }else if (radioSelections.get(26) == true){
                                   gddSrb10.setSelected(true);
                               }else if (radioSelections.get(42) == true){
                                   nolNSrb10.setSelected(true);
                               }else if (radioSelections.get(58) == true){
                                   nolSrb10.setSelected(true);
                               }
                            }

                        }else{
                            gsLabel10.setEnabled(false);
                            gsLabel10.setVisible(false);

                             //Disable Radio Buttons & Text Boxes
                            gddNSrb10.getModel().setEnabled(false);
                            gddSrb10.getModel().setEnabled(false);
                            nolNSrb10.getModel().setEnabled(false);
                            nolSrb10.getModel().setEnabled(false);

                            gddNS10.setEnabled(false);
                            gddS10.setEnabled(false);
                            nolNS10.setEnabled(false);
                            nolS10.setEnabled(false);

                            //Hide Radio Buttons & Text Boxes
                            gddNSrb10.setVisible(false);
                            gddSrb10.setVisible(false);
                            nolNSrb10.setVisible(false);
                            nolSrb10.setVisible(false);

                            gddNS10.setVisible(false);
                            gddS10.setVisible(false);
                            nolNS10.setVisible(false);
                            nolS10.setVisible(false);
                        }
                        break;
                    case 11:
                        if (LabelExists){
                            gsLabel11.setText(labelText[2]);
                            if (radioSelections == null){
                                gddNSrb11.setSelected(true);
                            }else{
                               if (radioSelections.get(11) == true){
                                   gddNSrb11.setSelected(true);
                               }else if (radioSelections.get(27) == true){
                                   gddSrb11.setSelected(true);
                               }else if (radioSelections.get(43) == true){
                                   nolNSrb11.setSelected(true);
                               }else if (radioSelections.get(59) == true){
                                   nolSrb11.setSelected(true);
                               }
                            }

                        }else{
                            gsLabel11.setEnabled(false);
                            gsLabel11.setVisible(false);

                             //Disable Radio Buttons & Text Boxes
                            gddNSrb11.getModel().setEnabled(false);
                            gddSrb11.getModel().setEnabled(false);
                            nolNSrb11.getModel().setEnabled(false);
                            nolSrb11.getModel().setEnabled(false);

                            gddNS11.setEnabled(false);
                            gddS11.setEnabled(false);
                            nolNS11.setEnabled(false);
                            nolS11.setEnabled(false);

                            //Hide Radio Buttons & Text Boxes
                            gddNSrb11.setVisible(false);
                            gddSrb11.setVisible(false);
                            nolNSrb11.setVisible(false);
                            nolSrb11.setVisible(false);

                            gddNS11.setVisible(false);
                            gddS11.setVisible(false);
                            nolNS11.setVisible(false);
                            nolS11.setVisible(false);
                        }
                        break;
                    case 12:
                        if (LabelExists){
                            gsLabel12.setText(labelText[2]);
                            if (radioSelections == null){
                                gddNSrb12.setSelected(true);
                            }else{
                               if (radioSelections.get(12) == true){
                                   gddNSrb12.setSelected(true);
                               }else if (radioSelections.get(28) == true){
                                   gddSrb12.setSelected(true);
                               }else if (radioSelections.get(44) == true){
                                   nolNSrb12.setSelected(true);
                               }else if (radioSelections.get(60) == true){
                                   nolSrb12.setSelected(true);
                               }
                            }
                        }else{
                            gsLabel12.setEnabled(false);
                            gsLabel12.setVisible(false);

                             //Disable Radio Buttons & Text Boxes
                            gddNSrb12.getModel().setEnabled(false);
                            gddSrb12.getModel().setEnabled(false);
                            nolNSrb12.getModel().setEnabled(false);
                            nolSrb12.getModel().setEnabled(false);

                            gddNS12.setEnabled(false);
                            gddS12.setEnabled(false);
                            nolNS12.setEnabled(false);
                            nolS12.setEnabled(false);

                            //Hide Radio Buttons & Text Boxes
                            gddNSrb12.setVisible(false);
                            gddSrb12.setVisible(false);
                            nolNSrb12.setVisible(false);
                            nolSrb12.setVisible(false);

                            gddNS12.setVisible(false);
                            gddS12.setVisible(false);
                            nolNS12.setVisible(false);
                            nolS12.setVisible(false);
                        }
                        break;
                    case 13:
                        if (LabelExists){
                            gsLabel13.setText(labelText[2]);
                            if (radioSelections == null){
                                gddNSrb13.setSelected(true);
                            }else{
                               if (radioSelections.get(13) == true){
                                   gddNSrb13.setSelected(true);
                               }else if (radioSelections.get(29) == true){
                                   gddSrb13.setSelected(true);
                               }else if (radioSelections.get(45) == true){
                                   nolNSrb13.setSelected(true);
                               }else if (radioSelections.get(61) == true){
                                   nolSrb13.setSelected(true);
                               }
                            }
                        }else{
                            gsLabel13.setEnabled(false);
                            gsLabel13.setVisible(false);

                             //Disable Radio Buttons & Text Boxes
                            gddNSrb13.getModel().setEnabled(false);
                            gddSrb13.getModel().setEnabled(false);
                            nolNSrb13.getModel().setEnabled(false);
                            nolSrb13.getModel().setEnabled(false);

                            gddNS13.setEnabled(false);
                            gddS13.setEnabled(false);
                            nolNS13.setEnabled(false);
                            nolS13.setEnabled(false);

                            //Hide Radio Buttons & Text Boxes
                            gddNSrb13.setVisible(false);
                            gddSrb13.setVisible(false);
                            nolNSrb13.setVisible(false);
                            nolSrb13.setVisible(false);

                            gddNS13.setVisible(false);
                            gddS13.setVisible(false);
                            nolNS13.setVisible(false);
                            nolS13.setVisible(false);
                        }
                        break;
                    case 14:
                        if (LabelExists){
                            gsLabel14.setText(labelText[2]);
                            if (radioSelections == null){
                                gddNSrb14.setSelected(true);
                            }else{
                               if (radioSelections.get(14) == true){
                                   gddNSrb14.setSelected(true);
                               }else if (radioSelections.get(30) == true){
                                   gddSrb14.setSelected(true);
                               }else if (radioSelections.get(46) == true){
                                   nolNSrb14.setSelected(true);
                               }else if (radioSelections.get(62) == true){
                                   nolSrb14.setSelected(true);
                               }
                            }
                        }else{
                            gsLabel14.setEnabled(false);
                            gsLabel14.setVisible(false);

                             //Disable Radio Buttons & Text Boxes
                            gddNSrb14.getModel().setEnabled(false);
                            gddSrb14.getModel().setEnabled(false);
                            nolNSrb14.getModel().setEnabled(false);
                            nolSrb14.getModel().setEnabled(false);

                            gddNS14.setEnabled(false);
                            gddS14.setEnabled(false);
                            nolNS14.setEnabled(false);
                            nolS14.setEnabled(false);

                            //Hide Radio Buttons & Text Boxes
                            gddNSrb14.setVisible(false);
                            gddSrb14.setVisible(false);
                            nolNSrb14.setVisible(false);
                            nolSrb14.setVisible(false);

                            gddNS14.setVisible(false);
                            gddS14.setVisible(false);
                            nolNS14.setVisible(false);
                            nolS14.setVisible(false);
                        }
                        break;
                    case 15:
                        if (LabelExists){
                            gsLabel15.setText(labelText[2]);
                           if (radioSelections == null){
                                gddNSrb15.setSelected(true);
                            }else{
                               if (radioSelections.get(15) == true){
                                   gddNSrb15.setSelected(true);
                               }else if (radioSelections.get(31) == true){
                                   gddSrb15.setSelected(true);
                               }else if (radioSelections.get(47) == true){
                                   nolNSrb15.setSelected(true);
                               }else if (radioSelections.get(63) == true){
                                   nolSrb15.setSelected(true);
                               }
                            }
                        }else{
                            gsLabel15.setEnabled(false);
                            gsLabel15.setVisible(false);

                             //Disable Radio Buttons & Text Boxes
                            gddNSrb15.getModel().setEnabled(false);
                            gddSrb15.getModel().setEnabled(false);
                            nolNSrb15.getModel().setEnabled(false);
                            nolSrb15.getModel().setEnabled(false);

                            gddNS15.setEnabled(false);
                            gddS15.setEnabled(false);
                            nolNS15.setEnabled(false);
                            nolS15.setEnabled(false);

                            //Hide Radio Buttons & Text Boxes
                            gddNSrb15.setVisible(false);
                            gddSrb15.setVisible(false);
                            nolNSrb15.setVisible(false);
                            nolSrb15.setVisible(false);

                            gddNS15.setVisible(false);
                            gddS15.setVisible(false);
                            nolNS15.setVisible(false);
                            nolS15.setVisible(false);
                        }
                        break;
                    case 16:
                        if (LabelExists){
                            gsLabel16.setText(labelText[2]);
                        }else{
                            gsLabel16.setEnabled(false);
                            gsLabel16.setVisible(false);
                        }
                        break;
                    case 17:
                        if (LabelExists){
                            gsLabel17.setText(labelText[2]);
                        }else{
                            gsLabel17.setEnabled(false);
                            gsLabel17.setVisible(false);
                        }
                        break;
                    case 18:
                        if (LabelExists){
                            gsLabel18.setText(labelText[2]);
                        }else{
                            gsLabel18.setEnabled(false);
                            gsLabel18.setVisible(false);
                        }
                        break;
                    case 19:
                        if (LabelExists){
                            gsLabel19.setText(labelText[2]);
                        }else{
                            gsLabel19.setEnabled(false);
                            gsLabel19.setVisible(false);
                        }
                        break;
                }
            }

            z = crop.getGrowthStagesData().size()/4;

            for (int i = 0; i < z; i++){

                if (i == 0){

                        gddNS0.setText(crop.getGrowthStagesData().get(i).toString());

                        gddS0.setText(crop.getGrowthStagesData().get(i+z).toString());

                        nolNS0.setText(crop.getGrowthStagesData().get(i+(z*2)).toString());

                        nolS0.setText(crop.getGrowthStagesData().get(i+(z*3)).toString());
                }
                else if (i == 1){

                        gddNS1.setText(crop.getGrowthStagesData().get(i).toString());

                        gddS1.setText(crop.getGrowthStagesData().get(i+z).toString());

                        nolNS1.setText(crop.getGrowthStagesData().get(i+(z*2)).toString());

                        nolS1.setText(crop.getGrowthStagesData().get(i+(z*3)).toString());
                }
                else if (i == 2){

                        gddNS2.setText(crop.getGrowthStagesData().get(i).toString());

                        gddS2.setText(crop.getGrowthStagesData().get(i+z).toString());

                        nolNS2.setText(crop.getGrowthStagesData().get(i+(z*2)).toString());

                        nolS2.setText(crop.getGrowthStagesData().get(i+(z*3)).toString());
                }
                else if (i == 3){

                        gddNS3.setText(crop.getGrowthStagesData().get(i).toString());

                        gddS3.setText(crop.getGrowthStagesData().get(i+z).toString());

                        nolNS3.setText(crop.getGrowthStagesData().get(i+(z*2)).toString());

                        nolS3.setText(crop.getGrowthStagesData().get(i+(z*3)).toString());
                }
                else if (i == 4){

                        gddNS4.setText(crop.getGrowthStagesData().get(i).toString());

                        gddS4.setText(crop.getGrowthStagesData().get(i+z).toString());

                        nolNS4.setText(crop.getGrowthStagesData().get(i+(z*2)).toString());

                        nolS4.setText(crop.getGrowthStagesData().get(i+(z*3)).toString());
                }
                else if (i == 5){

                        gddNS5.setText(crop.getGrowthStagesData().get(i).toString());

                        gddS5.setText(crop.getGrowthStagesData().get(i+z).toString());

                        nolNS5.setText(crop.getGrowthStagesData().get(i+(z*2)).toString());

                        nolS5.setText(crop.getGrowthStagesData().get(i+(z*3)).toString());
                }
                else if (i == 6){

                        gddNS6.setText(crop.getGrowthStagesData().get(i).toString());

                        gddS6.setText(crop.getGrowthStagesData().get(i+z).toString());

                        nolNS6.setText(crop.getGrowthStagesData().get(i+(z*2)).toString());

                        nolS6.setText(crop.getGrowthStagesData().get(i+(z*3)).toString());
                }
                else if (i == 7){

                        gddNS7.setText(crop.getGrowthStagesData().get(i).toString());

                        gddS7.setText(crop.getGrowthStagesData().get(i+z).toString());

                        nolNS7.setText(crop.getGrowthStagesData().get(i+(z*2)).toString());

                        nolS7.setText(crop.getGrowthStagesData().get(i+(z*3)).toString());
                }
                else if (i == 8){

                        gddNS8.setText(crop.getGrowthStagesData().get(i).toString());

                        gddS8.setText(crop.getGrowthStagesData().get(i+z).toString());

                        nolNS8.setText(crop.getGrowthStagesData().get(i+(z*2)).toString());

                        nolS8.setText(crop.getGrowthStagesData().get(i+(z*3)).toString());
                }

                else if (i == 9){

                        gddNS9.setText(crop.getGrowthStagesData().get(i).toString());

                        gddS9.setText(crop.getGrowthStagesData().get(i+z).toString());

                        nolNS9.setText(crop.getGrowthStagesData().get(i+(z*2)).toString());

                        nolS9.setText(crop.getGrowthStagesData().get(i+(z*3)).toString());
                }            
                else if (i == 10){

                        gddNS10.setText(crop.getGrowthStagesData().get(i).toString());

                        gddS10.setText(crop.getGrowthStagesData().get(i+z).toString());

                        nolNS10.setText(crop.getGrowthStagesData().get(i+(z*2)).toString());

                        nolS10.setText(crop.getGrowthStagesData().get(i+(z*3)).toString());
                }            
                else if (i == 11){

                        gddNS11.setText(crop.getGrowthStagesData().get(i).toString());

                        gddS11.setText(crop.getGrowthStagesData().get(i+z).toString());

                        nolNS11.setText(crop.getGrowthStagesData().get(i+(z*2)).toString());

                        nolS11.setText(crop.getGrowthStagesData().get(i+(z*3)).toString());
                }

                else if (i == 12){

                        gddNS12.setText(crop.getGrowthStagesData().get(i).toString());

                        gddS12.setText(crop.getGrowthStagesData().get(i+z).toString());

                        nolNS12.setText(crop.getGrowthStagesData().get(i+(z*2)).toString());

                        nolS12.setText(crop.getGrowthStagesData().get(i+(z*3)).toString());
                }
                else if (i == 13){

                        gddNS13.setText(crop.getGrowthStagesData().get(i).toString());

                        gddS13.setText(crop.getGrowthStagesData().get(i+z).toString());

                        nolNS13.setText(crop.getGrowthStagesData().get(i+(z*2)).toString());

                        nolS13.setText(crop.getGrowthStagesData().get(i+(z*3)).toString());
                }
                else if (i == 14){

                        gddNS14.setText(crop.getGrowthStagesData().get(i).toString());

                        gddS14.setText(crop.getGrowthStagesData().get(i+z).toString());

                        nolNS14.setText(crop.getGrowthStagesData().get(i+(z*2)).toString());

                        nolS14.setText(crop.getGrowthStagesData().get(i+(z*3)).toString());
                }
                else if (i == 15){

                        gddNS15.setText(crop.getGrowthStagesData().get(i).toString());

                        gddS15.setText(crop.getGrowthStagesData().get(i+z).toString());

                        nolNS15.setText(crop.getGrowthStagesData().get(i+(z*2)).toString());

                        nolS15.setText(crop.getGrowthStagesData().get(i+(z*3)).toString());
                }
    //            else if (i == 15){
    //                if (crop.getGrowthStageSelection().get(15))
    //                    tb15.setText(crop.getGrowthStagesData().get(i).toString());
    //                if (crop.getGrowthStageSelection().get(31))
    //                    tb31.setText(crop.getGrowthStagesData().get(i+15).toString());
    //                if (crop.getGrowthStageSelection().get(47))
    //                    tb47.setText(crop.getGrowthStagesData().get(i+31).toString());
    //                if (crop.getGrowthStageSelection().get(64))
    //                    tb64.setText(crop.getGrowthStagesData().get(i+47).toString());
    //            }
    //            else if (i == 17){
    //                if (crop.getGrowthStageSelection().get(17))
    //                    tb.setText(crop.getGrowthStagesData().get(i).toString());
    //                if (crop.getGrowthStageSelection().get(33))
    //                    tb0.setText(crop.getGrowthStagesData().get(i+15).toString());
    //                if (crop.getGrowthStageSelection().get(49))
    //                    tb0.setText(crop.getGrowthStagesData().get(i+31).toString());
    //                if (crop.getGrowthStageSelection().get(65))
    //                    tb0.setText(crop.getGrowthStagesData().get(i+47).toString());
    //            }
    //            else if (i == 18){
    //                if (crop.getGrowthStageSelection().get(18))
    //                    tb0.setText(crop.getGrowthStagesData().get(i).toString());
    //                if (crop.getGrowthStageSelection().get(34))
    //                    tb0.setText(crop.getGrowthStagesData().get(i+15).toString());
    //                if (crop.getGrowthStageSelection().get(50))
    //                    tb0.setText(crop.getGrowthStagesData().get(i+31).toString());
    //                if (crop.getGrowthStageSelection().get(66))
    //                    tb0.setText(crop.getGrowthStagesData().get(i+47).toString());
    //            }
    //            else if (i == 19){
    //                if (crop.getGrowthStageSelection().get(19))
    //                    tb0.setText(crop.getGrowthStagesData().get(i).toString());
    //                if (crop.getGrowthStageSelection().get(35))
    //                    tb0.setText(crop.getGrowthStagesData().get(i+15).toString());
    //                if (crop.getGrowthStageSelection().get(51))
    //                    tb0.setText(crop.getGrowthStagesData().get(i+31).toString());
    //                if (crop.getGrowthStageSelection().get(68))
    //                    tb0.setText(crop.getGrowthStagesData().get(i+47).toString());
    //            }









    //            if (x == (crop.getGrowthStagesData().size()/4))
    //                z = 16;
    //            if (x == (crop.getGrowthStagesData().size()/4) * 2)
    //                z = 32;
    //            if (x == (crop.getGrowthStagesData().size()/4) * 3)
    //                z = 48;
    //            
    //            System.out.println(crop.getGrowthStagesData().get(x));
    //            
    //            if (z >= 0 && z <=15 ){
    //                if (!gsData.get(x).isEmpty() && z == 0)
    //                    tb0.setText(gsData.get(x));
    //                else if (!gsData.get(x).isEmpty() && z == 1)
    //                    tb1.setText(gsData.get(x));
    //                else if (!gsData.get(x).isEmpty() && z == 2)
    //                    tb2.setText(gsData.get(x));
    //                else if (!gsData.get(x).isEmpty() && z == 3)
    //                    tb3.setText(gsData.get(x));
    //                else if (!gsData.get(x).isEmpty() && z == 4)
    //                    tb4.setText(gsData.get(x));
    //                else if (!gsData.get(x).isEmpty() && z == 5)
    //                    tb5.setText(gsData.get(x));
    //                else if (!gsData.get(x).isEmpty() && z == 6)
    //                    tb6.setText(gsData.get(x));
    //                else if (!gsData.get(x).isEmpty() && z == 7)
    //                    tb7.setText(gsData.get(x));
    //                else if (!gsData.get(x).isEmpty() && z == 8)
    //                    tb8.setText(gsData.get(x));
    //                else if (!gsData.get(x).isEmpty() && z == 9)
    //                    tb9.setText(gsData.get(x));
    //                else if (!gsData.get(x).isEmpty() && z == 10)
    //                    tb10.setText(gsData.get(x));
    //                else if (!gsData.get(x).isEmpty() && z == 11)
    //                    tb11.setText(gsData.get(x));
    //                else if (!gsData.get(x).isEmpty() && z == 12)
    //                    tb12.setText(gsData.get(x));
    //                else if (!gsData.get(x).isEmpty() && z == 13)
    //                    tb13.setText(gsData.get(x));
    //                else if (!gsData.get(x).isEmpty() && z == 14)
    //                    tb14.setText(gsData.get(x));
    //                else if (!gsData.get(x).isEmpty() && z == 15)
    //                    tb15.setText(gsData.get(x));
    //            }
    //            if (z >=16 && z <= 31){
    //                if (!gsData.get(x).isEmpty() && z == 16)
    //                    tb16.setText(gsData.get(x));
    //                else if (!gsData.get(x).isEmpty() && z == 17)
    //                    tb17.setText(gsData.get(x));
    //                else if (!gsData.get(x).isEmpty() && z == 18)
    //                    tb18.setText(gsData.get(x));
    //                else if (!gsData.get(x).isEmpty() && z == 19)
    //                    tb19.setText(gsData.get(x));
    //                else if (!gsData.get(x).isEmpty() && z == 20)
    //                    tb20.setText(gsData.get(x));
    //                else if (!gsData.get(x).isEmpty() && z == 21)
    //                    tb21.setText(gsData.get(x));
    //                else if (!gsData.get(x).isEmpty() && z == 22)
    //                    tb22.setText(gsData.get(x));
    //                else if (!gsData.get(x).isEmpty() && z == 23)
    //                    tb23.setText(gsData.get(x));
    //                else if (!gsData.get(x).isEmpty() && z == 24)
    //                    tb24.setText(gsData.get(x));
    //                else if (!gsData.get(x).isEmpty() && z == 25)
    //                    tb25.setText(gsData.get(x));
    //                else if (!gsData.get(x).isEmpty() && z == 26)
    //                    tb26.setText(gsData.get(x));
    //                else if (!gsData.get(x).isEmpty() && z == 27)
    //                    tb27.setText(gsData.get(x));
    //                else if (!gsData.get(x).isEmpty() && z == 28)
    //                    tb28.setText(gsData.get(x));
    //                else if (!gsData.get(x).isEmpty() && z == 29)
    //                    tb29.setText(gsData.get(x));
    //                else if (!gsData.get(x).isEmpty() && z == 30)
    //                    tb30.setText(gsData.get(x));
    //                else if (!gsData.get(x).isEmpty() && z == 31)
    //                    tb31.setText(gsData.get(x));
    //            }
    //            if (z >= 32 && z <= 47){
    //                if (!gsData.get(x).isEmpty() && z == 32)
    //                    tb32.setText(gsData.get(x));
    //                else if (!gsData.get(x).isEmpty() && z == 33)
    //                    tb33.setText(gsData.get(x));
    //                else if (!gsData.get(x).isEmpty() && z == 34)
    //                    tb34.setText(gsData.get(x));
    //                else if (!gsData.get(x).isEmpty() && z == 35)
    //                    tb35.setText(gsData.get(x));
    //                else if (!gsData.get(x).isEmpty() && z == 36)
    //                    tb36.setText(gsData.get(x));
    //                else if (!gsData.get(x).isEmpty() && z == 37)
    //                    tb37.setText(gsData.get(x));
    //                else if (!gsData.get(x).isEmpty() && z == 38)
    //                    tb38.setText(gsData.get(x));
    //                else if (!gsData.get(x).isEmpty() && z == 39)
    //                    tb39.setText(gsData.get(x));
    //                else if (!gsData.get(x).isEmpty() && z == 40)
    //                    tb40.setText(gsData.get(x));
    //                else if (!gsData.get(x).isEmpty() && z == 41)
    //                    tb41.setText(gsData.get(x));
    //                else if (!gsData.get(x).isEmpty() && z == 42)
    //                    tb42.setText(gsData.get(x));
    //                else if (!gsData.get(x).isEmpty() && z == 43)
    //                    tb43.setText(gsData.get(x));
    //                else if (!gsData.get(x).isEmpty() && z == 44)
    //                    tb44.setText(gsData.get(x));
    //                else if (!gsData.get(x).isEmpty() && z == 45)
    //                    tb45.setText(gsData.get(x));
    //                else if (!gsData.get(x).isEmpty() && z == 46)
    //                    tb46.setText(gsData.get(x));
    //                else if (!gsData.get(x).isEmpty() && z == 47)
    //                    tb47.setText(gsData.get(x));
    //            }else if (z >= 48 && z <= 63){
    //                if (!gsData.get(x).isEmpty() && z == 48)
    //                    tb48.setText(gsData.get(x));
    //                else if (!gsData.get(x).isEmpty() && z == 49)
    //                    tb49.setText(gsData.get(x));
    //                else if (!gsData.get(x).isEmpty() && z == 50)
    //                    tb50.setText(gsData.get(x));
    //                else if (!gsData.get(x).isEmpty() && z == 51)
    //                    tb51.setText(gsData.get(x));
    //                else if (!gsData.get(x).isEmpty() && z == 52)
    //                    tb52.setText(gsData.get(x));
    //                else if (!gsData.get(x).isEmpty() && z == 53)
    //                    tb53.setText(gsData.get(x));
    //                else if (!gsData.get(x).isEmpty() && z == 54)
    //                    tb54.setText(gsData.get(x));
    //                else if (!gsData.get(x).isEmpty() && z == 55)
    //                    tb55.setText(gsData.get(x));
    //                else if (!gsData.get(x).isEmpty() && z == 56)
    //                    tb56.setText(gsData.get(x));
    //                else if (!gsData.get(x).isEmpty() && z == 57)
    //                    tb57.setText(gsData.get(x));
    //                else if (!gsData.get(x).isEmpty() && z == 58)
    //                    tb58.setText(gsData.get(x));
    //                else if (!gsData.get(x).isEmpty() && z == 59)
    //                    tb59.setText(gsData.get(x));
    //                else if (!gsData.get(x).isEmpty() && z == 60)
    //                    tb60.setText(gsData.get(x));
    //                else if (!gsData.get(x).isEmpty() && z == 61)
    //                    tb61.setText(gsData.get(x));
    //                else if (!gsData.get(x).isEmpty() && z == 62)
    //                    tb62.setText(gsData.get(x));
    //                else if (!gsData.get(x).isEmpty() && z == 63)
    //                    tb63.setText(gsData.get(x));
    //            }
    //            z++;
            }
        }else{
            noGrowthStageData();
        }
    }
    public void resetGrowthStages(){
        gsLabel0.setEnabled(true);
        gsLabel0.setVisible(true);
        gsLabel0.setText(null);
            gddNSrb0.getModel().setEnabled(true);
            gddSrb0.getModel().setEnabled(true);
            nolNSrb0.getModel().setEnabled(true);
            nolSrb0.getModel().setEnabled(true);

            gddNS0.setEnabled(true);
            gddS0.setEnabled(true);
            nolNS0.setEnabled(true);
            nolS0.setEnabled(true);

            //Show Radio Buttons & Text Boxes
            gddNSrb0.setVisible(true);
            gddSrb0.setVisible(true);
            nolNSrb0.setVisible(true);
            nolSrb0.setVisible(true);

            gddNS0.setVisible(true);
            gddS0.setVisible(true);
            nolNS0.setVisible(true);
            nolS0.setVisible(true);
        gsLabel1.setEnabled(true);
        gsLabel1.setVisible(true);
        gsLabel1.setText(null);
            gddNSrb1.getModel().setEnabled(true);
            gddSrb1.getModel().setEnabled(true);
            nolNSrb1.getModel().setEnabled(true);
            nolSrb1.getModel().setEnabled(true);

            gddNS1.setEnabled(true);
            gddS1.setEnabled(true);
            nolNS1.setEnabled(true);
            nolS1.setEnabled(true);

            //Show Radio Buttons & Text Boxes
            gddNSrb1.setVisible(true);
            gddSrb1.setVisible(true);
            nolNSrb1.setVisible(true);
            nolSrb1.setVisible(true);

            gddNS1.setVisible(true);
            gddS1.setVisible(true);
            nolNS1.setVisible(true);
            nolS1.setVisible(true);
        gsLabel2.setEnabled(true);
        gsLabel2.setVisible(true);
        gsLabel2.setText(null);
            gddNSrb2.getModel().setEnabled(true);
            gddSrb2.getModel().setEnabled(true);
            nolNSrb2.getModel().setEnabled(true);
            nolSrb2.getModel().setEnabled(true);

            gddNS2.setEnabled(true);
            gddS2.setEnabled(true);
            nolNS2.setEnabled(true);
            nolS2.setEnabled(true);

            //Show Radio Buttons & Text Boxes
            gddNSrb2.setVisible(true);
            gddSrb2.setVisible(true);
            nolNSrb2.setVisible(true);
            nolSrb2.setVisible(true);

            gddNS2.setVisible(true);
            gddS2.setVisible(true);
            nolNS2.setVisible(true);
            nolS2.setVisible(true);        
        gsLabel3.setEnabled(true);
        gsLabel3.setVisible(true);
        gsLabel3.setText(null);
            //Enable Radion Buttons and Text Boxes
            gddNSrb3.getModel().setEnabled(true);
            gddSrb3.getModel().setEnabled(true);
            nolNSrb3.getModel().setEnabled(true);
            nolSrb3.getModel().setEnabled(true);

            gddNS3.setEnabled(true);
            gddS3.setEnabled(true);
            nolNS3.setEnabled(true);
            nolS3.setEnabled(true);

            //Show Radio Buttons & Text Boxes
            gddNSrb3.setVisible(true);
            gddSrb3.setVisible(true);
            nolNSrb3.setVisible(true);
            nolSrb3.setVisible(true);

            gddNS3.setVisible(true);
            gddS3.setVisible(true);
            nolNS3.setVisible(true);
            nolS3.setVisible(true);                
        gsLabel4.setEnabled(true);
        gsLabel4.setVisible(true);
        gsLabel4.setText(null);
            //Enable Radion Buttons and Text Boxes
            gddNSrb4.getModel().setEnabled(true);
            gddSrb4.getModel().setEnabled(true);
            nolNSrb4.getModel().setEnabled(true);
            nolSrb4.getModel().setEnabled(true);

            gddNS4.setEnabled(true);
            gddS4.setEnabled(true);
            nolNS4.setEnabled(true);
            nolS4.setEnabled(true);

            //Show Radio Buttons & Text Boxes
            gddNSrb4.setVisible(true);
            gddSrb4.setVisible(true);
            nolNSrb4.setVisible(true);
            nolSrb4.setVisible(true);

            gddNS4.setVisible(true);
            gddS4.setVisible(true);
            nolNS4.setVisible(true);
            nolS4.setVisible(true);                
        gsLabel5.setEnabled(true);
        gsLabel5.setVisible(true);
        gsLabel5.setText(null);
            //Enable Radion Buttons and Text Boxes
            gddNSrb5.getModel().setEnabled(true);
            gddSrb5.getModel().setEnabled(true);
            nolNSrb5.getModel().setEnabled(true);
            nolSrb5.getModel().setEnabled(true);

            gddNS5.setEnabled(true);
            gddS5.setEnabled(true);
            nolNS5.setEnabled(true);
            nolS5.setEnabled(true);

            //Show Radio Buttons & Text Boxes
            gddNSrb5.setVisible(true);
            gddSrb5.setVisible(true);
            nolNSrb5.setVisible(true);
            nolSrb5.setVisible(true);

            gddNS5.setVisible(true);
            gddS5.setVisible(true);
            nolNS5.setVisible(true);
            nolS5.setVisible(true);
        gsLabel6.setEnabled(true);
        gsLabel6.setVisible(true);
        gsLabel6.setText(null);
            //Enable Radion Buttons and Text Boxes
            gddNSrb6.getModel().setEnabled(true);
            gddSrb6.getModel().setEnabled(true);
            nolNSrb6.getModel().setEnabled(true);
            nolSrb6.getModel().setEnabled(true);

            gddNS6.setEnabled(true);
            gddS6.setEnabled(true);
            nolNS6.setEnabled(true);
            nolS6.setEnabled(true);

            //Show Radio Buttons & Text Boxes
            gddNSrb6.setVisible(true);
            gddSrb6.setVisible(true);
            nolNSrb6.setVisible(true);
            nolSrb6.setVisible(true);

            gddNS6.setVisible(true);
            gddS6.setVisible(true);
            nolNS6.setVisible(true);
            nolS6.setVisible(true);
        gsLabel7.setEnabled(true);
        gsLabel7.setVisible(true);
        gsLabel7.setText(null);
            //Enable Radion Buttons and Text Boxes
            gddNSrb7.getModel().setEnabled(true);
            gddSrb7.getModel().setEnabled(true);
            nolNSrb7.getModel().setEnabled(true);
            nolSrb7.getModel().setEnabled(true);

            gddNS7.setEnabled(true);
            gddS7.setEnabled(true);
            nolNS7.setEnabled(true);
            nolS7.setEnabled(true);

            //Show Radio Buttons & Text Boxes
            gddNSrb7.setVisible(true);
            gddSrb7.setVisible(true);
            nolNSrb7.setVisible(true);
            nolSrb7.setVisible(true);

            gddNS7.setVisible(true);
            gddS7.setVisible(true);
            nolNS7.setVisible(true);
            nolS7.setVisible(true);        
        gsLabel8.setEnabled(true);
        gsLabel8.setVisible(true);
        gsLabel8.setText(null);
            //Enable Radion Buttons and Text Boxes
            gddNSrb8.getModel().setEnabled(true);
            gddSrb8.getModel().setEnabled(true);
            nolNSrb8.getModel().setEnabled(true);
            nolSrb8.getModel().setEnabled(true);

            gddNS8.setEnabled(true);
            gddS8.setEnabled(true);
            nolNS8.setEnabled(true);
            nolS8.setEnabled(true);

            //Show Radio Buttons & Text Boxes
            gddNSrb8.setVisible(true);
            gddSrb8.setVisible(true);
            nolNSrb8.setVisible(true);
            nolSrb8.setVisible(true);

            gddNS8.setVisible(true);
            gddS8.setVisible(true);
            nolNS8.setVisible(true);
            nolS8.setVisible(true);        
        gsLabel9.setEnabled(true);
        gsLabel9.setVisible(true);
        gsLabel9.setText(null);
            //Enable Radion Buttons and Text Boxes
            gddNSrb9.getModel().setEnabled(true);
            gddSrb9.getModel().setEnabled(true);
            nolNSrb9.getModel().setEnabled(true);
            nolSrb9.getModel().setEnabled(true);

            gddNS9.setEnabled(true);
            gddS9.setEnabled(true);
            nolNS9.setEnabled(true);
            nolS9.setEnabled(true);

            //Show Radio Buttons & Text Boxes
            gddNSrb9.setVisible(true);
            gddSrb9.setVisible(true);
            nolNSrb9.setVisible(true);
            nolSrb9.setVisible(true);

            gddNS9.setVisible(true);
            gddS9.setVisible(true);
            nolNS9.setVisible(true);
            nolS9.setVisible(true);        
        gsLabel10.setEnabled(true);
        gsLabel10.setVisible(true);
        gsLabel10.setText(null);
            //Enable Radion Buttons and Text Boxes
            gddNSrb10.getModel().setEnabled(true);
            gddSrb10.getModel().setEnabled(true);
            nolNSrb10.getModel().setEnabled(true);
            nolSrb10.getModel().setEnabled(true);

            gddNS10.setEnabled(true);
            gddS10.setEnabled(true);
            nolNS10.setEnabled(true);
            nolS10.setEnabled(true);

            //Show Radio Buttons & Text Boxes
            gddNSrb10.setVisible(true);
            gddSrb10.setVisible(true);
            nolNSrb10.setVisible(true);
            nolSrb10.setVisible(true);

            gddNS10.setVisible(true);
            gddS10.setVisible(true);
            nolNS10.setVisible(true);
            nolS10.setVisible(true);        
        gsLabel11.setEnabled(true);
        gsLabel11.setVisible(true);
        gsLabel11.setText(null);
            //Enable Radion Buttons and Text Boxes
            gddNSrb11.getModel().setEnabled(true);
            gddSrb11.getModel().setEnabled(true);
            nolNSrb11.getModel().setEnabled(true);
            nolSrb11.getModel().setEnabled(true);

            gddNS11.setEnabled(true);
            gddS11.setEnabled(true);
            nolNS11.setEnabled(true);
            nolS11.setEnabled(true);

            //Show Radio Buttons & Text Boxes
            gddNSrb11.setVisible(true);
            gddSrb11.setVisible(true);
            nolNSrb11.setVisible(true);
            nolSrb11.setVisible(true);

            gddNS11.setVisible(true);
            gddS11.setVisible(true);
            nolNS11.setVisible(true);
            nolS11.setVisible(true);        
        gsLabel12.setEnabled(true);
        gsLabel12.setVisible(true);
        gsLabel12.setText(null);
            //Enable Radion Buttons and Text Boxes
            gddNSrb12.getModel().setEnabled(true);
            gddSrb12.getModel().setEnabled(true);
            nolNSrb12.getModel().setEnabled(true);
            nolSrb12.getModel().setEnabled(true);

            gddNS12.setEnabled(true);
            gddS12.setEnabled(true);
            nolNS12.setEnabled(true);
            nolS12.setEnabled(true);

            //Show Radio Buttons & Text Boxes
            gddNSrb12.setVisible(true);
            gddSrb12.setVisible(true);
            nolNSrb12.setVisible(true);
            nolSrb12.setVisible(true);

            gddNS12.setVisible(true);
            gddS12.setVisible(true);
            nolNS12.setVisible(true);
            nolS12.setVisible(true);        
        gsLabel13.setEnabled(true);
        gsLabel13.setVisible(true);
        gsLabel13.setText(null);
            //Enable Radion Buttons and Text Boxes
            gddNSrb13.getModel().setEnabled(true);
            gddSrb13.getModel().setEnabled(true);
            nolNSrb13.getModel().setEnabled(true);
            nolSrb13.getModel().setEnabled(true);

            gddNS13.setEnabled(true);
            gddS13.setEnabled(true);
            nolNS13.setEnabled(true);
            nolS13.setEnabled(true);

            //Show Radio Buttons & Text Boxes
            gddNSrb13.setVisible(true);
            gddSrb13.setVisible(true);
            nolNSrb13.setVisible(true);
            nolSrb13.setVisible(true);

            gddNS13.setVisible(true);
            gddS13.setVisible(true);
            nolNS13.setVisible(true);
            nolS13.setVisible(true);
        gsLabel14.setEnabled(true);
        gsLabel14.setVisible(true);
        gsLabel14.setText(null);
        
            //Enable Radion Buttons and Text Boxes
            gddNSrb14.getModel().setEnabled(true);
            gddSrb14.getModel().setEnabled(true);
            nolNSrb14.getModel().setEnabled(true);
            nolSrb14.getModel().setEnabled(true);

            gddNS14.setEnabled(true);
            gddS14.setEnabled(true);
            nolNS14.setEnabled(true);
            nolS14.setEnabled(true);

            //Show Radio Buttons & Text Boxes
            gddNSrb14.setVisible(true);
            gddSrb14.setVisible(true);
            nolNSrb14.setVisible(true);
            nolSrb14.setVisible(true);

            gddNS14.setVisible(true);
            gddS14.setVisible(true);
            nolNS14.setVisible(true);
            nolS14.setVisible(true);        
        gsLabel15.setEnabled(true);
        gsLabel15.setVisible(true);
        gsLabel15.setText(null);
            //Enable Radion Buttons and Text Boxes
            gddNSrb15.getModel().setEnabled(true);
            gddSrb15.getModel().setEnabled(true);
            nolNSrb15.getModel().setEnabled(true);
            nolSrb15.getModel().setEnabled(true);

            gddNS15.setEnabled(true);
            gddS15.setEnabled(true);
            nolNS15.setEnabled(true);
            nolS15.setEnabled(true);

            //Show Radio Buttons & Text Boxes
            gddNSrb15.setVisible(true);
            gddSrb15.setVisible(true);
            nolNSrb15.setVisible(true);
            nolSrb15.setVisible(true);

            gddNS15.setVisible(true);
            gddS15.setVisible(true);
            nolNS15.setVisible(true);
            nolS15.setVisible(true);
        gsLabel16.setEnabled(true);
        gsLabel16.setVisible(true);
        gsLabel16.setText(null);
        gsLabel17.setEnabled(true);
        gsLabel17.setVisible(true);
        gsLabel17.setText(null);
        gsLabel18.setEnabled(true);
        gsLabel18.setVisible(true);
        gsLabel18.setText(null);
        gsLabel19.setEnabled(true);
        gsLabel19.setVisible(true);
        gsLabel19.setText(null);
    }
    private void noGrowthStageData(){
           //Unchecking Radio boxes
        gddNSrb0.setSelected(false);
        gddSrb0.setSelected(false);
        nolNSrb0.setSelected(false);
        nolSrb0.setSelected(false);

        gddNSrb1.setSelected(false);
        gddSrb1.setSelected(false);
        nolNSrb1.setSelected(false);
        nolSrb1.setSelected(false);

        gddNSrb2.setSelected(false);
        gddSrb2.setSelected(false);
        nolNSrb2.setSelected(false);
        nolSrb2.setSelected(false);
  
        gddNSrb3.setSelected(false);
        gddSrb3.setSelected(false);
        nolNSrb3.setSelected(false);
        nolSrb3.setSelected(false);

        gddNSrb4.setSelected(false);
        gddSrb4.setSelected(false);
        nolNSrb4.setSelected(false);
        nolSrb4.setSelected(false);

        gddNSrb5.setSelected(false);
        gddSrb5.setSelected(false);
        nolNSrb5.setSelected(false);
        nolSrb5.setSelected(false);

        gddNSrb6.setSelected(false);
        gddSrb6.setSelected(false);
        nolNSrb6.setSelected(false);
        nolSrb6.setSelected(false);

        gddNSrb7.setSelected(false);
        gddSrb7.setSelected(false);
        nolNSrb7.setSelected(false);
        nolSrb7.setSelected(false);

        gddNSrb8.setSelected(false);
        gddSrb8.setSelected(false);
        nolNSrb8.setSelected(false);
        nolSrb8.setSelected(false);

        gddNSrb9.setSelected(false);
        gddSrb9.setSelected(false);
        nolNSrb9.setSelected(false);
        nolSrb9.setSelected(false);

        gddNSrb10.setSelected(false);
        gddSrb10.setSelected(false);
        nolNSrb10.setSelected(false);
        nolSrb10.setSelected(false);

        gddNSrb11.setSelected(false);
        gddSrb11.setSelected(false);
        nolNSrb11.setSelected(false);
        nolSrb11.setSelected(false);

        gddNSrb12.setSelected(false);
        gddSrb12.setSelected(false);
        nolNSrb12.setSelected(false);
        nolSrb12.setSelected(false);
           
        gddNSrb13.setSelected(false);
        gddSrb13.setSelected(false);
        nolNSrb13.setSelected(false);
        nolSrb13.setSelected(false);
        
        gddNSrb14.setSelected(false);
        gddSrb14.setSelected(false);
        nolNSrb14.setSelected(false);
        nolSrb14.setSelected(false);
     
        gddNSrb15.setSelected(false);
        gddSrb15.setSelected(false);
        nolNSrb15.setSelected(false);
        nolSrb15.setSelected(false);
        
        gddNSrb0.setText(null);
        gddSrb0.setText(null);
        nolNSrb0.setText(null);
        nolSrb0.setText(null);
        
        gddNSrb0.setEnabled(false);
        gddSrb0.setEnabled(false);
        nolNSrb0.setEnabled(false);
        nolSrb0.setEnabled(false);
        
        gddNSrb1.setText(null);
        gddSrb1.setText(null);
        nolNSrb1.setText(null);
        nolSrb1.setText(null);
        
        gddNSrb1.setEnabled(false);
        gddSrb1.setEnabled(false);
        nolNSrb1.setEnabled(false);
        nolSrb1.setEnabled(false);
        
        gddNSrb2.setText(null);
        gddSrb2.setText(null);
        nolNSrb2.setText(null);
        nolSrb2.setText(null);
        
        gddNSrb2.setEnabled(false);
        gddSrb2.setEnabled(false);
        nolNSrb2.setEnabled(false);
        nolSrb2.setEnabled(false);
        
        gddNSrb3.setText(null);
        gddSrb3.setText(null);
        nolNSrb3.setText(null);
        nolSrb3.setText(null);
        
        gddNSrb3.setEnabled(false);
        gddSrb3.setEnabled(false);
        nolNSrb3.setEnabled(false);
        nolSrb3.setEnabled(false);
        
        gddNSrb4.setText(null);
        gddSrb4.setText(null);
        nolNSrb4.setText(null);
        nolSrb4.setText(null);
        
        gddNSrb4.setEnabled(false);
        gddSrb4.setEnabled(false);
        nolNSrb4.setEnabled(false);
        nolSrb4.setEnabled(false);
                
        gddNSrb5.setText(null);
        gddSrb5.setText(null);
        nolNSrb5.setText(null);
        nolSrb5.setText(null);
        
        gddNSrb5.setEnabled(false);
        gddSrb5.setEnabled(false);
        nolNSrb5.setEnabled(false);
        nolSrb5.setEnabled(false);
        
        gddNSrb6.setText(null);
        gddSrb6.setText(null);
        nolNSrb6.setText(null);
        nolSrb6.setText(null);
        
        gddNSrb6.setEnabled(false);
        gddSrb6.setEnabled(false);
        nolNSrb6.setEnabled(false);
        nolSrb6.setEnabled(false);
        
        gddNSrb7.setText(null);
        gddSrb7.setText(null);
        nolNSrb7.setText(null);
        nolSrb7.setText(null);
        
        gddNSrb7.setEnabled(false);
        gddSrb7.setEnabled(false);
        nolNSrb7.setEnabled(false);
        nolSrb7.setEnabled(false);
        
        gddNSrb8.setText(null);
        gddSrb8.setText(null);
        nolNSrb8.setText(null);
        nolSrb8.setText(null);
        
        gddNSrb8.setEnabled(false);
        gddSrb8.setEnabled(false);
        nolNSrb8.setEnabled(false);
        nolSrb8.setEnabled(false);
        
        gddNSrb9.setText(null);
        gddSrb9.setText(null);
        nolNSrb9.setText(null);
        nolSrb9.setText(null);
        
        gddNSrb9.setEnabled(false);
        gddSrb9.setEnabled(false);
        nolNSrb9.setEnabled(false);
        nolSrb9.setEnabled(false);
        
        gddNSrb10.setText(null);
        gddSrb10.setText(null);
        nolNSrb10.setText(null);
        nolSrb10.setText(null);
        
        gddNSrb10.setEnabled(false);
        gddSrb10.setEnabled(false);
        nolNSrb10.setEnabled(false);
        nolSrb10.setEnabled(false);
        
        gddNSrb11.setText(null);
        gddSrb11.setText(null);
        nolNSrb11.setText(null);
        nolSrb11.setText(null);
        
        gddNSrb11.setEnabled(false);
        gddSrb11.setEnabled(false);
        nolNSrb11.setEnabled(false);
        nolSrb11.setEnabled(false);
        
        gddNSrb12.setText(null);
        gddSrb12.setText(null);
        nolNSrb12.setText(null);
        nolSrb12.setText(null);
        
        gddNSrb12.setEnabled(false);
        gddSrb12.setEnabled(false);
        nolNSrb12.setEnabled(false);
        nolSrb12.setEnabled(false);
        
        gddNSrb13.setText(null);
        gddSrb13.setText(null);
        nolNSrb13.setText(null);
        nolSrb13.setText(null);
        
        gddNSrb13.setEnabled(false);
        gddSrb13.setEnabled(false);
        nolNSrb13.setEnabled(false);
        nolSrb13.setEnabled(false);
        
        gddNSrb14.setText(null);
        gddSrb14.setText(null);
        nolNSrb14.setText(null);
        nolSrb14.setText(null);
        
        gddNSrb14.setEnabled(false);
        gddSrb14.setEnabled(false);
        nolNSrb14.setEnabled(false);
        nolSrb14.setEnabled(false);
        
        gddNSrb15.setText(null);
        gddSrb15.setText(null);
        nolNSrb15.setText(null);
        nolSrb15.setText(null);
        
        gddNSrb15.setEnabled(false);
        gddSrb15.setEnabled(false);
        nolNSrb15.setEnabled(false);
        nolSrb15.setEnabled(false);
        
        
        // Clearing Text Boxes
        gddNS0.setText(null);
        gddS0.setText(null);
        nolNS0.setText(null);
        nolS0.setText(null);
        
        gddNS0.setEnabled(false);
        gddS0.setEnabled(false);
        nolNS0.setEnabled(false);
        nolS0.setEnabled(false);
        
        gddNS1.setText(null);
        gddS1.setText(null);
        nolNS1.setText(null);
        nolS1.setText(null);
        
        gddNS1.setEnabled(false);
        gddS1.setEnabled(false);
        nolNS1.setEnabled(false);
        nolS1.setEnabled(false);
        
        gddNS2.setText(null);
        gddS2.setText(null);
        nolNS2.setText(null);
        nolS2.setText(null);
        
        gddNS2.setEnabled(false);
        gddS2.setEnabled(false);
        nolNS2.setEnabled(false);
        nolS2.setEnabled(false);
        
        gddNS3.setText(null);
        gddS3.setText(null);
        nolNS3.setText(null);
        nolS3.setText(null);
        
        gddNS3.setEnabled(false);
        gddS3.setEnabled(false);
        nolNS3.setEnabled(false);
        nolS3.setEnabled(false);
        
        gddNS4.setText(null);
        gddS4.setText(null);
        nolNS4.setText(null);
        nolS4.setText(null);
        
        gddNS4.setEnabled(false);
        gddS4.setEnabled(false);
        nolNS4.setEnabled(false);
        nolS4.setEnabled(false);
                
        gddNS5.setText(null);
        gddS5.setText(null);
        nolNS5.setText(null);
        nolS5.setText(null);
        
        gddNS5.setEnabled(false);
        gddS5.setEnabled(false);
        nolNS5.setEnabled(false);
        nolS5.setEnabled(false);
        
        gddNS6.setText(null);
        gddS6.setText(null);
        nolNS6.setText(null);
        nolS6.setText(null);
        
        gddNS6.setEnabled(false);
        gddS6.setEnabled(false);
        nolNS6.setEnabled(false);
        nolS6.setEnabled(false);
        
        gddNS7.setText(null);
        gddS7.setText(null);
        nolNS7.setText(null);
        nolS7.setText(null);
        
        gddNS7.setEnabled(false);
        gddS7.setEnabled(false);
        nolNS7.setEnabled(false);
        nolS7.setEnabled(false);
        
        gddNS8.setText(null);
        gddS8.setText(null);
        nolNS8.setText(null);
        nolS8.setText(null);
        
        gddNS8.setEnabled(false);
        gddS8.setEnabled(false);
        nolNS8.setEnabled(false);
        nolS8.setEnabled(false);
        
        gddNS9.setText(null);
        gddS9.setText(null);
        nolNS9.setText(null);
        nolS9.setText(null);
        
        gddNS9.setEnabled(false);
        gddS9.setEnabled(false);
        nolNS9.setEnabled(false);
        nolS9.setEnabled(false);
        
        gddNS10.setText(null);
        gddS10.setText(null);
        nolNS10.setText(null);
        nolS10.setText(null);
        
        gddNS10.setEnabled(false);
        gddS10.setEnabled(false);
        nolNS10.setEnabled(false);
        nolS10.setEnabled(false);
        
        gddNS11.setText(null);
        gddS11.setText(null);
        nolNS11.setText(null);
        nolS11.setText(null);
        
        gddNS11.setEnabled(false);
        gddS11.setEnabled(false);
        nolNS11.setEnabled(false);
        nolS11.setEnabled(false);
        
        gddNS12.setText(null);
        gddS12.setText(null);
        nolNS12.setText(null);
        nolS12.setText(null);
        
        gddNS12.setEnabled(false);
        gddS12.setEnabled(false);
        nolNS12.setEnabled(false);
        nolS12.setEnabled(false);
        
        gddNS13.setText(null);
        gddS13.setText(null);
        nolNS13.setText(null);
        nolS13.setText(null);
        
        gddNS13.setEnabled(false);
        gddS13.setEnabled(false);
        nolNS13.setEnabled(false);
        nolS13.setEnabled(false);
        
        gddNS14.setText(null);
        gddS14.setText(null);
        nolNS14.setText(null);
        nolS14.setText(null);
        
        gddNS14.setEnabled(false);
        gddS14.setEnabled(false);
        nolNS14.setEnabled(false);
        nolS14.setEnabled(false);
        
        gddNS15.setText(null);
        gddS15.setText(null);
        nolNS15.setText(null);
        nolS15.setText(null);
        
        gddNS15.setEnabled(false);
        gddS15.setEnabled(false);
        nolNS15.setEnabled(false);
        nolS15.setEnabled(false);
        
            
    }
    
    private void findSelectedRadioButtons(){
        SelectedRadioButtons.clear();
        for(int i = 0; i < 64; i++){
            
            if (i == 0)
                if (!gddNSrb0.isEnabled() || !gddNSrb0.isSelected() || !gddNSrb0.isVisible())
                  SelectedRadioButtons.add(false);
                else
                    SelectedRadioButtons.add(true);
            else if (i == 1)
                if (!gddNSrb1.isEnabled() || !gddNSrb1.isSelected() || !gddNSrb1.isVisible())
                    SelectedRadioButtons.add(false);
                else 
                    SelectedRadioButtons.add(true);
            else if (i == 2)
                if (!gddNSrb2.isEnabled() || !gddNSrb2.isSelected() || !gddNSrb2.isVisible())
                    SelectedRadioButtons.add(false);
                else
                    SelectedRadioButtons.add(true);
            else if (i == 3)
                if (!gddNSrb3.isEnabled() || !gddNSrb3.isSelected() || !gddNSrb3.isVisible())
                    SelectedRadioButtons.add(false);
                else
                    SelectedRadioButtons.add(true);
            else if (i == 4)
                if (!gddNSrb4.isEnabled() || !gddNSrb4.isSelected() || !gddNSrb4.isVisible())
                    SelectedRadioButtons.add(false);
                else
                    SelectedRadioButtons.add(true);
            else if (i == 5)
                if (!gddNSrb5.isEnabled() || !gddNSrb5.isSelected() || !gddNSrb5.isVisible())
                    SelectedRadioButtons.add(false);
                else
                    SelectedRadioButtons.add(true);
            else if (i == 6)
                if (!gddNSrb6.isEnabled() || !gddNSrb6.isSelected() || !gddNSrb6.isVisible())
                    SelectedRadioButtons.add(false);
                else
                    SelectedRadioButtons.add(true);
            else if (i == 7)
                if (!gddNSrb7.isEnabled() || !gddNSrb7.isSelected() || !gddNSrb7.isVisible())
                    SelectedRadioButtons.add(false);
                else
                    SelectedRadioButtons.add(true);
            else if (i == 8)
                if (!gddNSrb8.isEnabled() || !gddNSrb8.isSelected() || !gddNSrb8.isVisible())
                    SelectedRadioButtons.add(false);
                else
                    SelectedRadioButtons.add(true);
            else if (i == 9)
                if (!gddNSrb9.isEnabled() || !gddNSrb9.isSelected() || !gddNSrb9.isVisible())
                    SelectedRadioButtons.add(false);
                else
                    SelectedRadioButtons.add(true);
            else if (i == 10)
                if (!gddNSrb10.isEnabled() || !gddNSrb10.isSelected() || !gddNSrb10.isVisible())
                    SelectedRadioButtons.add(false);
                else
                    SelectedRadioButtons.add(true);
            else if (i == 11)
                if (!gddNSrb11.isEnabled() || !gddNSrb11.isSelected() || !gddNSrb11.isVisible())
                    SelectedRadioButtons.add(false);
                else
                    SelectedRadioButtons.add(true);
            else if (i == 12)
                if (!gddNSrb12.isEnabled() || !gddNSrb12.isSelected() || !gddNSrb12.isVisible())
                    SelectedRadioButtons.add(false);
                else
                    SelectedRadioButtons.add(true);
            else if (i == 13)
                if (!gddNSrb13.isEnabled() || !gddNSrb13.isSelected() || !gddNSrb13.isVisible())
                    SelectedRadioButtons.add(false);
                else
                    SelectedRadioButtons.add(true);
            else if (i == 14)
                if (!gddNSrb14.isEnabled() || !gddNSrb14.isSelected() || !gddNSrb14.isVisible())
                    SelectedRadioButtons.add(false);
                else
                    SelectedRadioButtons.add(true);
            else if (i == 15)
                if (!gddNSrb15.isEnabled() || !gddNSrb15.isSelected() || !gddNSrb15.isVisible())
                    SelectedRadioButtons.add(false);
                else 
                    SelectedRadioButtons.add(true);
            else if (i == 16)
                if (!gddSrb0.isEnabled() || !gddSrb0.isSelected() || !gddSrb0.isVisible())
                    SelectedRadioButtons.add(false);
                else
                    SelectedRadioButtons.add(true);
            else if (i == 17)
                if (!gddSrb1.isEnabled() || !gddSrb1.isSelected() || !gddSrb1.isVisible())
                    SelectedRadioButtons.add(false);
                else
                    SelectedRadioButtons.add(true);
            else if (i == 18)
                if (!gddSrb2.isEnabled() || !gddSrb2.isSelected() || !gddSrb2.isVisible())
                    SelectedRadioButtons.add(false);
                else
                    SelectedRadioButtons.add(true);
            else if (i == 19)
                if (!gddSrb3.isEnabled() || !gddSrb3.isSelected() || !gddSrb3.isVisible())
                    SelectedRadioButtons.add(false);
                else
                    SelectedRadioButtons.add(true);
            else if (i == 20)
                if (!gddSrb4.isEnabled() || !gddSrb4.isSelected() || !gddSrb4.isVisible())
                    SelectedRadioButtons.add(false);
                else 
                    SelectedRadioButtons.add(true);
            else if (i == 21)
                if (!gddSrb5.isEnabled() || !gddSrb5.isSelected() || !gddSrb5.isVisible())
                    SelectedRadioButtons.add(false);
                else
                    SelectedRadioButtons.add(true);
            else if (i == 22)
                if (!gddSrb6.isEnabled() || !gddSrb6.isSelected() || !gddSrb6.isVisible())
                    SelectedRadioButtons.add(false);
                else
                    SelectedRadioButtons.add(true);
            else if (i == 23)
                if (!gddSrb7.isEnabled() || !gddSrb7.isSelected() || !gddSrb7.isVisible())
                    SelectedRadioButtons.add(false);
                else
                    SelectedRadioButtons.add(true);
            else if (i == 24)
                if (!gddSrb8.isEnabled() || !gddSrb8.isSelected() || !gddSrb8.isVisible())
                    SelectedRadioButtons.add(false);
                else
                    SelectedRadioButtons.add(true);
            else if (i == 25)
                if (!gddSrb9.isEnabled() || !gddSrb9.isSelected() || !gddSrb9.isVisible())
                    SelectedRadioButtons.add(false);
                else
                    SelectedRadioButtons.add(true);
            else if (i == 26)
                if (!gddSrb10.isEnabled() || !gddSrb10.isSelected() || !gddSrb10.isVisible())
                    SelectedRadioButtons.add(false);
                else
                    SelectedRadioButtons.add(true);
            else if (i == 27)
                if (!gddSrb11.isEnabled() || !gddSrb11.isSelected() || !gddSrb11.isVisible())
                    SelectedRadioButtons.add(false);
                else
                    SelectedRadioButtons.add(true);
            else if (i == 28)
                if (!gddSrb12.isEnabled() || !gddSrb12.isSelected() || !gddSrb12.isVisible())
                    SelectedRadioButtons.add(false);
                else
                    SelectedRadioButtons.add(true);
            else if (i == 29)
                if (!gddSrb13.isEnabled() || !gddSrb13.isSelected() || !gddSrb13.isVisible())
                    SelectedRadioButtons.add(false);
                else
                    SelectedRadioButtons.add(true);
            else if (i == 30)
                if (!gddSrb14.isEnabled() || !gddSrb14.isSelected() || !gddSrb14.isVisible())
                    SelectedRadioButtons.add(false);
                else 
                    SelectedRadioButtons.add(true);
            else if (i == 31)
                if (!gddSrb15.isEnabled() || !gddSrb15.isSelected() || !gddSrb15.isVisible())
                      SelectedRadioButtons.add(false);
                else
                    SelectedRadioButtons.add(true);
            else if (i == 32)
                if (!nolNSrb0.isEnabled() || !nolNSrb0.isSelected() || !nolNSrb0.isVisible())
                    SelectedRadioButtons.add(false);
                else
                    SelectedRadioButtons.add(true);
            else if (i == 33)
                if (!nolNSrb1.isEnabled() || !nolNSrb1.isSelected() || !nolNSrb1.isVisible())
                    SelectedRadioButtons.add(false);
                else
                    SelectedRadioButtons.add(true);
            else if (i == 34)
                if (!nolNSrb2.isEnabled() || !nolNSrb2.isSelected() || !nolNSrb2.isVisible())
                    SelectedRadioButtons.add(false);
                else
                    SelectedRadioButtons.add(true);
            else if (i == 35)
                if (!nolNSrb3.isEnabled() || !nolNSrb3.isSelected() || !nolNSrb3.isVisible())
                    SelectedRadioButtons.add(false);
                else
                    SelectedRadioButtons.add(true);
            else if (i == 36)
                if (!nolNSrb4.isEnabled() || !nolNSrb4.isSelected() || !nolNSrb4.isVisible())
                    SelectedRadioButtons.add(false);
                else
                    SelectedRadioButtons.add(true);
            else if (i == 37)
                if (!nolNSrb5.isEnabled() || !nolNSrb5.isSelected() || !nolNSrb5.isVisible())
                    SelectedRadioButtons.add(false);
                else
                    SelectedRadioButtons.add(true);
            else if (i == 38)
                if (!nolNSrb6.isEnabled() || !nolNSrb6.isSelected() || !nolNSrb6.isVisible())
                    SelectedRadioButtons.add(false);
                else
                    SelectedRadioButtons.add(true);
            else if (i == 39)
                if (!nolNSrb7.isEnabled() || !nolNSrb7.isSelected() || !nolNSrb7.isVisible())
                    SelectedRadioButtons.add(false);
                else
                    SelectedRadioButtons.add(true);
            else if (i == 40)
                if (!nolNSrb8.isEnabled() || !nolNSrb8.isSelected() || !nolNSrb8.isVisible())
                    SelectedRadioButtons.add(false);
                else 
                    SelectedRadioButtons.add(true);
            else if (i == 41)
                if (!nolNSrb9.isEnabled() || !nolNSrb9.isSelected() || !nolNSrb9.isVisible())
                    SelectedRadioButtons.add(false);
                else
                    SelectedRadioButtons.add(true);
            else if (i == 42)
                if (!nolNSrb10.isEnabled() || !nolNSrb10.isSelected() || !nolNSrb10.isVisible())
                    SelectedRadioButtons.add(false);
                else
                    SelectedRadioButtons.add(true);
            else if (i == 43)
                if (!nolNSrb11.isEnabled() || !nolNSrb11.isSelected() || !nolNSrb11.isVisible())
                    SelectedRadioButtons.add(false);
                else
                    SelectedRadioButtons.add(true);
            else if (i == 44)
                if (!nolNSrb12.isEnabled() || !nolNSrb12.isSelected() || !nolNSrb12.isVisible())
                    SelectedRadioButtons.add(false);
                else
                    SelectedRadioButtons.add(true);
            else if (i == 45)
                if (!nolNSrb13.isEnabled() || !nolNSrb13.isSelected() || !nolNSrb13.isVisible())
                     SelectedRadioButtons.add(false);
                else
                    SelectedRadioButtons.add(true);
            else if (i == 46)
                if (!nolNSrb14.isEnabled() || !nolNSrb14.isSelected() || !nolNSrb14.isVisible())
                    SelectedRadioButtons.add(false);
                else
                    SelectedRadioButtons.add(true);
            else if (i == 47)
                if (!nolNSrb15.isEnabled() || !nolNSrb15.isSelected() || !nolNSrb15.isVisible())
                    SelectedRadioButtons.add(false);
                else
                    SelectedRadioButtons.add(true);
            else if (i == 48)
                if (!nolSrb0.isEnabled() || !nolSrb0.isSelected() || !nolSrb0.isVisible())
                    SelectedRadioButtons.add(false);
                else
                    SelectedRadioButtons.add(true);
            else if (i == 49)
                if (!nolSrb1.isEnabled() || !nolSrb1.isSelected() || !nolSrb1.isVisible())
                    SelectedRadioButtons.add(false);
                else
                    SelectedRadioButtons.add(true);
            else if (i == 50)
                if (!nolSrb2.isEnabled() || !nolSrb2.isSelected() || !nolSrb2.isVisible())
                    SelectedRadioButtons.add(false);
                else
                    SelectedRadioButtons.add(true);
            else if (i == 51)
                if (!nolSrb3.isEnabled() || !nolSrb3.isSelected() || !nolSrb3.isVisible())
                    SelectedRadioButtons.add(false);
                else
                    SelectedRadioButtons.add(true);
            else if (i == 52)
                if (!nolSrb4.isEnabled() || !nolSrb4.isSelected() || !nolSrb4.isVisible())
                    SelectedRadioButtons.add(false);
                else
                    SelectedRadioButtons.add(true);
            else if (i == 53)
                if (!nolSrb5.isEnabled() || !nolSrb5.isSelected() || !nolSrb5.isVisible())
                    SelectedRadioButtons.add(false);
                else
                    SelectedRadioButtons.add(true);
            else if (i == 54)
                if (!nolSrb6.isEnabled() || !nolSrb6.isSelected() || !nolSrb6.isVisible())
                    SelectedRadioButtons.add(false);
                else
                    SelectedRadioButtons.add(true);
            else if (i == 55)
                if (!nolSrb7.isEnabled() || !nolSrb7.isSelected() || !nolSrb7.isVisible())
                    SelectedRadioButtons.add(false);
                else
                    SelectedRadioButtons.add(true);
            else if (i == 56)
                if (!nolSrb8.isEnabled() || !nolSrb8.isSelected() || !nolSrb8.isVisible())
                    SelectedRadioButtons.add(false);
                else
                    SelectedRadioButtons.add(true);
            else if (i == 57)
                if (!nolSrb9.isEnabled() || !nolSrb9.isSelected() || !nolSrb9.isVisible())
                    SelectedRadioButtons.add(false);
                else
                    SelectedRadioButtons.add(true);
            else if (i == 58)
                if (!nolSrb10.isEnabled() || !nolSrb10.isSelected() || !nolSrb10.isVisible())
                    SelectedRadioButtons.add(false);
                else
                    SelectedRadioButtons.add(true);
            else if (i == 59)
                if (!nolSrb11.isEnabled() || !nolSrb11.isSelected() || !nolSrb11.isVisible())
                    SelectedRadioButtons.add(false);
                else
                    SelectedRadioButtons.add(true);
            else if (i == 60)
                if (!nolSrb12.isEnabled() || !nolSrb12.isSelected() || !nolSrb12.isVisible())
                    SelectedRadioButtons.add(false);
                else 
                    SelectedRadioButtons.add(true);
            else if (i == 61)
                if (!nolSrb13.isEnabled() || !nolSrb13.isSelected() || !nolSrb13.isVisible())
                    SelectedRadioButtons.add(false);
                else
                    SelectedRadioButtons.add(true);
            else if (i == 62)
                if (!nolSrb14.isEnabled() || !nolSrb14.isSelected() || !nolSrb14.isVisible())
                    SelectedRadioButtons.add(false);
                else
                    SelectedRadioButtons.add(true);
            else if (i == 63)
                if (!nolSrb15.isEnabled() || !nolSrb15.isSelected() || !nolSrb15.isVisible())
                    SelectedRadioButtons.add(false);
                else
                    SelectedRadioButtons.add(true);
            
            /**************************************
             * The commented code below will be used
             * when they are ready to go to 20
             * variable.
             **************************************/
//            else if (i == 64)
//                if (!rb64.isEnabled() || !rb64.isSelected() || !rb64.isVisible() || rb0.isDisplayable() || rb0.isShowing())
//                    SelectedRadioButtons.add(false);
//                else
//                    SelectedRadioButtons.add(true);
//            else if (i == 65)
//                if (!rb65.isEnabled() || !rb65.isSelected() || !rb65.isVisible() || rb0.isDisplayable() || rb0.isShowing())
//                  SelectedRadioButtons.add(false);
//                else 
//                    SelectedRadioButtons.add(true);
//            else if (i == 66)
//                if (!rb66.isEnabled() || !rb66.isSelected() || !rb66.isVisible() || rb0.isDisplayable() || rb0.isShowing())
//                    SelectedRadioButtons.add(false);
//                else 
//                    SelectedRadioButtons.add(true);
//            else if (i == 67)
//                if (!rb67.isEnabled() || !rb67.isSelected() || !rb67.isVisible() || rb0.isDisplayable() || rb0.isShowing())
//                    SelectedRadioButtons.add(false);
//                else
//                    SelectedRadioButtons.add(true);
//            else if (i == 68)
//                if (!rb68.isEnabled() || !rb68.isSelected() || !rb68.isVisible() || rb0.isDisplayable() || rb0.isShowing())
//                    SelectedRadioButtons.add(false);
//                else 
//                    SelectedRadioButtons.add(true);
//            else if (i == 69)
//                if (!rb69.isEnabled() || !rb69.isSelected() || !rb69.isVisible() || rb0.isDisplayable() || rb0.isShowing())
//                    SelectedRadioButtons.add(false);
//                else
//                    SelectedRadioButtons.add(true);
//            else if (i == 70)
//              if (!rb70.isEnabled() || !rb70.isSelected() || !rb70.isVisible() || rb0.isDisplayable() || rb0.isShowing())
//                    SelectedRadioButtons.add(false);
//                else
//                  SelectedRadioButtons.add(true);
//            else if (i == 71)
//                if (!rb71.isEnabled() || !rb71.isSelected() || !rb71.isVisible() || rb0.isDisplayable() || rb0.isShowing())
//                    SelectedRadioButtons.add(false);
//                else
//                    SelectedRadioButtons.add(true);
//            else if (i == 72)
//                if (!rb72.isEnabled() || !rb72.isSelected() || !rb72.isVisible() || rb0.isDisplayable() || rb0.isShowing())
//                    SelectedRadioButtons.add(false);
//                else
//                    SelectedRadioButtons.add(true);
//            else if (i == 73)
//                if (!rb73.isEnabled() || !rb73.isSelected() || !rb73.isVisible() || rb0.isDisplayable() || rb0.isShowing())
//                    SelectedRadioButtons.add(false);
//                else
//                    SelectedRadioButtons.add(true);
//            else if (i == 74)
//                if (!rb74.isEnabled() || !rb74.isSelected() || !rb74.isVisible() || rb0.isDisplayable() || rb0.isShowing())
//                    SelectedRadioButtons.add(false);
//                else
//                    SelectedRadioButtons.add(true);
//            else if (i == 75)
//                if (!rb75.isEnabled() || !rb75.isSelected() || !rb75.isVisible() || rb0.isDisplayable() || rb0.isShowing())
//                    SelectedRadioButtons.add(false);
//                else
//                    SelectedRadioButtons.add(true);
//            else if (i == 76)
//                if (!rb76.isEnabled() || !rb76.isSelected() || !rb76.isVisible() || rb0.isDisplayable() || rb0.isShowing())
//                    SelectedRadioButtons.add(false);
//                else
//                    SelectedRadioButtons.add(true);
//            else if (i == 77)
//                if (!rb77.isEnabled() || !rb77.isSelected() || !rb77.isVisible() || rb0.isDisplayable() || rb0.isShowing())
//                    SelectedRadioButtons.add(false);
//                else
//                    SelectedRadioButtons.add(true);
//            else if (i == 78)
//                if (!rb78.isEnabled() || !rb78.isSelected() || !rb78.isVisible() || rb0.isDisplayable() || rb0.isShowing())
//                    SelectedRadioButtons.add(false);
//                else
//                    SelectedRadioButtons.add(true);
//            else if (i == 79)
//                if (!rb79.isEnabled() || !rb79.isSelected() || !rb79.isVisible() || rb0.isDisplayable() || rb0.isShowing())
//                    SelectedRadioButtons.add(false);
//                else 
//                    SelectedRadioButtons.add(true);
        }
    }
    /*
    *   There is extra data in the headers information.
    */
    public void removeDataFromColumnHeaders(){
     
        //Retrieving CanopyHt, P1D, and P1DT, and removing the elements at the same time
//        crop.setCanopyHt(ColumnHeaders.get(ColumnHeaders.size()-10));
        ColumnHeaders.remove(ColumnHeaders.size()-1);
//        crop.setPhotoPeriod1(ColumnHeaders.get(ColumnHeaders.size()-10));
        ColumnHeaders.remove(ColumnHeaders.size()-1);
//        crop.setPhotoPeriod2(ColumnHeaders.get(ColumnHeaders.size()-10));
        ColumnHeaders.remove(ColumnHeaders.size()-1);
        
        //Retrieving the 6 values for Vernalization
//        CropSpecific_VT[0] = ColumnHeaders.get(ColumnHeaders.size()-10);
//        CropSpecific_VT[1] = ColumnHeaders.get(ColumnHeaders.size()-9);
//        CropSpecific_VT[2] = ColumnHeaders.get(ColumnHeaders.size()-8);
//        CropSpecific_VT[3] = ColumnHeaders.get(ColumnHeaders.size()-7);
//        CropSpecific_VT[4] = ColumnHeaders.get(ColumnHeaders.size()-6);
//        CropSpecific_VT[5] = ColumnHeaders.get(ColumnHeaders.size()-5);

        //Deleting the 6 values for Vernalization
        ColumnHeaders.remove(ColumnHeaders.size()-1);
        ColumnHeaders.remove(ColumnHeaders.size()-1);
        ColumnHeaders.remove(ColumnHeaders.size()-1);
        ColumnHeaders.remove(ColumnHeaders.size()-1);
        ColumnHeaders.remove(ColumnHeaders.size()-1);
        ColumnHeaders.remove(ColumnHeaders.size()-1);
        ColumnHeaders.remove(ColumnHeaders.size()-1);
    }

    
    
    public String PopulateCropTypeDropDown(){
        try{
            CropType = cDB.readOneColumnFromDB(baseDirectory, "_CropTypes", "CropType", 0);
        }catch(SQLException ex){
            JOptionPane.showMessageDialog(rootPane, "Error 101.1: Unable to Read Row from Crops Database", "Database Error", JOptionPane.ERROR_MESSAGE);
        }
        
        //Populating CropType on Startup
        loading = true;
        Iterator itr = CropType.iterator();
        while (itr.hasNext()){
             try{
                 cropType.addItem(itr.next().toString());
             }catch(NullPointerException ex){
                JOptionPane.showMessageDialog(rootPane, "Error 900.1: Null Pointer Exceptions", "Field Error", JOptionPane.ERROR_MESSAGE);
             }
            
        }
        
        //Populating Planting information
        PopulateNewPlantingInformation();
       
        //Get the the Variety Column names, so we can search on it base on that table.
        String column = CropType.get(1).substring(0, CropType.get(1).length()-1);

        return column;
    }
    public void PopulateNewPlantingInformation(){
        try {
            CropType = cDB.readOneRowFromDB(baseDirectory, "_CropTypes","CropType", (String)cropType.getSelectedItem());
        } catch (IOException | SQLException ex) {
            Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(rootPane, "Error 100.1: Unable to Read Row from Crops Database", "Database Connectivity Error", JOptionPane.ERROR_MESSAGE);
        }

        if (!CropType.isEmpty()){
            try{
                PopulatePlantingInformation(CropType);
            }catch(Exception e){
                JOptionPane.showMessageDialog(rootPane, "Error 300.1: Unable to Populate Planting Information", "Database Connectivity Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    public void PopulateCropVarietyDropDown(String column, int sort){
        try {
            CropVariety = cDB.readOneColumnFromDB(baseDirectory, CropType.get(1), column, sort);
        } catch (SQLException ex) {
            Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(rootPane, "Error 101.2: Unable to retrieve Column of Data from crops database", "Database Connectivity Error", JOptionPane.ERROR_MESSAGE);
        }
        cropVariety.removeAllItems();

        Iterator itr = CropVariety.iterator();
        while (itr.hasNext()){
            cropVariety.addItem(itr.next().toString());
        }
    }
 
    public void PopulateGrowthStageHeaders(String column){
        try {
            ColumnHeaders = cDB.getColumnHeaders(baseDirectory, CropType.get(1));
        }catch (IOException ex) {
            Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(rootPane, "Error 102.1: Unable to retrieve Column Headers from crops database", "Database Connectivity Error", JOptionPane.ERROR_MESSAGE);
        }

        if (!data.isEmpty())
            data.clear();

        try {
            data = cDB.readOneRowFromDB(baseDirectory, CropType.get(1), column, cropVariety.getSelectedItem().toString());
            
        } catch (IOException | SQLException ex) {
            Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(rootPane, "Error 100.2: Unable to Read Row from Crops Database", "Database Connectivity Error", JOptionPane.ERROR_MESSAGE);
        }

        if (ColumnHeaders.size() > 0 && data.size() > 0){
            if (!crop.getCropVariety().equals(data.get(0)))
                crop = new cropObject(CropType, data);
            removeDataFromColumnHeaders();
            PopulatingGrowthStages(ColumnHeaders, data, null);
            crop.setGrowthStagesHeaders(ColumnHeaders);
        }
    }
    
    
    public void PopulatingCountryDropDown(int tab, String defaultCountry){
        try{
            WeatherCountry = wDB.readOneColumnFromDB(baseDirectory, "__Countries", "CountryName", null);

        }catch(SQLException e){
            JOptionPane.showMessageDialog(rootPane, "Error 201.1: Unable to retrieve Column of Data from Weather Database", "Database Error", JOptionPane.ERROR_MESSAGE);
        }    
        Iterator itr = WeatherCountry.iterator();
        if (tab == 0){
            while (itr.hasNext()){
                try{
                    Country.addItem(itr.next().toString());
                }catch(NullPointerException ex){
                    JOptionPane.showMessageDialog(rootPane, "Error 900.2: Null Pointer Exceptions", "Field Error", JOptionPane.ERROR_MESSAGE);
                }
            }
         if (defaultCountry != null)
            Country.setSelectedItem(defaultCountry);   
        }else if (tab == 1){
            while (itr.hasNext()){
                try{
                    Country1.addItem(itr.next().toString());
                }catch(NullPointerException ex){
                    JOptionPane.showMessageDialog(rootPane, "Error 900.2: Null Pointer Exceptions", "Field Error", JOptionPane.ERROR_MESSAGE);
                }
            }
            if (defaultCountry != null)
                Country1.setSelectedItem(defaultCountry);
        }
        
    }
     
    

    public void PoplulatingRegionDropDown(int tab, String defaultRegion){
        Region1.setEnabled(true);
        
        try {
            //Retrieving selected Country
            if (tab == 0){
                WeatherCountry = wDB.getTable(baseDirectory, "__Countries", Country.getSelectedItem().toString());
                crop.setCountry(Country.getSelectedItem().toString());
            }else if (tab == 1){
                WeatherCountry = wDB.getTable(baseDirectory, "__Countries", Country1.getSelectedItem().toString());
            }
            
        } catch (IOException ex) {
            Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(rootPane, "Error 200.1: Unable to retrieve Table from Weather Database", "Database Connectivity Error", JOptionPane.ERROR_MESSAGE);
        }

        /*
         * Getting list of states / regions. based on jComboBox3 and will populate
         * the regions into jComboBox4
         * This will populate "Select Weather Area:" Drop Down menu
         */

        if (WeatherCountry.get(2).equalsIgnoreCase("true")){
            //Read Weather database for country Information
            try {
                WeatherRegion = wDB.readOneColumnFromDB(baseDirectory, WeatherCountry.get(1), "State", null);
            } catch (SQLException ex) {
                Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(rootPane, "Error 201.2: Unable to retrieve Column of Data from Weather Database", "Database Connectivity Error", JOptionPane.ERROR_MESSAGE);
            }

            //Adding Region Names
            try{
                if (tab == 0){
                    if (Country.getItemCount() != 0) {
                        Region.removeAllItems();

                        Iterator itr = WeatherRegion.iterator();
                        while (itr.hasNext())
                            Region.addItem(itr.next().toString());
                        
                        if (defaultRegion != null)
                            Region.setSelectedItem(defaultRegion);
                        else
                            Region.setSelectedItem("Colorado");
                        
                        crop.setRegion(Region.getSelectedItem().toString());
                    }
                }else if (tab == 1){
                    if (Country1.getItemCount() != 0) {
                        Region1.removeAllItems();

                        Iterator itr = WeatherRegion.iterator();
                        while (itr.hasNext())
                            Region1.addItem(itr.next().toString());

                        if (defaultRegion != null)
                            Region1.setSelectedItem(defaultRegion);
                        else
                            Region1.setSelectedItem("Colorado");
                    }
                }
            }catch(NullPointerException ex){
                    JOptionPane.showMessageDialog(rootPane, "Error 900.3: Unable to retrieve Table from Weather Database", "Database Connectivity Error", JOptionPane.ERROR_MESSAGE);
            }
            
        }else{
            if (tab == 0){
                Region.removeAllItems();
                Region.setEnabled(false);
            }else if (tab == 1){
                Region1.removeAllItems();
                Region1.setEnabled(false);
            }
        }
    }

    public String PopulateWeatherFileDropDown(boolean regions, int tab,String defaultWeatherFile){
        String column = "";
        String selectedState = "";
        
        
        if (regions){
            //Get Selection
            if (tab == 0)
                selectedState = (String)Region.getSelectedItem();
            else if (tab == 1)
                selectedState = (String)Region1.getSelectedItem();
            
            try {
                //Look up Selection for appropriate table
                WeatherRegion = wDB.getTable(baseDirectory,WeatherCountry.get(1), selectedState);
            } catch (IOException ex) {
                Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(rootPane, "Error 200.2: Unable to retrieve Table from Weather Database", "Database Connectivity Error", JOptionPane.ERROR_MESSAGE);
            }

            column = WeatherRegion.get(1);

            try {
               WeatherStations = wDB.readOneColumnFromDB(baseDirectory, WeatherRegion.get(1), "WeatherStation", null);
            } catch (SQLException ex) {
                Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(rootPane, "Error 201.4: Unable to retrieve Column of Data from Weather Database", "Database Connectivity Error", JOptionPane.ERROR_MESSAGE);
            }
            
            java.util.Collections.sort(WeatherStations);
            if (tab == 0){
                WeatherFile.removeAllItems();
                
                Iterator itr = WeatherStations.iterator();
                while (itr.hasNext())
                    WeatherFile.addItem(itr.next().toString());
                
                if(defaultWeatherFile != null)
                    WeatherFile.setSelectedItem(defaultWeatherFile);
            }else if (tab == 1){
                WeatherFile1.removeAllItems();

                java.util.Collections.sort(WeatherStations);
                
                Iterator itr = WeatherStations.iterator();
                while (itr.hasNext())
                    WeatherFile1.addItem(itr.next().toString());
                
                if(defaultWeatherFile != null)
                    WeatherFile1.setSelectedItem(defaultWeatherFile);
                
                
            }
        }else{
            //Populate jComboBox5 for WeatherFiles
            try {
                WeatherStations = wDB.readOneColumnFromDB(baseDirectory, WeatherCountry.get(1), "WeatherStation", null);
            } catch (SQLException ex) {
                Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(rootPane, "Error 201.3: Unable to retrieve Table from Weather Database", "Database Connectivity Error", JOptionPane.ERROR_MESSAGE);
            }
            try{
                if (tab == 0)
                    if (Country.getItemCount() != 0) {
                        Region.removeAllItems();
                        WeatherFile.removeAllItems();
                    }
                else if (tab == 1)
                    if (Country1.getItemCount() != 0) {
                        Region1.removeAllItems();
                        WeatherFile1.removeAllItems();
                    }
                
            }catch(NullPointerException ex){
                JOptionPane.showMessageDialog(rootPane, "Error 500.2: Unable to retrieve Table from Weather Database", "Database Connectivity Error", JOptionPane.ERROR_MESSAGE);
            }
            
            java.util.Collections.sort(WeatherStations);
            Iterator itr = WeatherStations.iterator();
            if (tab == 0){
                while (itr.hasNext()){
                    try{
                         WeatherFile.addItem(itr.next().toString());
                     }catch(NullPointerException ex){
                         JOptionPane.showMessageDialog(rootPane, "Error 500.3: Unable to retrieve Table from Weather Database", "Database Connectivity Error", JOptionPane.ERROR_MESSAGE);
                     }
                }
            }else if(tab == 1){
                while (itr.hasNext()){
                    try{
                         WeatherFile1.addItem(itr.next().toString());
                     }catch(NullPointerException ex){
                         JOptionPane.showMessageDialog(rootPane, "Error 500.3: Unable to retrieve Table from Weather Database", "Database Connectivity Error", JOptionPane.ERROR_MESSAGE);
                     }
                }
            }
        }
        return column;
    }
    public void SettingWeatherFileSettings(int tab) throws SQLException{
        if (tab == 0){
            if ((WeatherFile.getSelectedItem().toString() != null) && !WeatherFile.getSelectedItem().toString().equalsIgnoreCase("none") && WeatherFile.getItemCount() > 0){
                WeatherRegion = wDB.readOneRowFromDB(baseDirectory, WeatherCountry.get(1), "State", Region.getSelectedItem().toString());
                WeatherStations = wDB.readOneRowFromDB(baseDirectory, WeatherRegion.get(1), "WeatherStation", WeatherFile.getSelectedItem().toString());

                Latitude.setText(WeatherStations.get(2));
                crop.setWeatherFileName(WeatherFile.getSelectedItem().toString());
                crop.setLatitude(Latitude.getText());

                if (WeatherStations.get(1).contains("\\"))
                    crop.setNameOfWeatherFile(WeatherStations.get(1).substring(WeatherStations.get(1).lastIndexOf("\\")+1, WeatherStations.get(1).length()));
                else
                    crop.setNameOfWeatherFile(WeatherStations.get(1));
            }else{
                Latitude.setText(null);
            }
        }else if (tab == 1){
            startSimPeriod.removeAllItems();
            endSimPeriod.removeAllItems();
            startSimPeriod.addItem("yyyy");
            endSimPeriod.addItem("yyyy");
            
            if ((WeatherFile1.getSelectedItem().toString() != null) && !WeatherFile1.getSelectedItem().toString().equalsIgnoreCase("none") && WeatherFile1.getItemCount() > 0){
                WeatherRegion = wDB.readOneRowFromDB(baseDirectory, WeatherCountry.get(1), "State", Region1.getSelectedItem().toString());
                WeatherStations = wDB.readOneRowFromDB(baseDirectory, WeatherRegion.get(1), "WeatherStation", WeatherFile1.getSelectedItem().toString());
                
                if (WeatherStations.size() > 1)
                    Latitude1.setText(WeatherStations.get(2));
                else
                    Latitude1.setText(null);
                if (WeatherStations.size() > 3)
                    startWeatherYear.setText(WeatherStations.get(3));
                if (WeatherStations.size() > 4)
                    endWeatherYear.setText(WeatherStations.get(4));
                if (startWeatherYear.getText().length() > 0 && endWeatherYear.getText().length() > 0){
                    for (int x = Integer.parseInt(startWeatherYear.getText()); x <= Integer.parseInt(endWeatherYear.getText()); x++){
                        startSimPeriod.addItem(Integer.toString(x));
                        endSimPeriod.addItem(Integer.toString(x));
                    }
                }
                    
            }else{
                Latitude1.setText(null);
            }
        }
    }
    public void PopulatingLocationSettingsRunTab(boolean clearButton) throws SQLException{
        
        if (Country1.getItemCount() == 0 || clearButton == true){
            loading = true;
            Country1.removeAllItems();
            PopulatingCountryDropDown(1, null);
            loading = false;
        }
        if (Region1.getItemCount() == 0 || clearButton == true){
            loading = true;
            Region1.removeAllItems();
            PoplulatingRegionDropDown(1, null);
            loading = false;
        }
        if (WeatherFile1.getItemCount() == 0 || clearButton == true){
            loading = true;
            WeatherFile1.removeAllItems();
            PopulateWeatherFileDropDown(true, 1, null);
            SettingWeatherFileSettings(1);
            loading = false;
        }
    }


}
