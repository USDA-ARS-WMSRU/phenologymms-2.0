/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package MMS.gui;

import static MMS.gui.main.loading;
import MMS.helperFunctions.WeatherDB;
import java.awt.Color;
import java.io.IOException;
import java.nio.file.Paths;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import static javax.swing.WindowConstants.DISPOSE_ON_CLOSE;
import org.apache.commons.lang.StringUtils;

/**
 *
 * @author admin
 */
public class deleteWeatherFile extends javax.swing.JFrame {
    private boolean loading;
    private String baseDirectory;
    private WeatherDB wDB = new WeatherDB();
    
    //Creating Weather Variables that will be used through out this program
    private List <String> WeatherCountry = null;
    private List <String> WeatherRegion = null;
    private List <String> WeatherStations = null;
    private List <String> CountryData = new ArrayList();
    /**
     * Creates new form deleteWeatherFile
     */
    public deleteWeatherFile(String Location) {
        initComponents();
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        baseDirectory = Location;
    }
    public deleteWeatherFile() {
        initComponents();
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        baseDirectory = Paths.get(".").toAbsolutePath().normalize().getParent().toString();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        DeleteTab = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel31 = new javax.swing.JLabel();
        Country1 = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        Region1 = new javax.swing.JComboBox();
        jLabel33 = new javax.swing.JLabel();
        WeatherFile1 = new javax.swing.JComboBox();
        statusLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel34 = new javax.swing.JLabel();
        Country2 = new javax.swing.JComboBox();
        jLabel35 = new javax.swing.JLabel();
        Region2 = new javax.swing.JComboBox();
        jButton2 = new javax.swing.JButton();
        statusLabel2 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel37 = new javax.swing.JLabel();
        Country3 = new javax.swing.JComboBox();
        jButton3 = new javax.swing.JButton();
        statusLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        DeleteTab.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                DeleteTabStateChanged(evt);
            }
        });

        jButton1.setText("Delete");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel31.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel31.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel31.setText("Select a Country:");

        Country1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Country1ActionPerformed(evt);
            }
        });

        jLabel32.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel32.setText("Select Weather State/Region:");

        Region1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        Region1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Region1ActionPerformed(evt);
            }
        });

        jLabel33.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel33.setText("Select Weather File:");

        WeatherFile1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WeatherFile1ActionPerformed(evt);
            }
        });

        statusLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(210, 210, 210)
                                .addComponent(jButton1))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(152, 152, 152)
                                .addComponent(statusLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(Region1, 0, 178, Short.MAX_VALUE)
                                    .addComponent(Country1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(0, 69, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel33)
                        .addGap(10, 10, 10)
                        .addComponent(WeatherFile1, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {Country1, Region1});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel31)
                    .addComponent(Country1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel32)
                    .addComponent(Region1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(WeatherFile1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel33, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                .addComponent(statusLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(jButton1)
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {Country1, Region1, WeatherFile1});

        DeleteTab.addTab("Delete WeatherFile", jPanel1);

        jLabel34.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel34.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel34.setText("Select a Country:");

        Country2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Country2ActionPerformed(evt);
            }
        });

        jLabel35.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel35.setText("Select Weather State/Region:");

        Region2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        Region2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Region2ActionPerformed(evt);
            }
        });

        jButton2.setText("Delete");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        statusLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(99, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Region2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Country2, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(91, 91, 91))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(208, 208, 208)
                        .addComponent(jButton2))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(154, 154, 154)
                        .addComponent(statusLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(83, 83, 83)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel34)
                    .addComponent(Country2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel35)
                    .addComponent(Region2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addComponent(statusLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addComponent(jButton2)
                .addContainerGap())
        );

        DeleteTab.addTab("Delete Region", jPanel2);

        jLabel37.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel37.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel37.setText("Select a Country:");

        Country3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Country3ActionPerformed(evt);
            }
        });

        jButton3.setText("Delete");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        statusLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(208, 208, 208)
                .addComponent(jButton3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(168, Short.MAX_VALUE)
                .addComponent(jLabel37, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Country3, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(75, 75, 75))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(statusLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel37)
                    .addComponent(Country3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 84, Short.MAX_VALUE)
                .addComponent(statusLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59)
                .addComponent(jButton3)
                .addContainerGap())
        );

        DeleteTab.addTab("Delete Country", jPanel3);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Delete Weather Files, Regions, & Countries Carefully");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(DeleteTab)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(DeleteTab)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Country1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Country1ActionPerformed
       if (Country1.getItemCount() != 0){
            Region1.setEnabled(true);
            WeatherFile1.setEnabled(true);

            
            try {
                //Retrieving selected Country
                WeatherCountry = wDB.getTable(baseDirectory, "__Countries", Country1.getSelectedItem().toString());
            } catch (IOException ex) {
                Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(rootPane, "Error 200.1: Unable to retrieve Table from Weather Database", "Database Connectivity Error", JOptionPane.ERROR_MESSAGE);
            }
        
            if (WeatherCountry.get(2).equalsIgnoreCase("true")){
            //Read Weather database for country Information
                try {
                    WeatherRegion = wDB.readOneColumnFromDB(baseDirectory, WeatherCountry.get(1), "State", null);
                } catch (SQLException ex) {
                    Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(rootPane, "Error 201.2: Unable to retrieve Column of Data from Weather Database", "Database Connectivity Error", JOptionPane.ERROR_MESSAGE);
                }

                //Adding Region Names
                try{

                    Region1.removeAllItems();

                    Iterator itr = WeatherRegion.iterator();
                    while (itr.hasNext())
                        Region1.addItem(itr.next().toString());
                }catch(NullPointerException ex){
                    JOptionPane.showMessageDialog(rootPane, "Error 900.3: Unable to retrieve Table from Weather Database", "Database Connectivity Error", JOptionPane.ERROR_MESSAGE);
                }
                if (Region1.getItemAt(0).equals("none")){
                    JOptionPane.showMessageDialog(rootPane, "Error ###.#: Your Country has no Regions defined, please Define a region", "Database Connectivity Error", JOptionPane.ERROR_MESSAGE);
                    WeatherFile1.setEnabled(false);
                    jButton1.setEnabled(false);
                }else{
                    WeatherFile1.setEnabled(true);
                    jButton1.setEnabled(true);
                }
            }else{
                Region1.removeAllItems();
                Region1.setEnabled(false);
            }
        }  
    }//GEN-LAST:event_Country1ActionPerformed
    
    private void WeatherFile1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WeatherFile1ActionPerformed
        if (!loading){

            //Find Weatherfile to Populate Latitude Degrees
            if (Country1.getSelectedIndex() >= 0 && Region1.getSelectedIndex() >= 0 && WeatherFile1.getSelectedIndex() >= 0){

                //Setting Weather File Settings - Latitude, Location, etc.
                try {
                    SettingWeatherFileSettings(1) ;
                } catch (SQLException ex) {
                    Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_WeatherFile1ActionPerformed

    private void Country2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Country2ActionPerformed
         List<String> info = null ;
        if (!loading){
            

            if (Country2.getItemCount() != 0){
                loading = true;

                /*
                * Populating Region DropDown button For the selected Country
                * If there are no Regions, then the WeatherFile sections will be
                * populated if there are any weatherFiles.
                */
                PoplulatingRegionDropDown(1, null);
                               
                // Retrieviing WeatherFile information such as: Latitude, location
                try {
                    SettingWeatherFileSettings(0);
                } catch (SQLException ex) {
                    Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
                }
                loading = false;
                

            }
        }
    }//GEN-LAST:event_Country2ActionPerformed

    private void Region2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Region2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Region2ActionPerformed

    private void Country3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Country3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Country3ActionPerformed

    private void DeleteTabStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_DeleteTabStateChanged
        if (DeleteTab.getSelectedIndex() == 0){
            loading = true;
            Country1.removeAllItems();
            baseDirectory = Paths.get(".").toAbsolutePath().normalize().getParent().toString();
            try{
                WeatherCountry = wDB.readOneColumnFromDB(baseDirectory, "__Countries", "CountryName", null);
            }catch(SQLException e){
                JOptionPane.showMessageDialog(rootPane, "Error 201.1: Unable to retrieve Column of Data from Weather Database", "Database Error", JOptionPane.ERROR_MESSAGE);
            }    
            Iterator<String> itr = WeatherCountry.iterator();
            while (itr.hasNext()){
                try{
                    Country1.addItem(itr.next().toString());
                 }catch(NullPointerException ex){
                    JOptionPane.showMessageDialog(rootPane, "Error 900.2: Null Pointer Exceptions", "Field Error", JOptionPane.ERROR_MESSAGE);
                 }
            }
            if (Country1.getItemCount() != 0){
                try {
                    //Retrieving selected Country
                    WeatherCountry = wDB.getTable(baseDirectory, "__Countries", Country1.getSelectedItem().toString());
                } catch (IOException ex) {
                    Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(rootPane, "Error 200.1: Unable to retrieve Table from Weather Database", "Database Connectivity Error", JOptionPane.ERROR_MESSAGE);
                }

                if (WeatherCountry.get(2).equalsIgnoreCase("true")){
                //Read Weather database for Region Information
                    try {
                        WeatherRegion = wDB.readOneColumnFromDB(baseDirectory, WeatherCountry.get(1), "State", null);
                    } catch (SQLException ex) {
                        Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(rootPane, "Error 201.2: Unable to retrieve Column of Data from Weather Database", "Database Connectivity Error", JOptionPane.ERROR_MESSAGE);
                    }

                    //Adding Region Names
                    try{
                        if (Country1.getItemCount() != 0) {
                            Region1.removeAllItems();

                            itr = WeatherRegion.iterator();
                            while (itr.hasNext())
                                Region1.addItem(itr.next().toString());
                        }
                    }catch(NullPointerException ex){
                        JOptionPane.showMessageDialog(rootPane, "Error 900.3: Unable to retrieve Table from Weather Database", "Database Connectivity Error", JOptionPane.ERROR_MESSAGE);
                    }

                    try {
                        CountryData = wDB.readOneRowFromDB(baseDirectory, "__Countries", "CountryName", Country1.getSelectedItem().toString());
                    } catch (SQLException ex) {
                        Logger.getLogger(addWeather.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(rootPane, "Error 201.2: Unable to retrieve Column of Data from Weather Database", "Database Connectivity Error", JOptionPane.ERROR_MESSAGE);
                    }
                    if (Region1.getItemCount() > 0)
                        PopulateWeatherFileDropDown(true, 0, null);
                    else
                        PopulateWeatherFileDropDown(false, 0, null);

                    try {
                        //Setting Weather File Settings - Latitude, Location, etc.
                        SettingWeatherFileSettings(0) ;
                    } catch (SQLException ex) {
                        Logger.getLogger(deleteWeatherFile.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
            }
            loading = false;
        }else if (DeleteTab.getSelectedIndex() == 1){
            loading = true;
            Country2.removeAllItems();
            PopulatingCountryDropDown(1, null);
            Region2.removeAllItems();
            PoplulatingRegionDropDown(1, null);
            loading = false;
        }else if (DeleteTab.getSelectedIndex() == 2){
            loading = true;
            Country3.removeAllItems();
            PopulatingCountryDropDown(2, null);
            loading = false;
        }
        
        
        
       
    }//GEN-LAST:event_DeleteTabStateChanged

    private void Region1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Region1ActionPerformed
          if(!loading){
            loading = true;
            if (Region1.getItemCount() != 0){
                    
                // Retrieviing Region and populating the WeatherFile DropDown Button
                PopulateWeatherFileDropDown(true, 0, null);
                
                // Retrieviing WeatherFile information such as: Latitude, location
                try {
                    SettingWeatherFileSettings(0);
                } catch (SQLException ex) {
                    Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
                }
           }
            loading = false;
        }
          statusLabel1.setText(null);
    }//GEN-LAST:event_Region1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        boolean completed = false;
        System.out.println();
        //Deleting Selected WeatherFile
        if (!WeatherFile1.getSelectedItem().toString().equalsIgnoreCase("none")){
            try {
                completed = wDB.deleteRowFromDB(baseDirectory, WeatherRegion.get(1), "WeatherStation", WeatherStations.get(0));
            } catch (SQLException ex) {
                Logger.getLogger(deleteWeatherFile.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (completed){
                statusLabel1.setForeground(Color.BLUE);
                statusLabel1.setText("Successful");
            }else{
                statusLabel1.setForeground(Color.RED);
                statusLabel1.setText("FAILED");
            }
            
        }else{
            //Error Code, Please Select a Weather File
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        boolean completed = false;
        System.out.println();
        //Deleting Selected Region
        if (!Region2.getSelectedItem().toString().equalsIgnoreCase("none")){
             String selectedState = (String)Region2.getSelectedItem();
            
            try {
                //Look up Selection for appropriate table
                WeatherRegion = wDB.getTable(baseDirectory,WeatherCountry.get(1), selectedState);
            } catch (IOException ex) {
                Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(rootPane, "Error 200.2: Unable to retrieve Table from Weather Database", "Database Connectivity Error", JOptionPane.ERROR_MESSAGE);
            }

            String column = WeatherRegion.get(1);

            try {
               WeatherStations = wDB.readOneColumnFromDB(baseDirectory, WeatherRegion.get(1), "WeatherStation", null);
            } catch (SQLException ex) {
                Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(rootPane, "Error 201.4: Unable to retrieve Column of Data from Weather Database", "Database Connectivity Error", JOptionPane.ERROR_MESSAGE);
            }
             
            if (WeatherStations.get(0).equalsIgnoreCase("none")){
                //Delete the Region Table
                completed = wDB.deleteTable(baseDirectory, WeatherRegion.get(1));
            }else{
                //Error, You can not delete a region till WeatherFiles have been deleted first.
            }
            if (completed){
                try {
                   wDB.deleteRowFromDB(baseDirectory, WeatherCountry.get(1), "STATECODE", WeatherRegion.get(1));
                } catch (SQLException ex) {
                    Logger.getLogger(deleteWeatherFile.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
                
                
            if (completed){
                statusLabel2.setForeground(Color.BLUE);
                statusLabel2.setText("Successful");
            }else{
                statusLabel2.setForeground(Color.RED);
                statusLabel2.setText("FAILED");
            }
        }else{
            //Error Code, Please select a region to delete
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        boolean completed = false;
        System.out.println();
        try {
            WeatherCountry = wDB.getTable(baseDirectory, "__Countries", Country3.getSelectedItem().toString());
            WeatherRegion = wDB.readOneColumnFromDB(baseDirectory, WeatherCountry.get(1), "State", null);
        } catch (SQLException ex) {
            Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(rootPane, "Error 201.2: Unable to retrieve Column of Data from Weather Database", "Database Connectivity Error", JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            Logger.getLogger(deleteWeatherFile.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        if (WeatherRegion.get(0).equalsIgnoreCase("none")){
            completed = wDB.deleteTable(baseDirectory, WeatherCountry.get(1));
        }else{
            //Error, Please delete All of the region Information before deleting the Country.
        }
        if (completed){
                try {
                   wDB.deleteRowFromDB(baseDirectory, "__Countries", "Alpha-3 Code", WeatherCountry.get(1));
                } catch (SQLException ex) {
                    Logger.getLogger(deleteWeatherFile.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        if (completed){
            statusLabel3.setForeground(Color.BLUE);
            statusLabel3.setText("Successful");
        }else{
            statusLabel3.setForeground(Color.RED);
            statusLabel3.setText("FAILED");
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(deleteWeatherFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(deleteWeatherFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(deleteWeatherFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(deleteWeatherFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        try {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");

        } catch (ClassNotFoundException | IllegalAccessException | InstantiationException | UnsupportedLookAndFeelException e) {
        
        }
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new deleteWeatherFile().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox Country1;
    private javax.swing.JComboBox Country2;
    private javax.swing.JComboBox Country3;
    private javax.swing.JTabbedPane DeleteTab;
    private javax.swing.JComboBox Region1;
    private javax.swing.JComboBox Region2;
    private javax.swing.JComboBox WeatherFile1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel statusLabel1;
    private javax.swing.JLabel statusLabel2;
    private javax.swing.JLabel statusLabel3;
    // End of variables declaration//GEN-END:variables
 public void PopulatingCountryDropDown(int tab, String dCountry){
        try{
            baseDirectory = Paths.get(".").toAbsolutePath().normalize().getParent().toString();
            WeatherCountry = wDB.readOneColumnFromDB(baseDirectory, "__Countries", "CountryName", null);

        }catch(SQLException e){
            JOptionPane.showMessageDialog(rootPane, "Error 201.1: Unable to retrieve Column of Data from Weather Database", "Database Error", JOptionPane.ERROR_MESSAGE);
        }    
        Iterator itr = WeatherCountry.iterator();
        if (tab == 0){
            while (itr.hasNext()){
                try{
                    Country1.addItem(itr.next().toString());
                }catch(NullPointerException ex){
                    JOptionPane.showMessageDialog(rootPane, "Error 900.2: Null Pointer Exceptions", "Field Error", JOptionPane.ERROR_MESSAGE);
                }
            }

        }else if (tab == 1){
            while (itr.hasNext()){
                try{
                    Country2.addItem(itr.next().toString());
                }catch(NullPointerException ex){
                    JOptionPane.showMessageDialog(rootPane, "Error 900.2: Null Pointer Exceptions", "Field Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }else if (tab == 2){
             while (itr.hasNext()){
                try{
                    Country3.addItem(itr.next().toString());
                }catch(NullPointerException ex){
                    JOptionPane.showMessageDialog(rootPane, "Error 900.2: Null Pointer Exceptions", "Field Error", JOptionPane.ERROR_MESSAGE);
                }
             }
        }
        
    }
     
    

    public void PoplulatingRegionDropDown(int tab, String dRegion){
        Region1.setEnabled(true);
        
        try {
            //Retrieving selected Country
            if (tab == 0){
                WeatherCountry = wDB.getTable(baseDirectory, "__Countries", Country1.getSelectedItem().toString());
            }else if (tab == 1){
                WeatherCountry = wDB.getTable(baseDirectory, "__Countries", Country2.getSelectedItem().toString());
            }
            
        } catch (IOException ex) {
            Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(rootPane, "Error 200.1: Unable to retrieve Table from Weather Database", "Database Connectivity Error", JOptionPane.ERROR_MESSAGE);
        }

        /*
         * Getting list of states / regions. based on jComboBox3 and will populate
         * the regions into jComboBox4
         * This will populate "Select Weather Area:" Drop Down menu
         */

        if (WeatherCountry.get(2).equalsIgnoreCase("true")){
            //Read Weather database for country Information
            try {
                WeatherRegion = wDB.readOneColumnFromDB(baseDirectory, WeatherCountry.get(1), "State", null);
            } catch (SQLException ex) {
                Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(rootPane, "Error 201.2: Unable to retrieve Column of Data from Weather Database", "Database Connectivity Error", JOptionPane.ERROR_MESSAGE);
            }

            //Adding Region Names
            try{
                if (tab == 0){
                    if (Country1.getItemCount() != 0) {
                        Region1.removeAllItems();

                        Iterator itr = WeatherRegion.iterator();
                        while (itr.hasNext())
                            Region1.addItem(itr.next().toString());
                    }
                }else if (tab == 1){
                    if (Country2.getItemCount() != 0) {
                        Region2.removeAllItems();

                        Iterator itr = WeatherRegion.iterator();
                        while (itr.hasNext())
                            Region2.addItem(itr.next().toString());
                    }
                }
            }catch(NullPointerException ex){
                    JOptionPane.showMessageDialog(rootPane, "Error 900.3: Unable to retrieve Table from Weather Database", "Database Connectivity Error", JOptionPane.ERROR_MESSAGE);
            }
            
        }else{
            if (tab == 0){
                Region1.removeAllItems();
                Region1.setEnabled(false);
            }else if (tab == 1){
                Region2.removeAllItems();
                Region2.setEnabled(false);
            }
         }
    }

    public String PopulateWeatherFileDropDown(boolean regions, int tab,String defaultWeatherFile){
        String column = "";
        String selectedState = "";
        
        
        if (regions){
            //Get Selection
            if (tab == 0)
                selectedState = (String)Region1.getSelectedItem();
            else if (tab == 1)
                selectedState = (String)Region2.getSelectedItem();
            
            try {
                //Look up Selection for appropriate table
                WeatherRegion = wDB.getTable(baseDirectory,WeatherCountry.get(1), selectedState);
            } catch (IOException ex) {
                Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(rootPane, "Error 200.2: Unable to retrieve Table from Weather Database", "Database Connectivity Error", JOptionPane.ERROR_MESSAGE);
            }

            column = WeatherRegion.get(1);

            try {
               WeatherStations = wDB.readOneColumnFromDB(baseDirectory, WeatherRegion.get(1), "WeatherStation", null);
            } catch (SQLException ex) {
                Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(rootPane, "Error 201.4: Unable to retrieve Column of Data from Weather Database", "Database Connectivity Error", JOptionPane.ERROR_MESSAGE);
            }
            
            java.util.Collections.sort(WeatherStations);
            
            if (tab == 0){
                WeatherFile1.removeAllItems();
                
                Iterator itr = WeatherStations.iterator();
                while (itr.hasNext())
                    WeatherFile1.addItem(itr.next().toString());
                
                if(defaultWeatherFile != null)
                    WeatherFile1.setSelectedItem(defaultWeatherFile);
            }
        }else{
            //Populate jComboBox5 for WeatherFiles
            try {
                WeatherStations = wDB.readOneColumnFromDB(baseDirectory, WeatherCountry.get(1), "WeatherStation", null);
            } catch (SQLException ex) {
                Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(rootPane, "Error 201.3: Unable to retrieve Table from Weather Database", "Database Connectivity Error", JOptionPane.ERROR_MESSAGE);
            }
            
            java.util.Collections.sort(WeatherStations);
            Iterator itr = WeatherStations.iterator();
            if (tab == 0){
                while (itr.hasNext()){
                    try{
                         WeatherFile1.addItem(itr.next().toString());
                     }catch(NullPointerException ex){
                         JOptionPane.showMessageDialog(rootPane, "Error 500.3: Unable to retrieve Table from Weather Database", "Database Connectivity Error", JOptionPane.ERROR_MESSAGE);
                     }
                }
            }
        }
        return column;
    }
    public void SettingWeatherFileSettings(int tab) throws SQLException{
        if (tab == 0){
            if ((WeatherFile1.getSelectedItem().toString() != null) && !WeatherFile1.getSelectedItem().toString().equalsIgnoreCase("none") && WeatherFile1.getItemCount() > 0){
                WeatherRegion = wDB.readOneRowFromDB(baseDirectory, WeatherCountry.get(1), "State", Region1.getSelectedItem().toString());
                WeatherStations = wDB.readOneRowFromDB(baseDirectory, WeatherRegion.get(1), "WeatherStation", WeatherFile1.getSelectedItem().toString());

            }
        }
    }
}
